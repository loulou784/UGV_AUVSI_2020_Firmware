
UGV_AUVSI_2020_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  08014e00  08014e00  00024e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154cc  080154cc  00030380  2**0
                  CONTENTS
  4 .ARM          00000008  080154cc  080154cc  000254cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154d4  080154d4  00030380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154d4  080154d4  000254d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154d8  080154d8  000254d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  080154dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000229c  20000380  0801585c  00030380  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000261c  0801585c  0003261c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038f3b  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006fa2  00000000  00000000  000692eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002510  00000000  00000000  00070290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002198  00000000  00000000  000727a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002dd9b  00000000  00000000  00074938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002922d  00000000  00000000  000a26d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e968f  00000000  00000000  000cb900  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b4f8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000acd8  00000000  00000000  001b500c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000380 	.word	0x20000380
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014de4 	.word	0x08014de4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000384 	.word	0x20000384
 80001cc:	08014de4 	.word	0x08014de4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <ApplicationInit>:

uint8_t u8CommRetVal;
uint16_t u16CommLength = 0;
uint8_t u8CommReturnArray[256];

void ApplicationInit() {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	bSDPresent = false;
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <ApplicationInit+0xac>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
	u32SensorLastUpdate = 0;
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <ApplicationInit+0xb0>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	u32SensorTransmitLastUpdate = 0;
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <ApplicationInit+0xb4>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
	u8CommRetVal = 0;
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <ApplicationInit+0xb8>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
	u32HeartBeatLastUpdate = 0;
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <ApplicationInit+0xbc>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
	memset(&vehiculeConfig, 0, sizeof(vehiculeConfig));
 800106a:	2229      	movs	r2, #41	; 0x29
 800106c:	2100      	movs	r1, #0
 800106e:	4826      	ldr	r0, [pc, #152]	; (8001108 <ApplicationInit+0xc0>)
 8001070:	f010 f9a9 	bl	80113c6 <memset>
	memset(&rawSensorData, 0, sizeof(rawSensorData));
 8001074:	2237      	movs	r2, #55	; 0x37
 8001076:	2100      	movs	r1, #0
 8001078:	4824      	ldr	r0, [pc, #144]	; (800110c <ApplicationInit+0xc4>)
 800107a:	f010 f9a4 	bl	80113c6 <memset>

	// Mount SD Card
	if(FR_OK == f_mount(&FatFs, "", 1)) {
 800107e:	2201      	movs	r2, #1
 8001080:	4923      	ldr	r1, [pc, #140]	; (8001110 <ApplicationInit+0xc8>)
 8001082:	4824      	ldr	r0, [pc, #144]	; (8001114 <ApplicationInit+0xcc>)
 8001084:	f00e fd80 	bl	800fb88 <f_mount>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <ApplicationInit+0x4c>
		bSDPresent = true;
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <ApplicationInit+0xac>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
	}

	// Try reading param if sd present else using default params
	ConfigLogManagerReadConfigFileSD("config.txt", &vehiculeConfig);
 8001094:	491c      	ldr	r1, [pc, #112]	; (8001108 <ApplicationInit+0xc0>)
 8001096:	4820      	ldr	r0, [pc, #128]	; (8001118 <ApplicationInit+0xd0>)
 8001098:	f000 f9d8 	bl	800144c <ConfigLogManagerReadConfigFileSD>

	// Unmount SD Card
	if(bSDPresent == true) {
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <ApplicationInit+0xac>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <ApplicationInit+0x66>
		f_mount(NULL, "", 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	491a      	ldr	r1, [pc, #104]	; (8001110 <ApplicationInit+0xc8>)
 80010a8:	2000      	movs	r0, #0
 80010aa:	f00e fd6d 	bl	800fb88 <f_mount>
	}

	// Initialize buzzer pwm
	HAL_TIM_PWM_Init(&htim1);
 80010ae:	481b      	ldr	r0, [pc, #108]	; (800111c <ApplicationInit+0xd4>)
 80010b0:	f007 ff8c 	bl	8008fcc <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010b4:	2100      	movs	r1, #0
 80010b6:	4819      	ldr	r0, [pc, #100]	; (800111c <ApplicationInit+0xd4>)
 80010b8:	f007 ffb4 	bl	8009024 <HAL_TIM_PWM_Start>

	// Initialize BNO055
	bno055_assignI2C(&hi2c1);
 80010bc:	4818      	ldr	r0, [pc, #96]	; (8001120 <ApplicationInit+0xd8>)
 80010be:	f001 fb41 	bl	8002744 <bno055_assignI2C>
	bno055_setup();
 80010c2:	f001 f955 	bl	8002370 <bno055_setup>
	bno055_setExternalCrystalUse(true);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f001 f91a 	bl	8002300 <bno055_setExternalCrystalUse>
	bno055_setOperationModeNDOF();
 80010cc:	f001 f911 	bl	80022f2 <bno055_setOperationModeNDOF>

	// Initialize BME280
	bmp280_init_default_params(&bmp280.params);
 80010d0:	4814      	ldr	r0, [pc, #80]	; (8001124 <ApplicationInit+0xdc>)
 80010d2:	f000 fbc5 	bl	8001860 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <ApplicationInit+0xe0>)
 80010d8:	2276      	movs	r2, #118	; 0x76
 80010da:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <ApplicationInit+0xe0>)
 80010de:	4a10      	ldr	r2, [pc, #64]	; (8001120 <ApplicationInit+0xd8>)
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
	bmp280_init(&bmp280, &bmp280.params);
 80010e2:	4910      	ldr	r1, [pc, #64]	; (8001124 <ApplicationInit+0xdc>)
 80010e4:	4810      	ldr	r0, [pc, #64]	; (8001128 <ApplicationInit+0xe0>)
 80010e6:	f000 fd36 	bl	8001b56 <bmp280_init>

	// Initialize GPS
	//GPS_Init();

	// Initialize Telemetry
	CommManagerInit(&huart2);
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <ApplicationInit+0xe4>)
 80010ec:	f001 ff3e 	bl	8002f6c <CommManagerInit>

	// Initialize audio
	//playSongIT(&takeOnMeMelody[0], &takeOnMeTone[0], sizeof(takeOnMeTone), 0.5);
	//enableRepeat(true);
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000093c 	.word	0x2000093c
 80010f8:	2000096c 	.word	0x2000096c
 80010fc:	20000704 	.word	0x20000704
 8001100:	20000708 	.word	0x20000708
 8001104:	200009dc 	.word	0x200009dc
 8001108:	20000940 	.word	0x20000940
 800110c:	200009a4 	.word	0x200009a4
 8001110:	08014e00 	.word	0x08014e00
 8001114:	2000070c 	.word	0x2000070c
 8001118:	08014e04 	.word	0x08014e04
 800111c:	20001094 	.word	0x20001094
 8001120:	20000fe4 	.word	0x20000fe4
 8001124:	2000099c 	.word	0x2000099c
 8001128:	20000970 	.word	0x20000970
 800112c:	2000121c 	.word	0x2000121c

08001130 <ApplicationTask>:

void ApplicationTask() {
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b08f      	sub	sp, #60	; 0x3c
 8001134:	af00      	add	r7, sp, #0


	//Sensor data update loop
	if(HAL_GetTick() - u32SensorLastUpdate > SENSORUPDATE_MS) {
 8001136:	f002 febf 	bl	8003eb8 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <ApplicationTask+0x15c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b14      	cmp	r3, #20
 8001144:	d956      	bls.n	80011f4 <ApplicationTask+0xc4>
		// Reading BNO055
		bno055_vector_t v = bno055_getVectorEuler();
 8001146:	f001 fab9 	bl	80026bc <bno055_getVectorEuler>
 800114a:	eeb0 4a40 	vmov.f32	s8, s0
 800114e:	eef0 4a60 	vmov.f32	s9, s1
 8001152:	eeb0 5a41 	vmov.f32	s10, s2
 8001156:	eef0 5a61 	vmov.f32	s11, s3
 800115a:	eeb0 6a42 	vmov.f32	s12, s4
 800115e:	eef0 6a62 	vmov.f32	s13, s5
 8001162:	eeb0 7a43 	vmov.f32	s14, s6
 8001166:	eef0 7a63 	vmov.f32	s15, s7
 800116a:	ed87 4b00 	vstr	d4, [r7]
 800116e:	ed87 5b02 	vstr	d5, [r7, #8]
 8001172:	ed87 6b04 	vstr	d6, [r7, #16]
 8001176:	ed87 7b06 	vstr	d7, [r7, #24]
		bno055_calibration_state_t s = bno055_getCalibrationState();
 800117a:	f001 f921 	bl	80023c0 <bno055_getCalibrationState>
 800117e:	4603      	mov	r3, r0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
		rawSensorData.BNO055Data.dPitch = v.z;
 8001182:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001186:	4a42      	ldr	r2, [pc, #264]	; (8001290 <ApplicationTask+0x160>)
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	6054      	str	r4, [r2, #4]
		rawSensorData.BNO055Data.dRoll = v.y;
 800118c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001190:	4a3f      	ldr	r2, [pc, #252]	; (8001290 <ApplicationTask+0x160>)
 8001192:	6113      	str	r3, [r2, #16]
 8001194:	6154      	str	r4, [r2, #20]
		rawSensorData.BNO055Data.dYaw = v.x;
 8001196:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800119a:	4a3d      	ldr	r2, [pc, #244]	; (8001290 <ApplicationTask+0x160>)
 800119c:	6093      	str	r3, [r2, #8]
 800119e:	60d4      	str	r4, [r2, #12]

		rawSensorData.BNO055Data.u8AccCal = s.accel;
 80011a0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <ApplicationTask+0x160>)
 80011a6:	76da      	strb	r2, [r3, #27]
		rawSensorData.BNO055Data.u8GyrCal = s.gyro;
 80011a8:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80011ac:	4b38      	ldr	r3, [pc, #224]	; (8001290 <ApplicationTask+0x160>)
 80011ae:	769a      	strb	r2, [r3, #26]
		rawSensorData.BNO055Data.u8MagCal = s.mag;
 80011b0:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <ApplicationTask+0x160>)
 80011b6:	765a      	strb	r2, [r3, #25]
		rawSensorData.BNO055Data.u8SysCal = s.sys;
 80011b8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <ApplicationTask+0x160>)
 80011be:	761a      	strb	r2, [r3, #24]

		// Reading BME280
		float fTemperature, fPressure, fHumidity;
		bmp280_read_float(&bmp280, &fTemperature, &fPressure, &fHumidity);
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011c8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80011cc:	4831      	ldr	r0, [pc, #196]	; (8001294 <ApplicationTask+0x164>)
 80011ce:	f001 f817 	bl	8002200 <bmp280_read_float>
		rawSensorData.BME280Data.fTemperature = fTemperature;
 80011d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <ApplicationTask+0x160>)
 80011d6:	332a      	adds	r3, #42	; 0x2a
 80011d8:	601a      	str	r2, [r3, #0]
		rawSensorData.BME280Data.fPressure = fPressure;
 80011da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <ApplicationTask+0x160>)
 80011de:	3332      	adds	r3, #50	; 0x32
 80011e0:	601a      	str	r2, [r3, #0]
		rawSensorData.BME280Data.fHumidity = fHumidity;
 80011e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <ApplicationTask+0x160>)
 80011e6:	332e      	adds	r3, #46	; 0x2e
 80011e8:	601a      	str	r2, [r3, #0]

		u32SensorLastUpdate = HAL_GetTick();
 80011ea:	f002 fe65 	bl	8003eb8 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	4b26      	ldr	r3, [pc, #152]	; (800128c <ApplicationTask+0x15c>)
 80011f2:	601a      	str	r2, [r3, #0]
	}

	// Process telemetry data as fast as possible
	u8CommRetVal = CommManagerProcessBuffer(u8CommReturnArray, &u16CommLength);
 80011f4:	4928      	ldr	r1, [pc, #160]	; (8001298 <ApplicationTask+0x168>)
 80011f6:	4829      	ldr	r0, [pc, #164]	; (800129c <ApplicationTask+0x16c>)
 80011f8:	f001 fc92 	bl	8002b20 <CommManagerProcessBuffer>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <ApplicationTask+0x170>)
 8001202:	701a      	strb	r2, [r3, #0]
	if (u8CommRetVal) {
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <ApplicationTask+0x170>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00e      	beq.n	800122a <ApplicationTask+0xfa>
		uint8_t u8CMD = u8CommReturnArray[2];
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <ApplicationTask+0x16c>)
 800120e:	789b      	ldrb	r3, [r3, #2]
 8001210:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint8_t u8Len = u8CommReturnArray[3];
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <ApplicationTask+0x16c>)
 8001216:	78db      	ldrb	r3, [r3, #3]
 8001218:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		if(u8CMD == CMD_READPARAM) {
 800121c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001220:	2b12      	cmp	r3, #18
 8001222:	d102      	bne.n	800122a <ApplicationTask+0xfa>
			CommManagerSendConfigData(&vehiculeConfig);
 8001224:	481f      	ldr	r0, [pc, #124]	; (80012a4 <ApplicationTask+0x174>)
 8001226:	f001 fe94 	bl	8002f52 <CommManagerSendConfigData>
		}
	}

	if(HAL_GetTick() - u32HeartBeatLastUpdate > vehiculeConfig.u16HeartbeatTransmitInterval) {
 800122a:	f002 fe45 	bl	8003eb8 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <ApplicationTask+0x178>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <ApplicationTask+0x174>)
 8001238:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800123a:	b292      	uxth	r2, r2
 800123c:	4293      	cmp	r3, r2
 800123e:	d90e      	bls.n	800125e <ApplicationTask+0x12e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001240:	2101      	movs	r1, #1
 8001242:	481a      	ldr	r0, [pc, #104]	; (80012ac <ApplicationTask+0x17c>)
 8001244:	f004 f9f6 	bl	8005634 <HAL_GPIO_TogglePin>

		CommManagerSendHeartbeat(HAL_GetTick());
 8001248:	f002 fe36 	bl	8003eb8 <HAL_GetTick>
 800124c:	4603      	mov	r3, r0
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fe54 	bl	8002efc <CommManagerSendHeartbeat>

		u32HeartBeatLastUpdate = HAL_GetTick();
 8001254:	f002 fe30 	bl	8003eb8 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <ApplicationTask+0x178>)
 800125c:	601a      	str	r2, [r3, #0]
	}

	if(HAL_GetTick() - u32SensorTransmitLastUpdate > vehiculeConfig.u16SensorTransmitInterval) {
 800125e:	f002 fe2b 	bl	8003eb8 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <ApplicationTask+0x180>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <ApplicationTask+0x174>)
 800126c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800126e:	b292      	uxth	r2, r2
 8001270:	4293      	cmp	r3, r2
 8001272:	d907      	bls.n	8001284 <ApplicationTask+0x154>
		CommManagerSendRawSensorData(&rawSensorData);
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <ApplicationTask+0x160>)
 8001276:	f001 fe5f 	bl	8002f38 <CommManagerSendRawSensorData>
		u32SensorTransmitLastUpdate = HAL_GetTick();
 800127a:	f002 fe1d 	bl	8003eb8 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <ApplicationTask+0x180>)
 8001282:	601a      	str	r2, [r3, #0]
	}

	//GPS_Process();
}
 8001284:	bf00      	nop
 8001286:	373c      	adds	r7, #60	; 0x3c
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	2000096c 	.word	0x2000096c
 8001290:	200009a4 	.word	0x200009a4
 8001294:	20000970 	.word	0x20000970
 8001298:	2000039c 	.word	0x2000039c
 800129c:	20000604 	.word	0x20000604
 80012a0:	20000708 	.word	0x20000708
 80012a4:	20000940 	.word	0x20000940
 80012a8:	200009dc 	.word	0x200009dc
 80012ac:	48000400 	.word	0x48000400
 80012b0:	20000704 	.word	0x20000704

080012b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	GPS_CallBack();
 80012bc:	f000 fa00 	bl	80016c0 <GPS_CallBack>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <ConfigLogManagerReadFloatFromSD>:

#include "ConfigLogManager.h"

float ConfigLogManagerReadFloatFromSD(FIL *fp, uint8_t *pu8Key, float fDefaultVal) {
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b0b9      	sub	sp, #228	; 0xe4
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t buf[100];
    uint8_t u8Key[50];
    uint8_t u8Val[50];

    f_lseek(fp, 0);
 80012d6:	2100      	movs	r1, #0
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f00f f840 	bl	801035e <f_lseek>

    while (1) {
        if (f_gets(buf, 100, fp) == NULL) break;
 80012de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	2164      	movs	r1, #100	; 0x64
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00f fa42 	bl	8010770 <f_gets>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d021      	beq.n	8001336 <ConfigLogManagerReadFloatFromSD+0x6e>
        if(2 == sscanf(buf, "%[^'=']=%[^';']", u8Key, u8Val)) {
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80012fa:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80012fe:	4912      	ldr	r1, [pc, #72]	; (8001348 <ConfigLogManagerReadFloatFromSD+0x80>)
 8001300:	f010 fa8a 	bl	8011818 <siscanf>
 8001304:	4603      	mov	r3, r0
 8001306:	2b02      	cmp	r3, #2
 8001308:	d1e9      	bne.n	80012de <ConfigLogManagerReadFloatFromSD+0x16>
            if(strcmp(pu8Key, u8Key) == 0) {
 800130a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800130e:	4619      	mov	r1, r3
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f7fe ff5d 	bl	80001d0 <strcmp>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1e0      	bne.n	80012de <ConfigLogManagerReadFloatFromSD+0x16>
                return atof(u8Val);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4618      	mov	r0, r3
 8001322:	f010 f813 	bl	801134c <atof>
 8001326:	ec54 3b10 	vmov	r3, r4, d0
 800132a:	4618      	mov	r0, r3
 800132c:	4621      	mov	r1, r4
 800132e:	f7ff fc6b 	bl	8000c08 <__aeabi_d2f>
 8001332:	4603      	mov	r3, r0
 8001334:	e001      	b.n	800133a <ConfigLogManagerReadFloatFromSD+0x72>
        if (f_gets(buf, 100, fp) == NULL) break;
 8001336:	bf00      	nop
            }
        }
    }
    return fDefaultVal;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	ee07 3a90 	vmov	s15, r3
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	37e4      	adds	r7, #228	; 0xe4
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08014e10 	.word	0x08014e10

0800134c <ConfigLogManagerReadUInt16FromSD>:

float ConfigLogManagerReadUInt16FromSD(FIL *fp, uint8_t *pu8Key, uint16_t fDefaultVal) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b0b8      	sub	sp, #224	; 0xe0
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	4613      	mov	r3, r2
 8001358:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[100];
    uint8_t u8Key[50];
    uint8_t u8Val[50];

    f_lseek(fp, 0);
 800135a:	2100      	movs	r1, #0
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f00e fffe 	bl	801035e <f_lseek>

    while (1) {
        if (f_gets(buf, 100, fp) == NULL) break;
 8001362:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	2164      	movs	r1, #100	; 0x64
 800136a:	4618      	mov	r0, r3
 800136c:	f00f fa00 	bl	8010770 <f_gets>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d01e      	beq.n	80013b4 <ConfigLogManagerReadUInt16FromSD+0x68>
        if(2 == sscanf(buf, "%[^'=']=%[^';']", u8Key, u8Val)) {
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800137e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001382:	4912      	ldr	r1, [pc, #72]	; (80013cc <ConfigLogManagerReadUInt16FromSD+0x80>)
 8001384:	f010 fa48 	bl	8011818 <siscanf>
 8001388:	4603      	mov	r3, r0
 800138a:	2b02      	cmp	r3, #2
 800138c:	d1e9      	bne.n	8001362 <ConfigLogManagerReadUInt16FromSD+0x16>
            if(strcmp(pu8Key, u8Key) == 0) {
 800138e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001392:	4619      	mov	r1, r3
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7fe ff1b 	bl	80001d0 <strcmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1e0      	bne.n	8001362 <ConfigLogManagerReadUInt16FromSD+0x16>
                return atoi(u8Val);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00f ffd4 	bl	8011352 <atoi>
 80013aa:	ee07 0a90 	vmov	s15, r0
 80013ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b2:	e005      	b.n	80013c0 <ConfigLogManagerReadUInt16FromSD+0x74>
        if (f_gets(buf, 100, fp) == NULL) break;
 80013b4:	bf00      	nop
            }
        }
    }
    return fDefaultVal;
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	37e0      	adds	r7, #224	; 0xe0
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	08014e10 	.word	0x08014e10

080013d0 <ConfigLogManagerReadBoolFromSD>:

bool ConfigLogManagerReadBoolFromSD(FIL *fp, uint8_t *pu8Key, bool bDefaultVal) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0b8      	sub	sp, #224	; 0xe0
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	4613      	mov	r3, r2
 80013dc:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[100];
    uint8_t u8Key[50];
    uint8_t u8Val[50];

    f_lseek(fp, 0);
 80013de:	2100      	movs	r1, #0
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f00e ffbc 	bl	801035e <f_lseek>

    while (1) {
        if (f_gets(buf, 100, fp) == NULL) break;
 80013e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	2164      	movs	r1, #100	; 0x64
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00f f9be 	bl	8010770 <f_gets>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d020      	beq.n	800143c <ConfigLogManagerReadBoolFromSD+0x6c>
        if(2 == sscanf(buf, "%[^'=']=%[^';']", u8Key, u8Val)) {
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001402:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001406:	4910      	ldr	r1, [pc, #64]	; (8001448 <ConfigLogManagerReadBoolFromSD+0x78>)
 8001408:	f010 fa06 	bl	8011818 <siscanf>
 800140c:	4603      	mov	r3, r0
 800140e:	2b02      	cmp	r3, #2
 8001410:	d1e9      	bne.n	80013e6 <ConfigLogManagerReadBoolFromSD+0x16>
            if(strcmp(pu8Key, u8Key) == 0) {
 8001412:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001416:	4619      	mov	r1, r3
 8001418:	68b8      	ldr	r0, [r7, #8]
 800141a:	f7fe fed9 	bl	80001d0 <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1e0      	bne.n	80013e6 <ConfigLogManagerReadBoolFromSD+0x16>
                return (atoi(u8Val) <= 0) ? false : true;
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f00f ff92 	bl	8011352 <atoi>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	bfcc      	ite	gt
 8001434:	2301      	movgt	r3, #1
 8001436:	2300      	movle	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	e001      	b.n	8001440 <ConfigLogManagerReadBoolFromSD+0x70>
        if (f_gets(buf, 100, fp) == NULL) break;
 800143c:	bf00      	nop
            }
        }
    }
    return bDefaultVal;
 800143e:	79fb      	ldrb	r3, [r7, #7]
}
 8001440:	4618      	mov	r0, r3
 8001442:	37e0      	adds	r7, #224	; 0xe0
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	08014e10 	.word	0x08014e10

0800144c <ConfigLogManagerReadConfigFileSD>:

void ConfigLogManagerReadConfigFileSD(uint8_t *pu8fileName, oConfig_t *pConfig) {
 800144c:	b580      	push	{r7, lr}
 800144e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8001452:	af00      	add	r7, sp, #0
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	6018      	str	r0, [r3, #0]
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	6019      	str	r1, [r3, #0]
	FIL fp;
	f_open(&fp, pu8fileName, FA_READ);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	f107 0010 	add.w	r0, r7, #16
 8001468:	2201      	movs	r2, #1
 800146a:	6819      	ldr	r1, [r3, #0]
 800146c:	f00e fbd2 	bl	800fc14 <f_open>


    pConfig->fReleaseAltitude = ConfigLogManagerReadFloatFromSD(&fp, "fReleaseAltitude", 1.0);
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001478:	4981      	ldr	r1, [pc, #516]	; (8001680 <ConfigLogManagerReadConfigFileSD+0x234>)
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff24 	bl	80012c8 <ConfigLogManagerReadFloatFromSD>
 8001480:	eef0 7a40 	vmov.f32	s15, s0
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	ee17 2a90 	vmov	r2, s15
 800148e:	601a      	str	r2, [r3, #0]
    pConfig->fArmingAltitude = ConfigLogManagerReadFloatFromSD(&fp, "fArmingAltitude", 12.0);
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8001498:	497a      	ldr	r1, [pc, #488]	; (8001684 <ConfigLogManagerReadConfigFileSD+0x238>)
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff14 	bl	80012c8 <ConfigLogManagerReadFloatFromSD>
 80014a0:	eef0 7a40 	vmov.f32	s15, s0
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	ee17 2a90 	vmov	r2, s15
 80014ae:	605a      	str	r2, [r3, #4]
    pConfig->fHardReleaseAltitude = ConfigLogManagerReadFloatFromSD(&fp, "fHardReleaseAltitude", 8.0);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80014b8:	4973      	ldr	r1, [pc, #460]	; (8001688 <ConfigLogManagerReadConfigFileSD+0x23c>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff04 	bl	80012c8 <ConfigLogManagerReadFloatFromSD>
 80014c0:	eef0 7a40 	vmov.f32	s15, s0
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	ee17 2a90 	vmov	r2, s15
 80014ce:	609a      	str	r2, [r3, #8]
    pConfig->fSoftReleaseAltitude = ConfigLogManagerReadFloatFromSD(&fp, "fSoftReleaseAltitude", 2.0);
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80014d8:	496c      	ldr	r1, [pc, #432]	; (800168c <ConfigLogManagerReadConfigFileSD+0x240>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fef4 	bl	80012c8 <ConfigLogManagerReadFloatFromSD>
 80014e0:	eef0 7a40 	vmov.f32	s15, s0
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	ee17 2a90 	vmov	r2, s15
 80014ee:	60da      	str	r2, [r3, #12]
    pConfig->fTargetRadius = ConfigLogManagerReadFloatFromSD(&fp, "fTargetRadius", 1.0);
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80014f8:	4965      	ldr	r1, [pc, #404]	; (8001690 <ConfigLogManagerReadConfigFileSD+0x244>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fee4 	bl	80012c8 <ConfigLogManagerReadFloatFromSD>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	ee17 2a90 	vmov	r2, s15
 800150e:	611a      	str	r2, [r3, #16]
    pConfig->fTargetLat = ConfigLogManagerReadFloatFromSD(&fp, "fTargetLat", 0.0);
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8001694 <ConfigLogManagerReadConfigFileSD+0x248>
 8001518:	495f      	ldr	r1, [pc, #380]	; (8001698 <ConfigLogManagerReadConfigFileSD+0x24c>)
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fed4 	bl	80012c8 <ConfigLogManagerReadFloatFromSD>
 8001520:	eef0 7a40 	vmov.f32	s15, s0
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	ee17 2a90 	vmov	r2, s15
 800152e:	615a      	str	r2, [r3, #20]
    pConfig->fTargetLong = ConfigLogManagerReadFloatFromSD(&fp, "fTargetLong", 0.0);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001694 <ConfigLogManagerReadConfigFileSD+0x248>
 8001538:	4958      	ldr	r1, [pc, #352]	; (800169c <ConfigLogManagerReadConfigFileSD+0x250>)
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fec4 	bl	80012c8 <ConfigLogManagerReadFloatFromSD>
 8001540:	eef0 7a40 	vmov.f32	s15, s0
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	ee17 2a90 	vmov	r2, s15
 800154e:	619a      	str	r2, [r3, #24]

    pConfig->u16HardReleaseCountdown = ConfigLogManagerReadUInt16FromSD(&fp, "u16HardReleaseCountdown", 60000);
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001558:	4951      	ldr	r1, [pc, #324]	; (80016a0 <ConfigLogManagerReadConfigFileSD+0x254>)
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fef6 	bl	800134c <ConfigLogManagerReadUInt16FromSD>
 8001560:	eef0 7a40 	vmov.f32	s15, s0
 8001564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001568:	ee17 3a90 	vmov	r3, s15
 800156c:	b29a      	uxth	r2, r3
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	839a      	strh	r2, [r3, #28]
    pConfig->u16SoftReleaseCountdown = ConfigLogManagerReadUInt16FromSD(&fp, "u16SoftReleaseCountdown", 6000);
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	f241 7270 	movw	r2, #6000	; 0x1770
 800157e:	4949      	ldr	r1, [pc, #292]	; (80016a4 <ConfigLogManagerReadConfigFileSD+0x258>)
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fee3 	bl	800134c <ConfigLogManagerReadUInt16FromSD>
 8001586:	eef0 7a40 	vmov.f32	s15, s0
 800158a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800158e:	ee17 3a90 	vmov	r3, s15
 8001592:	b29a      	uxth	r2, r3
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	83da      	strh	r2, [r3, #30]
    pConfig->u16MaxSpeed = ConfigLogManagerReadUInt16FromSD(&fp, "u16MaxSpeed", 4096);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a4:	4940      	ldr	r1, [pc, #256]	; (80016a8 <ConfigLogManagerReadConfigFileSD+0x25c>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fed0 	bl	800134c <ConfigLogManagerReadUInt16FromSD>
 80015ac:	eef0 7a40 	vmov.f32	s15, s0
 80015b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b4:	ee17 3a90 	vmov	r3, s15
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	841a      	strh	r2, [r3, #32]
    pConfig->u16HeartbeatTransmitInterval = ConfigLogManagerReadUInt16FromSD(&fp, "u16HeartbeatTransmitInterval", 1000);
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ca:	4938      	ldr	r1, [pc, #224]	; (80016ac <ConfigLogManagerReadConfigFileSD+0x260>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff febd 	bl	800134c <ConfigLogManagerReadUInt16FromSD>
 80015d2:	eef0 7a40 	vmov.f32	s15, s0
 80015d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015da:	ee17 3a90 	vmov	r3, s15
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	845a      	strh	r2, [r3, #34]	; 0x22
    pConfig->u16SensorTransmitInterval = ConfigLogManagerReadUInt16FromSD(&fp, "u16SensorTransmitInterval", 250);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	22fa      	movs	r2, #250	; 0xfa
 80015ee:	4930      	ldr	r1, [pc, #192]	; (80016b0 <ConfigLogManagerReadConfigFileSD+0x264>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff feab 	bl	800134c <ConfigLogManagerReadUInt16FromSD>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
 80015fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fe:	ee17 3a90 	vmov	r3, s15
 8001602:	b29a      	uxth	r2, r3
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	849a      	strh	r2, [r3, #36]	; 0x24
    pConfig->u8VID = ConfigLogManagerReadUInt16FromSD(&fp, "u8VID", 36);
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	2224      	movs	r2, #36	; 0x24
 8001612:	4928      	ldr	r1, [pc, #160]	; (80016b4 <ConfigLogManagerReadConfigFileSD+0x268>)
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe99 	bl	800134c <ConfigLogManagerReadUInt16FromSD>
 800161a:	eef0 7a40 	vmov.f32	s15, s0
 800161e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001622:	edc7 7a01 	vstr	s15, [r7, #4]
 8001626:	793b      	ldrb	r3, [r7, #4]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    pConfig->bSound = ConfigLogManagerReadBoolFromSD(&fp, "bSound", 0);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	2200      	movs	r2, #0
 800163a:	491f      	ldr	r1, [pc, #124]	; (80016b8 <ConfigLogManagerReadConfigFileSD+0x26c>)
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fec7 	bl	80013d0 <ConfigLogManagerReadBoolFromSD>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    pConfig->bExternalTelemetry = ConfigLogManagerReadBoolFromSD(&fp, "bExternalTelemetry", 0);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	2200      	movs	r2, #0
 8001656:	4919      	ldr	r1, [pc, #100]	; (80016bc <ConfigLogManagerReadConfigFileSD+0x270>)
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff feb9 	bl	80013d0 <ConfigLogManagerReadBoolFromSD>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    f_close(&fp);
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4618      	mov	r0, r3
 8001672:	f00e fe4a 	bl	801030a <f_close>
}
 8001676:	bf00      	nop
 8001678:	f507 7710 	add.w	r7, r7, #576	; 0x240
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	08014e20 	.word	0x08014e20
 8001684:	08014e34 	.word	0x08014e34
 8001688:	08014e44 	.word	0x08014e44
 800168c:	08014e5c 	.word	0x08014e5c
 8001690:	08014e74 	.word	0x08014e74
 8001694:	00000000 	.word	0x00000000
 8001698:	08014e84 	.word	0x08014e84
 800169c:	08014e90 	.word	0x08014e90
 80016a0:	08014e9c 	.word	0x08014e9c
 80016a4:	08014eb4 	.word	0x08014eb4
 80016a8:	08014ecc 	.word	0x08014ecc
 80016ac:	08014ed8 	.word	0x08014ed8
 80016b0:	08014ef8 	.word	0x08014ef8
 80016b4:	08014f14 	.word	0x08014f14
 80016b8:	08014f1c 	.word	0x08014f1c
 80016bc:	08014f24 	.word	0x08014f24

080016c0 <GPS_CallBack>:
	GPS.rxIndex=0;
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
}
//##################################################################################################################
void	GPS_CallBack(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 80016c4:	f002 fbf8 	bl	8003eb8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <GPS_CallBack+0x4c>)
 80016cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <GPS_CallBack+0x4c>)
 80016d2:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80016d6:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80016da:	d210      	bcs.n	80016fe <GPS_CallBack+0x3e>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <GPS_CallBack+0x4c>)
 80016de:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <GPS_CallBack+0x4c>)
 80016e6:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <GPS_CallBack+0x4c>)
 80016ec:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <GPS_CallBack+0x4c>)
 80016f0:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <GPS_CallBack+0x4c>)
 80016fa:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 80016fe:	2201      	movs	r2, #1
 8001700:	4903      	ldr	r1, [pc, #12]	; (8001710 <GPS_CallBack+0x50>)
 8001702:	4804      	ldr	r0, [pc, #16]	; (8001714 <GPS_CallBack+0x54>)
 8001704:	f008 fc1e 	bl	8009f44 <HAL_UART_Receive_IT>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200009e0 	.word	0x200009e0
 8001710:	20000be2 	.word	0x20000be2
 8001714:	2000119c 	.word	0x2000119c

08001718 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001730:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <MX_ADC1_Init+0xc4>)
 8001732:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <MX_ADC1_Init+0xc0>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <MX_ADC1_Init+0xc0>)
 800174e:	2204      	movs	r2, #4
 8001750:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001754:	2200      	movs	r2, #0
 8001756:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_ADC1_Init+0xc0>)
 800175a:	2200      	movs	r2, #0
 800175c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800175e:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001760:	2201      	movs	r2, #1
 8001762:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001764:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_ADC1_Init+0xc0>)
 800176e:	2201      	movs	r2, #1
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_ADC1_Init+0xc0>)
 800177a:	2200      	movs	r2, #0
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001788:	2200      	movs	r2, #0
 800178a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_ADC1_Init+0xc0>)
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001794:	4810      	ldr	r0, [pc, #64]	; (80017d8 <MX_ADC1_Init+0xc0>)
 8001796:	f002 fd3d 	bl	8004214 <HAL_ADC_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80017a0:	f001 fe30 	bl	8003404 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_ADC1_Init+0xc8>)
 80017a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017a8:	2306      	movs	r3, #6
 80017aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017b0:	237f      	movs	r3, #127	; 0x7f
 80017b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017b4:	2304      	movs	r3, #4
 80017b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_ADC1_Init+0xc0>)
 80017c2:	f002 fe6d 	bl	80044a0 <HAL_ADC_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80017cc:	f001 fe1a 	bl	8003404 <Error_Handler>
  }

}
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000c30 	.word	0x20000c30
 80017dc:	50040000 	.word	0x50040000
 80017e0:	14f00020 	.word	0x14f00020

080017e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_ADC_MspInit+0x74>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d124      	bne.n	8001850 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_ADC_MspInit+0x78>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <HAL_ADC_MspInit+0x78>)
 800180c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_ADC_MspInit+0x78>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_ADC_MspInit+0x78>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_ADC_MspInit+0x78>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_ADC_MspInit+0x78>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001836:	2301      	movs	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800183a:	230b      	movs	r3, #11
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184c:	f003 fd70 	bl	8005330 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	; 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	50040000 	.word	0x50040000
 800185c:	40021000 	.word	0x40021000

08001860 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2203      	movs	r2, #3
 800186c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2203      	movs	r2, #3
 8001878:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2203      	movs	r2, #3
 800187e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2203      	movs	r2, #3
 8001884:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2203      	movs	r2, #3
 800188a:	715a      	strb	r2, [r3, #5]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af04      	add	r7, sp, #16
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	460b      	mov	r3, r1
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80018b2:	7afb      	ldrb	r3, [r7, #11]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	8af9      	ldrh	r1, [r7, #22]
 80018b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	2302      	movs	r3, #2
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	f004 fa59 	bl	8005d80 <HAL_I2C_Mem_Read>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10b      	bne.n	80018ec <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80018d4:	7d7b      	ldrb	r3, [r7, #21]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	7d3b      	ldrb	r3, [r7, #20]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	801a      	strh	r2, [r3, #0]
		return true;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <read_register16+0x56>
	} else
		return false;
 80018ec:	2300      	movs	r3, #0

}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80018f6:	b590      	push	{r4, r7, lr}
 80018f8:	b08b      	sub	sp, #44	; 0x2c
 80018fa:	af04      	add	r7, sp, #16
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	461a      	mov	r2, r3
 8001902:	460b      	mov	r3, r1
 8001904:	72fb      	strb	r3, [r7, #11]
 8001906:	4613      	mov	r3, r2
 8001908:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	b29c      	uxth	r4, r3
 800191a:	7abb      	ldrb	r3, [r7, #10]
 800191c:	b29b      	uxth	r3, r3
 800191e:	8af9      	ldrh	r1, [r7, #22]
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	9202      	str	r2, [sp, #8]
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	4622      	mov	r2, r4
 8001930:	f004 fa26 	bl	8005d80 <HAL_I2C_Mem_Read>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <read_data+0x48>
		return 0;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <read_data+0x4a>
	else
		return 1;
 800193e:	2301      	movs	r3, #1

}
 8001940:	4618      	mov	r0, r3
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd90      	pop	{r4, r7, pc}

08001948 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	461a      	mov	r2, r3
 8001954:	2188      	movs	r1, #136	; 0x88
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ff9e 	bl	8001898 <read_register16>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d06f      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3302      	adds	r3, #2
 8001966:	461a      	mov	r2, r3
 8001968:	218a      	movs	r1, #138	; 0x8a
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff94 	bl	8001898 <read_register16>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d065      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3304      	adds	r3, #4
 800197a:	461a      	mov	r2, r3
 800197c:	218c      	movs	r1, #140	; 0x8c
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ff8a 	bl	8001898 <read_register16>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d05b      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3306      	adds	r3, #6
 800198e:	461a      	mov	r2, r3
 8001990:	218e      	movs	r1, #142	; 0x8e
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ff80 	bl	8001898 <read_register16>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d051      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3308      	adds	r3, #8
 80019a2:	461a      	mov	r2, r3
 80019a4:	2190      	movs	r1, #144	; 0x90
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff76 	bl	8001898 <read_register16>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d047      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	330a      	adds	r3, #10
 80019b6:	461a      	mov	r2, r3
 80019b8:	2192      	movs	r1, #146	; 0x92
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff6c 	bl	8001898 <read_register16>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d03d      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	330c      	adds	r3, #12
 80019ca:	461a      	mov	r2, r3
 80019cc:	2194      	movs	r1, #148	; 0x94
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ff62 	bl	8001898 <read_register16>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d033      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	330e      	adds	r3, #14
 80019de:	461a      	mov	r2, r3
 80019e0:	2196      	movs	r1, #150	; 0x96
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff58 	bl	8001898 <read_register16>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d029      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3310      	adds	r3, #16
 80019f2:	461a      	mov	r2, r3
 80019f4:	2198      	movs	r1, #152	; 0x98
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ff4e 	bl	8001898 <read_register16>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d01f      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3312      	adds	r3, #18
 8001a06:	461a      	mov	r2, r3
 8001a08:	219a      	movs	r1, #154	; 0x9a
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff44 	bl	8001898 <read_register16>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d015      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3314      	adds	r3, #20
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	219c      	movs	r1, #156	; 0x9c
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ff3a 	bl	8001898 <read_register16>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001a2e:	461a      	mov	r2, r3
 8001a30:	219e      	movs	r1, #158	; 0x9e
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff30 	bl	8001898 <read_register16>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <read_calibration_data+0xfa>

		return true;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <read_calibration_data+0xfc>
	}

	return false;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f103 0218 	add.w	r2, r3, #24
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	21a1      	movs	r1, #161	; 0xa1
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff49 	bl	80018f6 <read_data>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d14b      	bne.n	8001b02 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	331a      	adds	r3, #26
 8001a6e:	461a      	mov	r2, r3
 8001a70:	21e1      	movs	r1, #225	; 0xe1
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff10 	bl	8001898 <read_register16>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d041      	beq.n	8001b02 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f103 021c 	add.w	r2, r3, #28
 8001a84:	2301      	movs	r3, #1
 8001a86:	21e3      	movs	r1, #227	; 0xe3
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff34 	bl	80018f6 <read_data>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d136      	bne.n	8001b02 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001a94:	f107 030e 	add.w	r3, r7, #14
 8001a98:	461a      	mov	r2, r3
 8001a9a:	21e4      	movs	r1, #228	; 0xe4
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fefb 	bl	8001898 <read_register16>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02c      	beq.n	8001b02 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	461a      	mov	r2, r3
 8001aae:	21e5      	movs	r1, #229	; 0xe5
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fef1 	bl	8001898 <read_register16>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d022      	beq.n	8001b02 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	21e7      	movs	r1, #231	; 0xe7
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff15 	bl	80018f6 <read_data>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d117      	bne.n	8001b02 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001ad2:	89fb      	ldrh	r3, [r7, #14]
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	89fb      	ldrh	r3, [r7, #14]
 8001ae0:	121b      	asrs	r3, r3, #8
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001af2:	89bb      	ldrh	r3, [r7, #12]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	841a      	strh	r2, [r3, #32]

		return true;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af04      	add	r7, sp, #16
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	89f9      	ldrh	r1, [r7, #14]
 8001b2e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	2301      	movs	r3, #1
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	1cbb      	adds	r3, r7, #2
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f004 f80b 	bl	8005b58 <HAL_I2C_Mem_Write>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <write_register8+0x40>
		return false;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e000      	b.n	8001b4e <write_register8+0x42>
	else
		return true;
 8001b4c:	2301      	movs	r3, #1
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b64:	2b76      	cmp	r3, #118	; 0x76
 8001b66:	d005      	beq.n	8001b74 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b6c:	2b77      	cmp	r3, #119	; 0x77
 8001b6e:	d001      	beq.n	8001b74 <bmp280_init+0x1e>

		return false;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e099      	b.n	8001ca8 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	21d0      	movs	r1, #208	; 0xd0
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff feb9 	bl	80018f6 <read_data>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <bmp280_init+0x38>
		return false;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e08c      	b.n	8001ca8 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b94:	2b58      	cmp	r3, #88	; 0x58
 8001b96:	d006      	beq.n	8001ba6 <bmp280_init+0x50>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b9e:	2b60      	cmp	r3, #96	; 0x60
 8001ba0:	d001      	beq.n	8001ba6 <bmp280_init+0x50>

		return false;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e080      	b.n	8001ca8 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001ba6:	22b6      	movs	r2, #182	; 0xb6
 8001ba8:	21e0      	movs	r1, #224	; 0xe0
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffae 	bl	8001b0c <write_register8>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <bmp280_init+0x64>
		return false;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e076      	b.n	8001ca8 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001bba:	f107 020c 	add.w	r2, r7, #12
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	21f3      	movs	r1, #243	; 0xf3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fe97 	bl	80018f6 <read_data>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f5      	bne.n	8001bba <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001bce:	7b3b      	ldrb	r3, [r7, #12]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f0      	bne.n	8001bba <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff feb5 	bl	8001948 <read_calibration_data>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d100      	bne.n	8001bec <bmp280_init+0x96>
 8001bea:	e001      	b.n	8001bf0 <bmp280_init+0x9a>
		return false;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e05b      	b.n	8001ca8 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001bf6:	2b60      	cmp	r3, #96	; 0x60
 8001bf8:	d10a      	bne.n	8001c10 <bmp280_init+0xba>
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff26 	bl	8001a4c <read_hum_calibration_data>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f083 0301 	eor.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <bmp280_init+0xba>
		return false;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e04b      	b.n	8001ca8 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	795b      	ldrb	r3, [r3, #5]
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	b25a      	sxtb	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	b25b      	sxtb	r3, r3
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b25b      	sxtb	r3, r3
 8001c24:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	21f5      	movs	r1, #245	; 0xf5
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff6d 	bl	8001b0c <write_register8>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <bmp280_init+0xe6>
		return false;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e035      	b.n	8001ca8 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d102      	bne.n	8001c4a <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	78db      	ldrb	r3, [r3, #3]
 8001c4e:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001c50:	b25a      	sxtb	r2, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	789b      	ldrb	r3, [r3, #2]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b25a      	sxtb	r2, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001c68:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c70:	2b60      	cmp	r3, #96	; 0x60
 8001c72:	d10d      	bne.n	8001c90 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001c7a:	7b7b      	ldrb	r3, [r7, #13]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	21f2      	movs	r1, #242	; 0xf2
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff43 	bl	8001b0c <write_register8>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <bmp280_init+0x13a>
			return false;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e00b      	b.n	8001ca8 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001c90:	7bbb      	ldrb	r3, [r7, #14]
 8001c92:	461a      	mov	r2, r3
 8001c94:	21f4      	movs	r1, #244	; 0xf4
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ff38 	bl	8001b0c <write_register8>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <bmp280_init+0x150>
		return false;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <bmp280_init+0x152>
	}

	return true;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	10da      	asrs	r2, r3, #3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001cd2:	12db      	asrs	r3, r3, #11
 8001cd4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	111b      	asrs	r3, r3, #4
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	8812      	ldrh	r2, [r2, #0]
 8001cde:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	1112      	asrs	r2, r2, #4
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	8809      	ldrh	r1, [r1, #0]
 8001ce8:	1a52      	subs	r2, r2, r1
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001cfa:	139b      	asrs	r3, r3, #14
 8001cfc:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	441a      	add	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	3380      	adds	r3, #128	; 0x80
 8001d14:	121b      	asrs	r3, r3, #8
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001d22:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4619      	mov	r1, r3
 8001d34:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001d38:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001d3c:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
 8001d40:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	6a3a      	ldr	r2, [r7, #32]
 8001d48:	fb02 f203 	mul.w	r2, r2, r3
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	6a39      	ldr	r1, [r7, #32]
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	441a      	add	r2, r3
 8001d56:	6a39      	ldr	r1, [r7, #32]
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	fba1 3403 	umull	r3, r4, r1, r3
 8001d5e:	4422      	add	r2, r4
 8001d60:	4614      	mov	r4, r2
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001d68:	b211      	sxth	r1, r2
 8001d6a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001d6e:	fb01 f504 	mul.w	r5, r1, r4
 8001d72:	fb03 f002 	mul.w	r0, r3, r2
 8001d76:	4428      	add	r0, r5
 8001d78:	fba3 3401 	umull	r3, r4, r3, r1
 8001d7c:	1902      	adds	r2, r0, r4
 8001d7e:	4614      	mov	r4, r2
 8001d80:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001d84:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001d94:	6a3a      	ldr	r2, [r7, #32]
 8001d96:	fb04 f102 	mul.w	r1, r4, r2
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9c:	fb03 f202 	mul.w	r2, r3, r2
 8001da0:	1888      	adds	r0, r1, r2
 8001da2:	6a3a      	ldr	r2, [r7, #32]
 8001da4:	fba2 1203 	umull	r1, r2, r2, r3
 8001da8:	1883      	adds	r3, r0, r2
 8001daa:	461a      	mov	r2, r3
 8001dac:	f04f 0500 	mov.w	r5, #0
 8001db0:	f04f 0600 	mov.w	r6, #0
 8001db4:	0456      	lsls	r6, r2, #17
 8001db6:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001dba:	044d      	lsls	r5, r1, #17
 8001dbc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001dc0:	186b      	adds	r3, r5, r1
 8001dc2:	eb46 0402 	adc.w	r4, r6, r2
 8001dc6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001dd0:	b219      	sxth	r1, r3
 8001dd2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001dd6:	f04f 0500 	mov.w	r5, #0
 8001dda:	f04f 0600 	mov.w	r6, #0
 8001dde:	00ce      	lsls	r6, r1, #3
 8001de0:	2500      	movs	r5, #0
 8001de2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001de6:	186b      	adds	r3, r5, r1
 8001de8:	eb46 0402 	adc.w	r4, r6, r2
 8001dec:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	6a3a      	ldr	r2, [r7, #32]
 8001df4:	fb02 f203 	mul.w	r2, r2, r3
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	6a39      	ldr	r1, [r7, #32]
 8001dfc:	fb01 f303 	mul.w	r3, r1, r3
 8001e00:	441a      	add	r2, r3
 8001e02:	6a39      	ldr	r1, [r7, #32]
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	fba1 3403 	umull	r3, r4, r1, r3
 8001e0a:	4422      	add	r2, r4
 8001e0c:	4614      	mov	r4, r2
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001e14:	b211      	sxth	r1, r2
 8001e16:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001e1a:	fb01 f504 	mul.w	r5, r1, r4
 8001e1e:	fb03 f002 	mul.w	r0, r3, r2
 8001e22:	4428      	add	r0, r5
 8001e24:	fba3 3401 	umull	r3, r4, r3, r1
 8001e28:	1902      	adds	r2, r0, r4
 8001e2a:	4614      	mov	r4, r2
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	0a19      	lsrs	r1, r3, #8
 8001e36:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001e3a:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001e48:	6a38      	ldr	r0, [r7, #32]
 8001e4a:	fb04 f500 	mul.w	r5, r4, r0
 8001e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e50:	fb03 f000 	mul.w	r0, r3, r0
 8001e54:	4428      	add	r0, r5
 8001e56:	6a3d      	ldr	r5, [r7, #32]
 8001e58:	fba5 5603 	umull	r5, r6, r5, r3
 8001e5c:	1983      	adds	r3, r0, r6
 8001e5e:	461e      	mov	r6, r3
 8001e60:	f04f 0b00 	mov.w	fp, #0
 8001e64:	f04f 0c00 	mov.w	ip, #0
 8001e68:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001e6c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001e70:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001e74:	eb1b 0301 	adds.w	r3, fp, r1
 8001e78:	eb4c 0402 	adc.w	r4, ip, r2
 8001e7c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001e80:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001e84:	1c19      	adds	r1, r3, #0
 8001e86:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	88db      	ldrh	r3, [r3, #6]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f04f 0400 	mov.w	r4, #0
 8001e94:	fb03 f502 	mul.w	r5, r3, r2
 8001e98:	fb01 f004 	mul.w	r0, r1, r4
 8001e9c:	4428      	add	r0, r5
 8001e9e:	fba1 3403 	umull	r3, r4, r1, r3
 8001ea2:	1902      	adds	r2, r0, r4
 8001ea4:	4614      	mov	r4, r2
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	1061      	asrs	r1, r4, #1
 8001eb0:	17e2      	asrs	r2, r4, #31
 8001eb2:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8001eb6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001eba:	4323      	orrs	r3, r4
 8001ebc:	d101      	bne.n	8001ec2 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e0d4      	b.n	800206c <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001ec8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001ecc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	ea4f 0963 	mov.w	r9, r3, asr #1
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001edc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ee0:	4645      	mov	r5, r8
 8001ee2:	464e      	mov	r6, r9
 8001ee4:	1aed      	subs	r5, r5, r3
 8001ee6:	eb66 0604 	sbc.w	r6, r6, r4
 8001eea:	46a8      	mov	r8, r5
 8001eec:	46b1      	mov	r9, r6
 8001eee:	eb18 0308 	adds.w	r3, r8, r8
 8001ef2:	eb49 0409 	adc.w	r4, r9, r9
 8001ef6:	4698      	mov	r8, r3
 8001ef8:	46a1      	mov	r9, r4
 8001efa:	eb18 0805 	adds.w	r8, r8, r5
 8001efe:	eb49 0906 	adc.w	r9, r9, r6
 8001f02:	f04f 0100 	mov.w	r1, #0
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001f0e:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001f12:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001f16:	eb18 0801 	adds.w	r8, r8, r1
 8001f1a:	eb49 0902 	adc.w	r9, r9, r2
 8001f1e:	f04f 0100 	mov.w	r1, #0
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001f2a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001f2e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001f32:	4688      	mov	r8, r1
 8001f34:	4691      	mov	r9, r2
 8001f36:	eb18 0805 	adds.w	r8, r8, r5
 8001f3a:	eb49 0906 	adc.w	r9, r9, r6
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001f4a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001f4e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001f52:	4688      	mov	r8, r1
 8001f54:	4691      	mov	r9, r2
 8001f56:	eb18 0005 	adds.w	r0, r8, r5
 8001f5a:	eb49 0106 	adc.w	r1, r9, r6
 8001f5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f62:	f7fe fea1 	bl	8000ca8 <__aeabi_ldivmod>
 8001f66:	4603      	mov	r3, r0
 8001f68:	460c      	mov	r4, r1
 8001f6a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f74:	b219      	sxth	r1, r3
 8001f76:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001f7a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	f04f 0400 	mov.w	r4, #0
 8001f86:	0b6b      	lsrs	r3, r5, #13
 8001f88:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001f8c:	1374      	asrs	r4, r6, #13
 8001f8e:	fb03 f502 	mul.w	r5, r3, r2
 8001f92:	fb01 f004 	mul.w	r0, r1, r4
 8001f96:	4428      	add	r0, r5
 8001f98:	fba1 1203 	umull	r1, r2, r1, r3
 8001f9c:	1883      	adds	r3, r0, r2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	f04f 0400 	mov.w	r4, #0
 8001fac:	0b6b      	lsrs	r3, r5, #13
 8001fae:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001fb2:	1374      	asrs	r4, r6, #13
 8001fb4:	fb03 f502 	mul.w	r5, r3, r2
 8001fb8:	fb01 f004 	mul.w	r0, r1, r4
 8001fbc:	4428      	add	r0, r5
 8001fbe:	fba1 1203 	umull	r1, r2, r1, r3
 8001fc2:	1883      	adds	r3, r0, r2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	f04f 0400 	mov.w	r4, #0
 8001fce:	0e4b      	lsrs	r3, r1, #25
 8001fd0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001fd4:	1654      	asrs	r4, r2, #25
 8001fd6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	fb04 f102 	mul.w	r1, r4, r2
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	fb03 f202 	mul.w	r2, r3, r2
 8001ff2:	1888      	adds	r0, r1, r2
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	fba2 1203 	umull	r1, r2, r2, r3
 8001ffa:	1883      	adds	r3, r0, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	f04f 0400 	mov.w	r4, #0
 8002006:	0ccb      	lsrs	r3, r1, #19
 8002008:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800200c:	14d4      	asrs	r4, r2, #19
 800200e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002012:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002016:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800201a:	eb11 0803 	adds.w	r8, r1, r3
 800201e:	eb42 0904 	adc.w	r9, r2, r4
 8002022:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002026:	eb13 0508 	adds.w	r5, r3, r8
 800202a:	eb44 0609 	adc.w	r6, r4, r9
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	0a29      	lsrs	r1, r5, #8
 8002038:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800203c:	1232      	asrs	r2, r6, #8
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002044:	b21d      	sxth	r5, r3
 8002046:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800204a:	f04f 0800 	mov.w	r8, #0
 800204e:	f04f 0900 	mov.w	r9, #0
 8002052:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002056:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800205a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800205e:	eb18 0301 	adds.w	r3, r8, r1
 8002062:	eb49 0402 	adc.w	r4, r9, r2
 8002066:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 800206a:	693b      	ldr	r3, [r7, #16]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08002076 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002076:	b480      	push	{r7}
 8002078:	b087      	sub	sp, #28
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002088:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	039a      	lsls	r2, r3, #14
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002094:	051b      	lsls	r3, r3, #20
 8002096:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800209e:	4619      	mov	r1, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fb03 f301 	mul.w	r3, r3, r1
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80020ac:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80020b4:	4611      	mov	r1, r2
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	fb02 f201 	mul.w	r2, r2, r1
 80020bc:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	7f09      	ldrb	r1, [r1, #28]
 80020c2:	4608      	mov	r0, r1
 80020c4:	6979      	ldr	r1, [r7, #20]
 80020c6:	fb01 f100 	mul.w	r1, r1, r0
 80020ca:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80020cc:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80020d0:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80020d4:	1292      	asrs	r2, r2, #10
 80020d6:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80020e0:	fb01 f202 	mul.w	r2, r1, r2
 80020e4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80020e8:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	13db      	asrs	r3, r3, #15
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	13d2      	asrs	r2, r2, #15
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	7e12      	ldrb	r2, [r2, #24]
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002114:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800211c:	bfa8      	it	ge
 800211e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002122:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	131b      	asrs	r3, r3, #12
}
 8002128:	4618      	mov	r0, r3
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	; 0x30
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002148:	2b60      	cmp	r3, #96	; 0x60
 800214a:	d007      	beq.n	800215c <bmp280_read_fixed+0x28>
		if (humidity)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002158:	2300      	movs	r3, #0
 800215a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <bmp280_read_fixed+0x32>
 8002162:	2308      	movs	r3, #8
 8002164:	e000      	b.n	8002168 <bmp280_read_fixed+0x34>
 8002166:	2306      	movs	r3, #6
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f107 0218 	add.w	r2, r7, #24
 8002172:	21f7      	movs	r1, #247	; 0xf7
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7ff fbbe 	bl	80018f6 <read_data>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <bmp280_read_fixed+0x50>
		return false;
 8002180:	2300      	movs	r3, #0
 8002182:	e038      	b.n	80021f6 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002184:	7e3b      	ldrb	r3, [r7, #24]
 8002186:	031a      	lsls	r2, r3, #12
 8002188:	7e7b      	ldrb	r3, [r7, #25]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4313      	orrs	r3, r2
 800218e:	7eba      	ldrb	r2, [r7, #26]
 8002190:	0912      	lsrs	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	4313      	orrs	r3, r2
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002198:	7efb      	ldrb	r3, [r7, #27]
 800219a:	031a      	lsls	r2, r3, #12
 800219c:	7f3b      	ldrb	r3, [r7, #28]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4313      	orrs	r3, r2
 80021a2:	7f7a      	ldrb	r2, [r7, #29]
 80021a4:	0912      	lsrs	r2, r2, #4
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	4313      	orrs	r3, r2
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	461a      	mov	r2, r3
 80021b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff fd7b 	bl	8001cb0 <compensate_temperature>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	461a      	mov	r2, r3
 80021c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7ff fdab 	bl	8001d22 <compensate_pressure>
 80021cc:	4602      	mov	r2, r0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80021d8:	7fbb      	ldrb	r3, [r7, #30]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	7ffa      	ldrb	r2, [r7, #31]
 80021de:	4313      	orrs	r3, r2
 80021e0:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	461a      	mov	r2, r3
 80021e6:	6a39      	ldr	r1, [r7, #32]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7ff ff44 	bl	8002076 <compensate_humidity>
 80021ee:	4602      	mov	r2, r0
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	601a      	str	r2, [r3, #0]
	}

	return true;
 80021f4:	2301      	movs	r3, #1
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3730      	adds	r7, #48	; 0x30
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <bmp280_read_float+0x1a>
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	e000      	b.n	800221c <bmp280_read_float+0x1c>
 800221a:	2300      	movs	r3, #0
 800221c:	f107 0218 	add.w	r2, r7, #24
 8002220:	f107 011c 	add.w	r1, r7, #28
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f7ff ff85 	bl	8002134 <bmp280_read_fixed>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d028      	beq.n	8002282 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800223a:	eddf 6a14 	vldr	s13, [pc, #80]	; 800228c <bmp280_read_float+0x8c>
 800223e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002252:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002290 <bmp280_read_float+0x90>
 8002256:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002270:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002294 <bmp280_read_float+0x94>
 8002274:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <bmp280_read_float+0x84>
	}

	return false;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	42c80000 	.word	0x42c80000
 8002290:	43800000 	.word	0x43800000
 8002294:	44800000 	.word	0x44800000

08002298 <bno055_setPage>:
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4619      	mov	r1, r3
 80022a6:	2007      	movs	r0, #7
 80022a8:	f000 fa68 	bl	800277c <bno055_writeData>
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	4619      	mov	r1, r3
 80022c2:	203d      	movs	r0, #61	; 0x3d
 80022c4:	f000 fa5a 	bl	800277c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80022ce:	2013      	movs	r0, #19
 80022d0:	f000 fa48 	bl	8002764 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80022d4:	e002      	b.n	80022dc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80022d6:	2007      	movs	r0, #7
 80022d8:	f000 fa44 	bl	8002764 <bno055_delay>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff ffe3 	bl	80022b4 <bno055_setOperationMode>
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80022f2:	b580      	push	{r7, lr}
 80022f4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80022f6:	200c      	movs	r0, #12
 80022f8:	f7ff ffdc 	bl	80022b4 <bno055_setOperationMode>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <bno055_setExternalCrystalUse>:

void bno055_setExternalCrystalUse(bool state) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  bno055_setPage(0);
 800230a:	2000      	movs	r0, #0
 800230c:	f7ff ffc4 	bl	8002298 <bno055_setPage>
  uint8_t tmp = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
  bno055_readData(BNO055_SYS_TRIGGER, &tmp, 1);
 8002314:	f107 030f 	add.w	r3, r7, #15
 8002318:	2201      	movs	r2, #1
 800231a:	4619      	mov	r1, r3
 800231c:	203f      	movs	r0, #63	; 0x3f
 800231e:	f000 fa51 	bl	80027c4 <bno055_readData>
  tmp |= (state == true) ? 0x80 : 0x0;
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <bno055_setExternalCrystalUse+0x2e>
 8002328:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800232c:	e000      	b.n	8002330 <bno055_setExternalCrystalUse+0x30>
 800232e:	2200      	movs	r2, #0
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	b25b      	sxtb	r3, r3
 8002334:	4313      	orrs	r3, r2
 8002336:	b25b      	sxtb	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	73fb      	strb	r3, [r7, #15]
  bno055_writeData(BNO055_SYS_TRIGGER, tmp);
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	4619      	mov	r1, r3
 8002340:	203f      	movs	r0, #63	; 0x3f
 8002342:	f000 fa1b 	bl	800277c <bno055_writeData>
  bno055_delay(700);
 8002346:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800234a:	f000 fa0b 	bl	8002764 <bno055_delay>
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <bno055_reset>:

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800235a:	2120      	movs	r1, #32
 800235c:	203f      	movs	r0, #63	; 0x3f
 800235e:	f000 fa0d 	bl	800277c <bno055_writeData>
  bno055_delay(700);
 8002362:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002366:	f000 f9fd 	bl	8002764 <bno055_delay>
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
  bno055_reset();
 8002376:	f7ff ffee 	bl	8002356 <bno055_reset>

  uint8_t id = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	2201      	movs	r2, #1
 8002382:	4619      	mov	r1, r3
 8002384:	2000      	movs	r0, #0
 8002386:	f000 fa1d 	bl	80027c4 <bno055_readData>
  if (id != BNO055_ID) {
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2ba0      	cmp	r3, #160	; 0xa0
 800238e:	d004      	beq.n	800239a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	4619      	mov	r1, r3
 8002394:	4809      	ldr	r0, [pc, #36]	; (80023bc <bno055_setup+0x4c>)
 8002396:	f00f fa01 	bl	801179c <iprintf>
  }
  bno055_setPage(0);
 800239a:	2000      	movs	r0, #0
 800239c:	f7ff ff7c 	bl	8002298 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80023a0:	2100      	movs	r1, #0
 80023a2:	203f      	movs	r0, #63	; 0x3f
 80023a4:	f000 f9ea 	bl	800277c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80023a8:	f7ff ff9c 	bl	80022e4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80023ac:	200a      	movs	r0, #10
 80023ae:	f000 f9d9 	bl	8002764 <bno055_delay>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	08015008 	.word	0x08015008

080023c0 <bno055_getCalibrationState>:
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

bno055_calibration_state_t bno055_getCalibrationState() {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff ff66 	bl	8002298 <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	2201      	movs	r2, #1
 80023d8:	4619      	mov	r1, r3
 80023da:	2035      	movs	r0, #53	; 0x35
 80023dc:	f000 f9f2 	bl	80027c4 <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	72bb      	strb	r3, [r7, #10]
  return cal;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	2300      	movs	r3, #0
 8002414:	7b3a      	ldrb	r2, [r7, #12]
 8002416:	f362 0307 	bfi	r3, r2, #0, #8
 800241a:	7b7a      	ldrb	r2, [r7, #13]
 800241c:	f362 230f 	bfi	r3, r2, #8, #8
 8002420:	7bba      	ldrb	r2, [r7, #14]
 8002422:	f362 4317 	bfi	r3, r2, #16, #8
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	f362 631f 	bfi	r3, r2, #24, #8
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8002434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002438:	b09f      	sub	sp, #124	; 0x7c
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff ff28 	bl	8002298 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8002448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800244c:	2b20      	cmp	r3, #32
 800244e:	d108      	bne.n	8002462 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8002450:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002458:	2208      	movs	r2, #8
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f9b2 	bl	80027c4 <bno055_readData>
 8002460:	e007      	b.n	8002472 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8002462:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800246a:	2206      	movs	r2, #6
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f9a9 	bl	80027c4 <bno055_readData>

  double scale = 1;
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	4c8b      	ldr	r4, [pc, #556]	; (80026a4 <bno055_getVector+0x270>)
 8002478:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800247c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002480:	2b0e      	cmp	r3, #14
 8002482:	d109      	bne.n	8002498 <bno055_getVector+0x64>
    scale = magScale;
 8002484:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <bno055_getVector+0x274>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f84b 	bl	8000524 <__aeabi_ui2d>
 800248e:	4603      	mov	r3, r0
 8002490:	460c      	mov	r4, r1
 8002492:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8002496:	e03e      	b.n	8002516 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8002498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800249c:	2b08      	cmp	r3, #8
 800249e:	d007      	beq.n	80024b0 <bno055_getVector+0x7c>
 80024a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a4:	2b28      	cmp	r3, #40	; 0x28
 80024a6:	d003      	beq.n	80024b0 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80024a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ac:	2b2e      	cmp	r3, #46	; 0x2e
 80024ae:	d109      	bne.n	80024c4 <bno055_getVector+0x90>
    scale = accelScale;
 80024b0:	4b7e      	ldr	r3, [pc, #504]	; (80026ac <bno055_getVector+0x278>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f835 	bl	8000524 <__aeabi_ui2d>
 80024ba:	4603      	mov	r3, r0
 80024bc:	460c      	mov	r4, r1
 80024be:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 80024c2:	e028      	b.n	8002516 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80024c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024c8:	2b14      	cmp	r3, #20
 80024ca:	d109      	bne.n	80024e0 <bno055_getVector+0xac>
    scale = angularRateScale;
 80024cc:	4b78      	ldr	r3, [pc, #480]	; (80026b0 <bno055_getVector+0x27c>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f827 	bl	8000524 <__aeabi_ui2d>
 80024d6:	4603      	mov	r3, r0
 80024d8:	460c      	mov	r4, r1
 80024da:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 80024de:	e01a      	b.n	8002516 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80024e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e4:	2b1a      	cmp	r3, #26
 80024e6:	d109      	bne.n	80024fc <bno055_getVector+0xc8>
    scale = eulerScale;
 80024e8:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <bno055_getVector+0x280>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe f819 	bl	8000524 <__aeabi_ui2d>
 80024f2:	4603      	mov	r3, r0
 80024f4:	460c      	mov	r4, r1
 80024f6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 80024fa:	e00c      	b.n	8002516 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80024fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002500:	2b20      	cmp	r3, #32
 8002502:	d108      	bne.n	8002516 <bno055_getVector+0xe2>
    scale = quaScale;
 8002504:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <bno055_getVector+0x284>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f80b 	bl	8000524 <__aeabi_ui2d>
 800250e:	4603      	mov	r3, r0
 8002510:	460c      	mov	r4, r1
 8002512:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8002516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251a:	2220      	movs	r2, #32
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f00e ff51 	bl	80113c6 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002528:	2b20      	cmp	r3, #32
 800252a:	d150      	bne.n	80025ce <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800252c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	b21a      	sxth	r2, r3
 8002534:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002538:	b21b      	sxth	r3, r3
 800253a:	4313      	orrs	r3, r2
 800253c:	b21b      	sxth	r3, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f800 	bl	8000544 <__aeabi_i2d>
 8002544:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002548:	f7fe f990 	bl	800086c <__aeabi_ddiv>
 800254c:	4603      	mov	r3, r0
 800254e:	460c      	mov	r4, r1
 8002550:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002554:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	b21a      	sxth	r2, r3
 800255c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002560:	b21b      	sxth	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b21b      	sxth	r3, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd ffec 	bl	8000544 <__aeabi_i2d>
 800256c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002570:	f7fe f97c 	bl	800086c <__aeabi_ddiv>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800257c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	b21a      	sxth	r2, r3
 8002584:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002588:	b21b      	sxth	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b21b      	sxth	r3, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ffd8 	bl	8000544 <__aeabi_i2d>
 8002594:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002598:	f7fe f968 	bl	800086c <__aeabi_ddiv>
 800259c:	4603      	mov	r3, r0
 800259e:	460c      	mov	r4, r1
 80025a0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80025a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	b21a      	sxth	r2, r3
 80025ac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	4313      	orrs	r3, r2
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd ffc4 	bl	8000544 <__aeabi_i2d>
 80025bc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80025c0:	f7fe f954 	bl	800086c <__aeabi_ddiv>
 80025c4:	4603      	mov	r3, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80025cc:	e03b      	b.n	8002646 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80025ce:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	b21a      	sxth	r2, r3
 80025d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80025da:	b21b      	sxth	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	b21b      	sxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ffaf 	bl	8000544 <__aeabi_i2d>
 80025e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80025ea:	f7fe f93f 	bl	800086c <__aeabi_ddiv>
 80025ee:	4603      	mov	r3, r0
 80025f0:	460c      	mov	r4, r1
 80025f2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80025f6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	b21a      	sxth	r2, r3
 80025fe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002602:	b21b      	sxth	r3, r3
 8002604:	4313      	orrs	r3, r2
 8002606:	b21b      	sxth	r3, r3
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ff9b 	bl	8000544 <__aeabi_i2d>
 800260e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002612:	f7fe f92b 	bl	800086c <__aeabi_ddiv>
 8002616:	4603      	mov	r3, r0
 8002618:	460c      	mov	r4, r1
 800261a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800261e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	b21a      	sxth	r2, r3
 8002626:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800262a:	b21b      	sxth	r3, r3
 800262c:	4313      	orrs	r3, r2
 800262e:	b21b      	sxth	r3, r3
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff87 	bl	8000544 <__aeabi_i2d>
 8002636:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800263a:	f7fe f917 	bl	800086c <__aeabi_ddiv>
 800263e:	4603      	mov	r3, r0
 8002640:	460c      	mov	r4, r1
 8002642:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  }

  return xyz;
 8002646:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800264a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800264e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002652:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002656:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800265a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800265e:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8002662:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002666:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800266a:	ec49 8b14 	vmov	d4, r8, r9
 800266e:	ec46 5b15 	vmov	d5, r5, r6
 8002672:	ec42 1b16 	vmov	d6, r1, r2
 8002676:	ec44 3b17 	vmov	d7, r3, r4
}
 800267a:	eeb0 0a44 	vmov.f32	s0, s8
 800267e:	eef0 0a64 	vmov.f32	s1, s9
 8002682:	eeb0 1a45 	vmov.f32	s2, s10
 8002686:	eef0 1a65 	vmov.f32	s3, s11
 800268a:	eeb0 2a46 	vmov.f32	s4, s12
 800268e:	eef0 2a66 	vmov.f32	s5, s13
 8002692:	eeb0 3a47 	vmov.f32	s6, s14
 8002696:	eef0 3a67 	vmov.f32	s7, s15
 800269a:	377c      	adds	r7, #124	; 0x7c
 800269c:	46bd      	mov	sp, r7
 800269e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026a2:	bf00      	nop
 80026a4:	3ff00000 	.word	0x3ff00000
 80026a8:	20000006 	.word	0x20000006
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20000002 	.word	0x20000002
 80026b4:	20000004 	.word	0x20000004
 80026b8:	20000008 	.word	0x20000008

080026bc <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80026bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026c0:	b091      	sub	sp, #68	; 0x44
 80026c2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80026c4:	201a      	movs	r0, #26
 80026c6:	f7ff feb5 	bl	8002434 <bno055_getVector>
 80026ca:	eeb0 4a40 	vmov.f32	s8, s0
 80026ce:	eef0 4a60 	vmov.f32	s9, s1
 80026d2:	eeb0 5a41 	vmov.f32	s10, s2
 80026d6:	eef0 5a61 	vmov.f32	s11, s3
 80026da:	eeb0 6a42 	vmov.f32	s12, s4
 80026de:	eef0 6a62 	vmov.f32	s13, s5
 80026e2:	eeb0 7a43 	vmov.f32	s14, s6
 80026e6:	eef0 7a63 	vmov.f32	s15, s7
 80026ea:	ed87 4b08 	vstr	d4, [r7, #32]
 80026ee:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80026f2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80026f6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80026fa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026fe:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8002702:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002706:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800270a:	ec49 8b14 	vmov	d4, r8, r9
 800270e:	ec46 5b15 	vmov	d5, r5, r6
 8002712:	ec42 1b16 	vmov	d6, r1, r2
 8002716:	ec44 3b17 	vmov	d7, r3, r4
}
 800271a:	eeb0 0a44 	vmov.f32	s0, s8
 800271e:	eef0 0a64 	vmov.f32	s1, s9
 8002722:	eeb0 1a45 	vmov.f32	s2, s10
 8002726:	eef0 1a65 	vmov.f32	s3, s11
 800272a:	eeb0 2a46 	vmov.f32	s4, s12
 800272e:	eef0 2a66 	vmov.f32	s5, s13
 8002732:	eeb0 3a47 	vmov.f32	s6, s14
 8002736:	eef0 3a67 	vmov.f32	s7, s15
 800273a:	3744      	adds	r7, #68	; 0x44
 800273c:	46bd      	mov	sp, r7
 800273e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002744 <bno055_assignI2C>:
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

// BSP part of the driver
void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <bno055_assignI2C+0x1c>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000c94 	.word	0x20000c94

08002764 <bno055_delay>:

void bno055_delay(int time) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_Delay(time);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4618      	mov	r0, r3
 8002770:	f001 fbae 	bl	8003ed0 <HAL_Delay>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <bno055_writeData>:

bool bno055_writeData(uint8_t reg, uint8_t data) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af02      	add	r7, sp, #8
 8002782:	4603      	mov	r3, r0
 8002784:	460a      	mov	r2, r1
 8002786:	71fb      	strb	r3, [r7, #7]
 8002788:	4613      	mov	r3, r2
 800278a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	733b      	strb	r3, [r7, #12]
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, txdata, sizeof(txdata), 10);
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <bno055_writeData+0x44>)
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	f107 020c 	add.w	r2, r7, #12
 800279c:	230a      	movs	r3, #10
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2302      	movs	r3, #2
 80027a2:	2150      	movs	r1, #80	; 0x50
 80027a4:	f002 ffee 	bl	8005784 <HAL_I2C_Master_Transmit>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]
  return status == HAL_OK;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000c94 	.word	0x20000c94

080027c4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
 80027d0:	4613      	mov	r3, r2
 80027d2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1, 100);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <bno055_readData+0x40>)
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	1dfa      	adds	r2, r7, #7
 80027da:	2364      	movs	r3, #100	; 0x64
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2301      	movs	r3, #1
 80027e0:	2150      	movs	r1, #80	; 0x50
 80027e2:	f002 ffcf 	bl	8005784 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len, 100);
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <bno055_readData+0x40>)
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	79bb      	ldrb	r3, [r7, #6]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	2364      	movs	r3, #100	; 0x64
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	2150      	movs	r1, #80	; 0x50
 80027f8:	f003 f8b8 	bl	800596c <HAL_I2C_Master_Receive>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000c94 	.word	0x20000c94

08002808 <stopSongIT>:
	HAL_TIM_Base_Start_IT(&htim16);

	playNoteIT();
}

void stopSongIT() {
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	//Set duty cycle to 0%
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <stopSongIT+0x1c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	635a      	str	r2, [r3, #52]	; 0x34

	//Start 1ms Timer interrupt
	HAL_TIM_Base_Stop_IT(&htim16);
 8002814:	4804      	ldr	r0, [pc, #16]	; (8002828 <stopSongIT+0x20>)
 8002816:	f006 fbae 	bl	8008f76 <HAL_TIM_Base_Stop_IT>

	bIsPlaying = false;
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <stopSongIT+0x24>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20001094 	.word	0x20001094
 8002828:	20001114 	.word	0x20001114
 800282c:	20000ca9 	.word	0x20000ca9

08002830 <playNoteIT>:

void playNoteIT() {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
	if(bState == true) {
 8002836:	4b52      	ldr	r3, [pc, #328]	; (8002980 <playNoteIT+0x150>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d042      	beq.n	80028c4 <playNoteIT+0x94>
		//We play a note...
		bState = false;
 800283e:	4b50      	ldr	r3, [pc, #320]	; (8002980 <playNoteIT+0x150>)
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8002844:	4b4f      	ldr	r3, [pc, #316]	; (8002984 <playNoteIT+0x154>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800284c:	635a      	str	r2, [r3, #52]	; 0x34

		//Set required frequency
		if(pu16SongMelody[u16Index] != 0) {
 800284e:	4b4e      	ldr	r3, [pc, #312]	; (8002988 <playNoteIT+0x158>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b4e      	ldr	r3, [pc, #312]	; (800298c <playNoteIT+0x15c>)
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d010      	beq.n	8002882 <playNoteIT+0x52>
			int freq = (80000000/pu16SongMelody[u16Index])/1000;
 8002860:	4b49      	ldr	r3, [pc, #292]	; (8002988 <playNoteIT+0x158>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b49      	ldr	r3, [pc, #292]	; (800298c <playNoteIT+0x15c>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	4b47      	ldr	r3, [pc, #284]	; (8002990 <playNoteIT+0x160>)
 8002872:	fb93 f3f2 	sdiv	r3, r3, r2
 8002876:	607b      	str	r3, [r7, #4]
			__HAL_TIM_SET_PRESCALER(&htim1, freq);
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <playNoteIT+0x154>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
 8002880:	e003      	b.n	800288a <playNoteIT+0x5a>
		} else {
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002882:	4b40      	ldr	r3, [pc, #256]	; (8002984 <playNoteIT+0x154>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
		}

		__HAL_TIM_SET_AUTORELOAD(&htim16, (10000 / pu8SongTone[u16Index]));
 800288a:	4b42      	ldr	r3, [pc, #264]	; (8002994 <playNoteIT+0x164>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a3f      	ldr	r2, [pc, #252]	; (800298c <playNoteIT+0x15c>)
 8002890:	8812      	ldrh	r2, [r2, #0]
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	f242 7310 	movw	r3, #10000	; 0x2710
 800289c:	fb93 f2f2 	sdiv	r2, r3, r2
 80028a0:	4b3d      	ldr	r3, [pc, #244]	; (8002998 <playNoteIT+0x168>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <playNoteIT+0x164>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a38      	ldr	r2, [pc, #224]	; (800298c <playNoteIT+0x15c>)
 80028ac:	8812      	ldrh	r2, [r2, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80028b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80028bc:	461a      	mov	r2, r3
 80028be:	4b36      	ldr	r3, [pc, #216]	; (8002998 <playNoteIT+0x168>)
 80028c0:	60da      	str	r2, [r3, #12]
	    	} else {
	    		stopSongIT();
	    	}
	    }
	}
}
 80028c2:	e059      	b.n	8002978 <playNoteIT+0x148>
		bState = true;
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <playNoteIT+0x150>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80028ca:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <playNoteIT+0x154>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_AUTORELOAD(&htim16, (10000 / pu8SongTone[u16Index] * fSongSpeed) + 1);
 80028d2:	4b30      	ldr	r3, [pc, #192]	; (8002994 <playNoteIT+0x164>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2d      	ldr	r2, [pc, #180]	; (800298c <playNoteIT+0x15c>)
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80028e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f0:	4b2a      	ldr	r3, [pc, #168]	; (800299c <playNoteIT+0x16c>)
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <playNoteIT+0x168>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800290a:	ee17 2a90 	vmov	r2, s15
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002910:	4b20      	ldr	r3, [pc, #128]	; (8002994 <playNoteIT+0x164>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1d      	ldr	r2, [pc, #116]	; (800298c <playNoteIT+0x15c>)
 8002916:	8812      	ldrh	r2, [r2, #0]
 8002918:	4413      	add	r3, r2
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002922:	fb93 f3f2 	sdiv	r3, r3, r2
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <playNoteIT+0x16c>)
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800293c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002944:	ee17 2a90 	vmov	r2, s15
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <playNoteIT+0x168>)
 800294a:	60da      	str	r2, [r3, #12]
	    u16Index++;
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <playNoteIT+0x15c>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <playNoteIT+0x15c>)
 8002956:	801a      	strh	r2, [r3, #0]
	    if(!(u16Index < u16Length)) {
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <playNoteIT+0x15c>)
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <playNoteIT+0x170>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d309      	bcc.n	8002978 <playNoteIT+0x148>
	    	if(bRepeat == true) {
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <playNoteIT+0x174>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <playNoteIT+0x144>
	    		u16Index = 0;
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <playNoteIT+0x15c>)
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
}
 8002972:	e001      	b.n	8002978 <playNoteIT+0x148>
	    		stopSongIT();
 8002974:	f7ff ff48 	bl	8002808 <stopSongIT>
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000ca4 	.word	0x20000ca4
 8002984:	20001094 	.word	0x20001094
 8002988:	20000c98 	.word	0x20000c98
 800298c:	20000ca6 	.word	0x20000ca6
 8002990:	00013880 	.word	0x00013880
 8002994:	20000c9c 	.word	0x20000c9c
 8002998:	20001114 	.word	0x20001114
 800299c:	20000ca0 	.word	0x20000ca0
 80029a0:	20000caa 	.word	0x20000caa
 80029a4:	20000ca8 	.word	0x20000ca8

080029a8 <HAL_TIM_PeriodElapsedCallback>:
void enableRepeat(bool bOnRepeat) {
	bRepeat = bOnRepeat;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim16.Instance)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d101      	bne.n	80029c0 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
    	playNoteIT();
 80029bc:	f7ff ff38 	bl	8002830 <playNoteIT>
    }
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20001114 	.word	0x20001114

080029cc <CommManagerCRC16>:
  * @brief  Calculate a CRC16 on a buffer
  * @param  pu8Data: Pointers to our data for CRC calculation
  * @param  u16Length: Length of buffer to calculate our CRC16 on
  * @retval the calculated CRC16
  */
uint16_t CommManagerCRC16(uint8_t* pu8Data, uint16_t u16Length) {
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t u16crc = 0xffff;
 80029d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029dc:	81bb      	strh	r3, [r7, #12]

    if(pu8Data == NULL) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d127      	bne.n	8002a34 <CommManagerCRC16+0x68>
    	return 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e02b      	b.n	8002a40 <CommManagerCRC16+0x74>
    }

    while (u16Length--) {
    	u16crc ^= *(unsigned char *)pu8Data++ << 8;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	b21a      	sxth	r2, r3
 80029f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029f8:	4053      	eors	r3, r2
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	81bb      	strh	r3, [r7, #12]
        for (i=0; i < 8; i++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e014      	b.n	8002a2e <CommManagerCRC16+0x62>
        	u16crc = u16crc & 0x8000 ? (u16crc << 1) ^ 0x1021 : u16crc << 1;
 8002a04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	da09      	bge.n	8002a20 <CommManagerCRC16+0x54>
 8002a0c:	89bb      	ldrh	r3, [r7, #12]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002a16:	f083 0301 	eor.w	r3, r3, #1
 8002a1a:	b21b      	sxth	r3, r3
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	e002      	b.n	8002a26 <CommManagerCRC16+0x5a>
 8002a20:	89bb      	ldrh	r3, [r7, #12]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	81bb      	strh	r3, [r7, #12]
        for (i=0; i < 8; i++)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b07      	cmp	r3, #7
 8002a32:	d9e7      	bls.n	8002a04 <CommManagerCRC16+0x38>
    while (u16Length--) {
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	1e5a      	subs	r2, r3, #1
 8002a38:	807a      	strh	r2, [r7, #2]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1d4      	bne.n	80029e8 <CommManagerCRC16+0x1c>
    }
    return u16crc & 0xffff;
 8002a3e:	89bb      	ldrh	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <CommManagerSendPacket>:
  * @brief  Format and send return message containing a payload
  * @param  u8CMD: The cmd code value
  * @param  pu8Payload: Pointer to a uint8_t buffer containing data to send
  * @param  u16PayloadLength: uint16_t for the buffer length
  */
void CommManagerSendPacket(uint8_t u8CMD, uint8_t* pu8Payload, uint16_t u16PayloadLength) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b0c4      	sub	sp, #272	; 0x110
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	463b      	mov	r3, r7
 8002a54:	6019      	str	r1, [r3, #0]
 8002a56:	4611      	mov	r1, r2
 8002a58:	1dfb      	adds	r3, r7, #7
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	460a      	mov	r2, r1
 8002a62:	801a      	strh	r2, [r3, #0]
	uint8_t u8Reply[256];
	uint16_t u16CalculatedCRC16;

    if(pu8Payload == NULL && u16PayloadLength != 0) {
 8002a64:	463b      	mov	r3, r7
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d103      	bne.n	8002a74 <CommManagerSendPacket+0x28>
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d14d      	bne.n	8002b10 <CommManagerSendPacket+0xc4>
    	return;
    }

	u8Reply[0] = START;					//START
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	2216      	movs	r2, #22
 8002a7a:	701a      	strb	r2, [r3, #0]
	u8Reply[1] = VID;					//VID
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	2201      	movs	r2, #1
 8002a82:	705a      	strb	r2, [r3, #1]
	u8Reply[2] = u8CMD;					//CMD
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	1dfa      	adds	r2, r7, #7
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	709a      	strb	r2, [r3, #2]
	u8Reply[3] = u16PayloadLength;		//PLL
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	70da      	strb	r2, [r3, #3]
	if(u16PayloadLength != 0) {
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <CommManagerSendPacket+0x6a>
		memcpy(&u8Reply[4], pu8Payload, u16PayloadLength);	//PL
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	8819      	ldrh	r1, [r3, #0]
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	f107 020c 	add.w	r2, r7, #12
 8002aac:	1d10      	adds	r0, r2, #4
 8002aae:	460a      	mov	r2, r1
 8002ab0:	6819      	ldr	r1, [r3, #0]
 8002ab2:	f00e fc7d 	bl	80113b0 <memcpy>
	}
	u16CalculatedCRC16 = CommManagerCRC16(u8Reply, 4 + u16PayloadLength);
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	3304      	adds	r3, #4
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	f107 030c 	add.w	r3, r7, #12
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff81 	bl	80029cc <CommManagerCRC16>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	u8Reply[4 + u16PayloadLength] = (uint8_t)(u16CalculatedCRC16 >> 8);		//CRC part 1
 8002ad0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	3304      	adds	r3, #4
 8002ade:	b2d1      	uxtb	r1, r2
 8002ae0:	f107 020c 	add.w	r2, r7, #12
 8002ae4:	54d1      	strb	r1, [r2, r3]
	u8Reply[5 + u16PayloadLength] = (uint8_t)u16CalculatedCRC16;			//CRC part 2
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	3305      	adds	r3, #5
 8002aec:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8002af0:	b2d1      	uxtb	r1, r2
 8002af2:	f107 020c 	add.w	r2, r7, #12
 8002af6:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit(pUartHandle, u8Reply, 6 + u16PayloadLength, 25);
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <CommManagerSendPacket+0xd0>)
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	3306      	adds	r3, #6
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	f107 010c 	add.w	r1, r7, #12
 8002b08:	2319      	movs	r3, #25
 8002b0a:	f007 f987 	bl	8009e1c <HAL_UART_Transmit>
 8002b0e:	e000      	b.n	8002b12 <CommManagerSendPacket+0xc6>
    	return;
 8002b10:	bf00      	nop
}
 8002b12:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000fbc 	.word	0x20000fbc

08002b20 <CommManagerProcessBuffer>:
  * @brief  Check if message are contained inside a circular DMA buffer, the erase the message in the buffer
  * @param  pu8Data: Pointer to a size 256 uint8_t buffer
  * @param  pu16Length: Pointer to a uint16_t for the buffer length
  * @retval 1 if a new message has been received, 0 otherwise
  */
uint8_t CommManagerProcessBuffer(uint8_t* pu8Data, uint16_t* pu16Length) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	uint16_t u16Index;
	uint16_t u16CircularBufferIndex;
	uint16_t u16RegularIndex;
	uint16_t u16CalculatedCRC16;
	uint8_t u8Data = oCommManager.u8DMABuffer[oCommManager.u16Counter];
 8002b2a:	4bb1      	ldr	r3, [pc, #708]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002b2c:	f8b3 330a 	ldrh.w	r3, [r3, #778]	; 0x30a
 8002b30:	461a      	mov	r2, r3
 8002b32:	4baf      	ldr	r3, [pc, #700]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002b34:	4413      	add	r3, r2
 8002b36:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8002b3a:	74fb      	strb	r3, [r7, #19]

	if(pu8Data == NULL || pu16Length == NULL) {
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <CommManagerProcessBuffer+0x28>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <CommManagerProcessBuffer+0x2c>
			return 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e16c      	b.n	8002e26 <CommManagerProcessBuffer+0x306>
		}

	switch(oCommManager.u8State) {
 8002b4c:	4ba8      	ldr	r3, [pc, #672]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002b4e:	f893 3301 	ldrb.w	r3, [r3, #769]	; 0x301
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	f200 814f 	bhi.w	8002df6 <CommManagerProcessBuffer+0x2d6>
 8002b58:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <CommManagerProcessBuffer+0x40>)
 8002b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5e:	bf00      	nop
 8002b60:	08002b79 	.word	0x08002b79
 8002b64:	08002ba7 	.word	0x08002ba7
 8002b68:	08002bf1 	.word	0x08002bf1
 8002b6c:	08002bfb 	.word	0x08002bfb
 8002b70:	08002c21 	.word	0x08002c21
 8002b74:	08002c53 	.word	0x08002c53
		case FSM_STATE_HEADER:
			if(u8Data == START) {
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	2b16      	cmp	r3, #22
 8002b7c:	f040 8133 	bne.w	8002de6 <CommManagerProcessBuffer+0x2c6>
				oCommManager.u8State = FSM_STATE_VID;
 8002b80:	4b9b      	ldr	r3, [pc, #620]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
				oCommManager.u8CounterCRC = 2;
 8002b88:	4b99      	ldr	r3, [pc, #612]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
				oCommManager.u8PayloadLength = 0;
 8002b90:	4b97      	ldr	r3, [pc, #604]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
				oCommManager.u16StartLocation = oCommManager.u16Counter;
 8002b98:	4b95      	ldr	r3, [pc, #596]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002b9a:	f8b3 230a 	ldrh.w	r2, [r3, #778]	; 0x30a
 8002b9e:	4b94      	ldr	r3, [pc, #592]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002ba0:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
			}
		break;
 8002ba4:	e11f      	b.n	8002de6 <CommManagerProcessBuffer+0x2c6>
		case FSM_STATE_VID:
			if(u8Data == FSM_STATE_VID) {
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d104      	bne.n	8002bb6 <CommManagerProcessBuffer+0x96>
				oCommManager.u8State = FSM_STATE_CMD;
 8002bac:	4b90      	ldr	r3, [pc, #576]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
				oCommManager.u8State = FSM_STATE_HEADER;
				//We restart one char after the startLocation
				oCommManager.u16Counter = ++oCommManager.u16StartLocation % oCommManager.u16DMABufferLength;
				return 0;
			}
		break;
 8002bb4:	e11f      	b.n	8002df6 <CommManagerProcessBuffer+0x2d6>
				oCommManager.u8State = FSM_STATE_HEADER;
 8002bb6:	4b8e      	ldr	r3, [pc, #568]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
				oCommManager.u16Counter = ++oCommManager.u16StartLocation % oCommManager.u16DMABufferLength;
 8002bbe:	4b8c      	ldr	r3, [pc, #560]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002bc0:	f8b3 3304 	ldrh.w	r3, [r3, #772]	; 0x304
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	4b89      	ldr	r3, [pc, #548]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002bca:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002bd0:	f8b3 3304 	ldrh.w	r3, [r3, #772]	; 0x304
 8002bd4:	4a86      	ldr	r2, [pc, #536]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002bd6:	f8b2 230c 	ldrh.w	r2, [r2, #780]	; 0x30c
 8002bda:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bde:	fb02 f201 	mul.w	r2, r2, r1
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	4b82      	ldr	r3, [pc, #520]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002be8:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
				return 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e11a      	b.n	8002e26 <CommManagerProcessBuffer+0x306>
		case FSM_STATE_CMD:
			oCommManager.u8State = FSM_STATE_PLL;
 8002bf0:	4b7f      	ldr	r3, [pc, #508]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
		break;
 8002bf8:	e0fd      	b.n	8002df6 <CommManagerProcessBuffer+0x2d6>
		case FSM_STATE_PLL:
			oCommManager.u8PayloadLength = u8Data;
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	f882 3302 	strb.w	r3, [r2, #770]	; 0x302
			if(oCommManager.u8PayloadLength > 0) {
 8002c02:	4b7b      	ldr	r3, [pc, #492]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c04:	f893 3302 	ldrb.w	r3, [r3, #770]	; 0x302
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d004      	beq.n	8002c16 <CommManagerProcessBuffer+0xf6>
				oCommManager.u8State = FSM_STATE_PL;
 8002c0c:	4b78      	ldr	r3, [pc, #480]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c0e:	2204      	movs	r2, #4
 8002c10:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
			} else {
				oCommManager.u8State = FSM_STATE_CRC;
			}
		break;
 8002c14:	e0ef      	b.n	8002df6 <CommManagerProcessBuffer+0x2d6>
				oCommManager.u8State = FSM_STATE_CRC;
 8002c16:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c18:	2205      	movs	r2, #5
 8002c1a:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
		break;
 8002c1e:	e0ea      	b.n	8002df6 <CommManagerProcessBuffer+0x2d6>
		case FSM_STATE_PL:
			if(oCommManager.u8PayloadLength > 0) {
 8002c20:	4b73      	ldr	r3, [pc, #460]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c22:	f893 3302 	ldrb.w	r3, [r3, #770]	; 0x302
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 80df 	beq.w	8002dea <CommManagerProcessBuffer+0x2ca>
				oCommManager.u8PayloadLength--;
 8002c2c:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c2e:	f893 3302 	ldrb.w	r3, [r3, #770]	; 0x302
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4b6e      	ldr	r3, [pc, #440]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c38:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
				if(oCommManager.u8PayloadLength == 0) {
 8002c3c:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c3e:	f893 3302 	ldrb.w	r3, [r3, #770]	; 0x302
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 80d1 	bne.w	8002dea <CommManagerProcessBuffer+0x2ca>
					oCommManager.u8State = FSM_STATE_CRC;
 8002c48:	4b69      	ldr	r3, [pc, #420]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
				}
			}

		break;
 8002c50:	e0cb      	b.n	8002dea <CommManagerProcessBuffer+0x2ca>
		case FSM_STATE_CRC:
			if(oCommManager.u8CounterCRC > 0) {
 8002c52:	4b67      	ldr	r3, [pc, #412]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c54:	f8b3 330e 	ldrh.w	r3, [r3, #782]	; 0x30e
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80cb 	beq.w	8002df4 <CommManagerProcessBuffer+0x2d4>
				oCommManager.u8CounterCRC--;
 8002c5e:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c60:	f8b3 330e 	ldrh.w	r3, [r3, #782]	; 0x30e
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c6a:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
				if(oCommManager.u8CounterCRC == 0) {
 8002c6e:	4b60      	ldr	r3, [pc, #384]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c70:	f8b3 330e 	ldrh.w	r3, [r3, #782]	; 0x30e
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 80bd 	bne.w	8002df4 <CommManagerProcessBuffer+0x2d4>
					//We have a complete message
					oCommManager.u16EndLocation = oCommManager.u16Counter++;
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c7c:	f8b3 330a 	ldrh.w	r3, [r3, #778]	; 0x30a
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	b291      	uxth	r1, r2
 8002c84:	4a5a      	ldr	r2, [pc, #360]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c86:	f8a2 130a 	strh.w	r1, [r2, #778]	; 0x30a
 8002c8a:	4a59      	ldr	r2, [pc, #356]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c8c:	f8a2 3306 	strh.w	r3, [r2, #774]	; 0x306

					if(oCommManager.u16StartLocation > oCommManager.u16EndLocation) {
 8002c90:	4b57      	ldr	r3, [pc, #348]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c92:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
 8002c96:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002c98:	f8b3 3306 	ldrh.w	r3, [r3, #774]	; 0x306
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d93c      	bls.n	8002d1a <CommManagerProcessBuffer+0x1fa>
						//Circular buffer copy
						u16Index = oCommManager.u16StartLocation;
 8002ca0:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002ca2:	f8b3 3304 	ldrh.w	r3, [r3, #772]	; 0x304
 8002ca6:	82fb      	strh	r3, [r7, #22]
						u16RegularIndex = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	82bb      	strh	r3, [r7, #20]
						while(u16Index % oCommManager.u16DMABufferLength != (oCommManager.u16EndLocation + 1) % oCommManager.u16DMABufferLength) {
 8002cac:	e017      	b.n	8002cde <CommManagerProcessBuffer+0x1be>
							u16CircularBufferIndex = u16Index % oCommManager.u16DMABufferLength;
 8002cae:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002cb0:	f8b3 230c 	ldrh.w	r2, [r3, #780]	; 0x30c
 8002cb4:	8afb      	ldrh	r3, [r7, #22]
 8002cb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cba:	fb02 f201 	mul.w	r2, r2, r1
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	823b      	strh	r3, [r7, #16]
							oCommManager.u8LastDataReceived[u16RegularIndex] = oCommManager.u8DMABuffer[u16CircularBufferIndex];
 8002cc2:	8a3a      	ldrh	r2, [r7, #16]
 8002cc4:	8abb      	ldrh	r3, [r7, #20]
 8002cc6:	494a      	ldr	r1, [pc, #296]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002cc8:	440a      	add	r2, r1
 8002cca:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8002cce:	4a48      	ldr	r2, [pc, #288]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002cd0:	54d1      	strb	r1, [r2, r3]
							u16Index++;
 8002cd2:	8afb      	ldrh	r3, [r7, #22]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	82fb      	strh	r3, [r7, #22]
							u16RegularIndex++;
 8002cd8:	8abb      	ldrh	r3, [r7, #20]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	82bb      	strh	r3, [r7, #20]
						while(u16Index % oCommManager.u16DMABufferLength != (oCommManager.u16EndLocation + 1) % oCommManager.u16DMABufferLength) {
 8002cde:	4b44      	ldr	r3, [pc, #272]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002ce0:	f8b3 230c 	ldrh.w	r2, [r3, #780]	; 0x30c
 8002ce4:	8afb      	ldrh	r3, [r7, #22]
 8002ce6:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cea:	fb02 f201 	mul.w	r2, r2, r1
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	4b3e      	ldr	r3, [pc, #248]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002cf6:	f8b3 3306 	ldrh.w	r3, [r3, #774]	; 0x306
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a3c      	ldr	r2, [pc, #240]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002cfe:	f8b2 230c 	ldrh.w	r2, [r2, #780]	; 0x30c
 8002d02:	fb93 f1f2 	sdiv	r1, r3, r2
 8002d06:	fb02 f201 	mul.w	r2, r2, r1
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	4298      	cmp	r0, r3
 8002d0e:	d1ce      	bne.n	8002cae <CommManagerProcessBuffer+0x18e>
						}
						oCommManager.u16DataLength = u16RegularIndex;
 8002d10:	4a37      	ldr	r2, [pc, #220]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d12:	8abb      	ldrh	r3, [r7, #20]
 8002d14:	f8a2 3308 	strh.w	r3, [r2, #776]	; 0x308
 8002d18:	e01e      	b.n	8002d58 <CommManagerProcessBuffer+0x238>
					} else {
						//Regular buffer copy
						u16RegularIndex = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	82bb      	strh	r3, [r7, #20]
						for(u16Index = oCommManager.u16StartLocation; u16Index <= oCommManager.u16EndLocation; u16Index++) {
 8002d1e:	4b34      	ldr	r3, [pc, #208]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d20:	f8b3 3304 	ldrh.w	r3, [r3, #772]	; 0x304
 8002d24:	82fb      	strh	r3, [r7, #22]
 8002d26:	e00d      	b.n	8002d44 <CommManagerProcessBuffer+0x224>
							oCommManager.u8LastDataReceived[u16RegularIndex] = oCommManager.u8DMABuffer[u16Index];
 8002d28:	8afa      	ldrh	r2, [r7, #22]
 8002d2a:	8abb      	ldrh	r3, [r7, #20]
 8002d2c:	4930      	ldr	r1, [pc, #192]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d2e:	440a      	add	r2, r1
 8002d30:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8002d34:	4a2e      	ldr	r2, [pc, #184]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d36:	54d1      	strb	r1, [r2, r3]
							u16RegularIndex++;
 8002d38:	8abb      	ldrh	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	82bb      	strh	r3, [r7, #20]
						for(u16Index = oCommManager.u16StartLocation; u16Index <= oCommManager.u16EndLocation; u16Index++) {
 8002d3e:	8afb      	ldrh	r3, [r7, #22]
 8002d40:	3301      	adds	r3, #1
 8002d42:	82fb      	strh	r3, [r7, #22]
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d46:	f8b3 3306 	ldrh.w	r3, [r3, #774]	; 0x306
 8002d4a:	8afa      	ldrh	r2, [r7, #22]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d9eb      	bls.n	8002d28 <CommManagerProcessBuffer+0x208>
						}
						oCommManager.u16DataLength = u16RegularIndex;
 8002d50:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d52:	8abb      	ldrh	r3, [r7, #20]
 8002d54:	f8a2 3308 	strh.w	r3, [r2, #776]	; 0x308
					}

					u16CalculatedCRC16 = CommManagerCRC16(oCommManager.u8LastDataReceived, oCommManager.u16DataLength);
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d5a:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4823      	ldr	r0, [pc, #140]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d62:	f7ff fe33 	bl	80029cc <CommManagerCRC16>
 8002d66:	4603      	mov	r3, r0
 8002d68:	81fb      	strh	r3, [r7, #14]

					if(u16CalculatedCRC16 == 0x00) {
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11d      	bne.n	8002dac <CommManagerProcessBuffer+0x28c>
						//We found a valid data packet
						oCommManager.u8State = FSM_STATE_HEADER;
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
						CommManagerEraseBufferPart(oCommManager.u16StartLocation, oCommManager.u16EndLocation);
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d7a:	f8b3 3304 	ldrh.w	r3, [r3, #772]	; 0x304
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d82:	f8b3 3306 	ldrh.w	r3, [r3, #774]	; 0x306
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f000 f853 	bl	8002e34 <CommManagerEraseBufferPart>

						memcpy(pu8Data, oCommManager.u8LastDataReceived, oCommManager.u16DataLength);
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d90:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8002d94:	461a      	mov	r2, r3
 8002d96:	4916      	ldr	r1, [pc, #88]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f00e fb09 	bl	80113b0 <memcpy>
						*pu16Length = oCommManager.u16DataLength;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002da0:	f8b3 2308 	ldrh.w	r2, [r3, #776]	; 0x308
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	801a      	strh	r2, [r3, #0]
						return 1;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e03c      	b.n	8002e26 <CommManagerProcessBuffer+0x306>
					} else {
						//It is invalid
						oCommManager.u8State = FSM_STATE_HEADER;
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
						oCommManager.u16Counter = ++oCommManager.u16StartLocation % oCommManager.u16DMABufferLength;
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002db6:	f8b3 3304 	ldrh.w	r3, [r3, #772]	; 0x304
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002dc0:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002dc6:	f8b3 3304 	ldrh.w	r3, [r3, #772]	; 0x304
 8002dca:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002dcc:	f8b2 230c 	ldrh.w	r2, [r2, #780]	; 0x30c
 8002dd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002dd4:	fb02 f201 	mul.w	r2, r2, r1
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <CommManagerProcessBuffer+0x2d0>)
 8002dde:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
						return 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e01f      	b.n	8002e26 <CommManagerProcessBuffer+0x306>
		break;
 8002de6:	bf00      	nop
 8002de8:	e005      	b.n	8002df6 <CommManagerProcessBuffer+0x2d6>
		break;
 8002dea:	bf00      	nop
 8002dec:	e003      	b.n	8002df6 <CommManagerProcessBuffer+0x2d6>
 8002dee:	bf00      	nop
 8002df0:	20000cac 	.word	0x20000cac
					}
				}
			}
		break;
 8002df4:	bf00      	nop
	}

	//We increment our counter while keeping it circular
	oCommManager.u16Counter = ++oCommManager.u16Counter % oCommManager.u16DMABufferLength;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <CommManagerProcessBuffer+0x310>)
 8002df8:	f8b3 330a 	ldrh.w	r3, [r3, #778]	; 0x30a
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <CommManagerProcessBuffer+0x310>)
 8002e02:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <CommManagerProcessBuffer+0x310>)
 8002e08:	f8b3 330a 	ldrh.w	r3, [r3, #778]	; 0x30a
 8002e0c:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <CommManagerProcessBuffer+0x310>)
 8002e0e:	f8b2 230c 	ldrh.w	r2, [r2, #780]	; 0x30c
 8002e12:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e16:	fb02 f201 	mul.w	r2, r2, r1
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <CommManagerProcessBuffer+0x310>)
 8002e20:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
	return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000cac 	.word	0x20000cac

08002e34 <CommManagerEraseBufferPart>:
/**
  * @brief  Erase part of a circular buffer
  * @param  u16FromIndex: Start index of the circular buffer
  * @param  u16ToIndex: End index of the circular buffer
  */
void CommManagerEraseBufferPart(uint16_t u16FromIndex, uint16_t u16ToIndex) {
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	80fb      	strh	r3, [r7, #6]
 8002e40:	4613      	mov	r3, r2
 8002e42:	80bb      	strh	r3, [r7, #4]
	uint16_t u16Index;
    uint16_t u16RegularIndex;
    uint16_t u16CircularBufferIndex;

    if(u16FromIndex > u16ToIndex) {
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	88bb      	ldrh	r3, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d936      	bls.n	8002eba <CommManagerEraseBufferPart+0x86>
		//Circular buffer copy
		u16Index = u16FromIndex;
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	81fb      	strh	r3, [r7, #14]
		u16RegularIndex = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	81bb      	strh	r3, [r7, #12]
		while(u16Index % oCommManager.u16DMABufferLength != (u16ToIndex + 1) % oCommManager.u16DMABufferLength) {
 8002e54:	e015      	b.n	8002e82 <CommManagerEraseBufferPart+0x4e>
			u16CircularBufferIndex = u16Index % oCommManager.u16DMABufferLength;
 8002e56:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <CommManagerEraseBufferPart+0xc4>)
 8002e58:	f8b3 230c 	ldrh.w	r2, [r3, #780]	; 0x30c
 8002e5c:	89fb      	ldrh	r3, [r7, #14]
 8002e5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e62:	fb02 f201 	mul.w	r2, r2, r1
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	817b      	strh	r3, [r7, #10]
			oCommManager.u8DMABuffer[u16CircularBufferIndex] = 0x00;
 8002e6a:	897b      	ldrh	r3, [r7, #10]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <CommManagerEraseBufferPart+0xc4>)
 8002e6e:	4413      	add	r3, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			u16Index++;
 8002e76:	89fb      	ldrh	r3, [r7, #14]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	81fb      	strh	r3, [r7, #14]
			u16RegularIndex++;
 8002e7c:	89bb      	ldrh	r3, [r7, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	81bb      	strh	r3, [r7, #12]
		while(u16Index % oCommManager.u16DMABufferLength != (u16ToIndex + 1) % oCommManager.u16DMABufferLength) {
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <CommManagerEraseBufferPart+0xc4>)
 8002e84:	f8b3 230c 	ldrh.w	r2, [r3, #780]	; 0x30c
 8002e88:	89fb      	ldrh	r3, [r7, #14]
 8002e8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e8e:	fb02 f201 	mul.w	r2, r2, r1
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	4618      	mov	r0, r3
 8002e98:	88bb      	ldrh	r3, [r7, #4]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a16      	ldr	r2, [pc, #88]	; (8002ef8 <CommManagerEraseBufferPart+0xc4>)
 8002e9e:	f8b2 230c 	ldrh.w	r2, [r2, #780]	; 0x30c
 8002ea2:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ea6:	fb02 f201 	mul.w	r2, r2, r1
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	4298      	cmp	r0, r3
 8002eae:	d1d2      	bne.n	8002e56 <CommManagerEraseBufferPart+0x22>
		}
		oCommManager.u16DataLength = u16RegularIndex;
 8002eb0:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <CommManagerEraseBufferPart+0xc4>)
 8002eb2:	89bb      	ldrh	r3, [r7, #12]
 8002eb4:	f8a2 3308 	strh.w	r3, [r2, #776]	; 0x308
			oCommManager.u8DMABuffer[u16Index] = 0x00;
			u16RegularIndex++;
		}
		oCommManager.u16DataLength = u16RegularIndex;
	}
}
 8002eb8:	e018      	b.n	8002eec <CommManagerEraseBufferPart+0xb8>
		u16RegularIndex = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	81bb      	strh	r3, [r7, #12]
		for(u16Index = u16FromIndex; u16Index <= u16ToIndex; u16Index++) {
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	81fb      	strh	r3, [r7, #14]
 8002ec2:	e00b      	b.n	8002edc <CommManagerEraseBufferPart+0xa8>
			oCommManager.u8DMABuffer[u16Index] = 0x00;
 8002ec4:	89fb      	ldrh	r3, [r7, #14]
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <CommManagerEraseBufferPart+0xc4>)
 8002ec8:	4413      	add	r3, r2
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			u16RegularIndex++;
 8002ed0:	89bb      	ldrh	r3, [r7, #12]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	81bb      	strh	r3, [r7, #12]
		for(u16Index = u16FromIndex; u16Index <= u16ToIndex; u16Index++) {
 8002ed6:	89fb      	ldrh	r3, [r7, #14]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	81fb      	strh	r3, [r7, #14]
 8002edc:	89fa      	ldrh	r2, [r7, #14]
 8002ede:	88bb      	ldrh	r3, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d9ef      	bls.n	8002ec4 <CommManagerEraseBufferPart+0x90>
		oCommManager.u16DataLength = u16RegularIndex;
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <CommManagerEraseBufferPart+0xc4>)
 8002ee6:	89bb      	ldrh	r3, [r7, #12]
 8002ee8:	f8a2 3308 	strh.w	r3, [r2, #776]	; 0x308
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	20000cac 	.word	0x20000cac

08002efc <CommManagerSendHeartbeat>:

void CommManagerSendHeartbeat(uint32_t u32Time) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	uint8_t u8Time[4];
	u8Time[0] = u32Time >> 3*8;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	0e1b      	lsrs	r3, r3, #24
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	733b      	strb	r3, [r7, #12]
	u8Time[1] = u32Time >> 2*8;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	0c1b      	lsrs	r3, r3, #16
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	737b      	strb	r3, [r7, #13]
	u8Time[2] = u32Time >> 1*8;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	73bb      	strb	r3, [r7, #14]
	u8Time[3] = u32Time >> 0*8;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	73fb      	strb	r3, [r7, #15]

	CommManagerSendPacket(CMD_HEARTBEAT, &u8Time, sizeof(u8Time));
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	2204      	movs	r2, #4
 8002f28:	4619      	mov	r1, r3
 8002f2a:	2004      	movs	r0, #4
 8002f2c:	f7ff fd8e 	bl	8002a4c <CommManagerSendPacket>
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <CommManagerSendRawSensorData>:

void CommManagerSendRawSensorData(oRawData_t *rawData) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	CommManagerSendPacket(CMD_RAWSENSOR, (uint8_t *) rawData, sizeof(*rawData));
 8002f40:	2237      	movs	r2, #55	; 0x37
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	2008      	movs	r0, #8
 8002f46:	f7ff fd81 	bl	8002a4c <CommManagerSendPacket>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <CommManagerSendConfigData>:

void CommManagerSendConfigData(oConfig_t *configData) {
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
	CommManagerSendPacket(CMD_CONFIG, (uint8_t *) configData, sizeof(*configData));
 8002f5a:	2229      	movs	r2, #41	; 0x29
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	2010      	movs	r0, #16
 8002f60:	f7ff fd74 	bl	8002a4c <CommManagerSendPacket>
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <CommManagerInit>:

/**
  * @brief  Initialise the communication module
  */
void CommManagerInit(UART_HandleTypeDef* pUart) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	memset(&oCommManager, 0, sizeof(oCommManager));
 8002f74:	f44f 7244 	mov.w	r2, #784	; 0x310
 8002f78:	2100      	movs	r1, #0
 8002f7a:	481c      	ldr	r0, [pc, #112]	; (8002fec <CommManagerInit+0x80>)
 8002f7c:	f00e fa23 	bl	80113c6 <memset>

	oCommManager.u16Counter = 0;
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <CommManagerInit+0x80>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
	oCommManager.u16StartLocation = 0;
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <CommManagerInit+0x80>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	oCommManager.u8PayloadLength = 0;
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <CommManagerInit+0x80>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
	oCommManager.u16EndLocation = 0;
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <CommManagerInit+0x80>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8a3 2306 	strh.w	r2, [r3, #774]	; 0x306
	oCommManager.u8State = FSM_STATE_HEADER;
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <CommManagerInit+0x80>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
	oCommManager.u16DMABufferLength = 512;
 8002fa8:	4b10      	ldr	r3, [pc, #64]	; (8002fec <CommManagerInit+0x80>)
 8002faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fae:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
	oCommManager.u8CounterCRC = 0;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <CommManagerInit+0x80>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
	oCommManager.u16DataLength = 0;
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <CommManagerInit+0x80>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8a3 2308 	strh.w	r2, [r3, #776]	; 0x308
	oCommManager.u8ReceivedInit = 0;
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <CommManagerInit+0x80>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	pUartHandle = pUart;
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <CommManagerInit+0x84>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_DMA(pUartHandle, (uint8_t*)oCommManager.u8DMABuffer, oCommManager.u16DMABufferLength);
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <CommManagerInit+0x84>)
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <CommManagerInit+0x80>)
 8002fd6:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4905      	ldr	r1, [pc, #20]	; (8002ff4 <CommManagerInit+0x88>)
 8002fde:	f007 f853 	bl	800a088 <HAL_UART_Receive_DMA>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000cac 	.word	0x20000cac
 8002ff0:	20000fbc 	.word	0x20000fbc
 8002ff4:	20000dad 	.word	0x20000dad

08002ff8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <MX_CRC_Init+0x3c>)
 8002ffe:	4a0e      	ldr	r2, [pc, #56]	; (8003038 <MX_CRC_Init+0x40>)
 8003000:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <MX_CRC_Init+0x3c>)
 8003004:	2200      	movs	r2, #0
 8003006:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <MX_CRC_Init+0x3c>)
 800300a:	2200      	movs	r2, #0
 800300c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <MX_CRC_Init+0x3c>)
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <MX_CRC_Init+0x3c>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <MX_CRC_Init+0x3c>)
 800301c:	2201      	movs	r2, #1
 800301e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <MX_CRC_Init+0x3c>)
 8003022:	f001 fea3 	bl	8004d6c <HAL_CRC_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800302c:	f000 f9ea 	bl	8003404 <Error_Handler>
  }

}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000fc0 	.word	0x20000fc0
 8003038:	40023000 	.word	0x40023000

0800303c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_CRC_MspInit+0x38>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10b      	bne.n	8003066 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_CRC_MspInit+0x3c>)
 8003050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <HAL_CRC_MspInit+0x3c>)
 8003054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003058:	6493      	str	r3, [r2, #72]	; 0x48
 800305a:	4b07      	ldr	r3, [pc, #28]	; (8003078 <HAL_CRC_MspInit+0x3c>)
 800305c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40023000 	.word	0x40023000
 8003078:	40021000 	.word	0x40021000

0800307c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <MX_DMA_Init+0x38>)
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <MX_DMA_Init+0x38>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6493      	str	r3, [r2, #72]	; 0x48
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <MX_DMA_Init+0x38>)
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	2100      	movs	r1, #0
 800309e:	2010      	movs	r0, #16
 80030a0:	f001 fe2d 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80030a4:	2010      	movs	r0, #16
 80030a6:	f001 fe46 	bl	8004d36 <HAL_NVIC_EnableIRQ>

}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000

080030b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030be:	f107 030c 	add.w	r3, r7, #12
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	4b28      	ldr	r3, [pc, #160]	; (8003170 <MX_GPIO_Init+0xb8>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	4a27      	ldr	r2, [pc, #156]	; (8003170 <MX_GPIO_Init+0xb8>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030da:	4b25      	ldr	r3, [pc, #148]	; (8003170 <MX_GPIO_Init+0xb8>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <MX_GPIO_Init+0xb8>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	4a21      	ldr	r2, [pc, #132]	; (8003170 <MX_GPIO_Init+0xb8>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <MX_GPIO_Init+0xb8>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <MX_GPIO_Init+0xb8>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <MX_GPIO_Init+0xb8>)
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <MX_GPIO_Init+0xb8>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELEM_MUX_Pin|DROP_CTRL_Pin, GPIO_PIN_RESET);
 8003116:	2200      	movs	r2, #0
 8003118:	2112      	movs	r1, #18
 800311a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311e:	f002 fa71 	bl	8005604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SD_CS_Pin|RIGHT_MOTOR_DIR_Pin|LEFT_MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8003122:	2200      	movs	r2, #0
 8003124:	2133      	movs	r1, #51	; 0x33
 8003126:	4813      	ldr	r0, [pc, #76]	; (8003174 <MX_GPIO_Init+0xbc>)
 8003128:	f002 fa6c 	bl	8005604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TELEM_MUX_Pin|DROP_CTRL_Pin;
 800312c:	2312      	movs	r3, #18
 800312e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003130:	2301      	movs	r3, #1
 8003132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	4619      	mov	r1, r3
 8003142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003146:	f002 f8f3 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin|RIGHT_MOTOR_DIR_Pin|LEFT_MOTOR_DIR_Pin;
 800314a:	2333      	movs	r3, #51	; 0x33
 800314c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314e:	2301      	movs	r3, #1
 8003150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315a:	f107 030c 	add.w	r3, r7, #12
 800315e:	4619      	mov	r1, r3
 8003160:	4804      	ldr	r0, [pc, #16]	; (8003174 <MX_GPIO_Init+0xbc>)
 8003162:	f002 f8e5 	bl	8005330 <HAL_GPIO_Init>

}
 8003166:	bf00      	nop
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	48000400 	.word	0x48000400

08003178 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <MX_I2C1_Init+0x74>)
 800317e:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <MX_I2C1_Init+0x78>)
 8003180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8003182:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <MX_I2C1_Init+0x74>)
 8003184:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <MX_I2C1_Init+0x7c>)
 8003186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <MX_I2C1_Init+0x74>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <MX_I2C1_Init+0x74>)
 8003190:	2201      	movs	r2, #1
 8003192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <MX_I2C1_Init+0x74>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <MX_I2C1_Init+0x74>)
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <MX_I2C1_Init+0x74>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <MX_I2C1_Init+0x74>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <MX_I2C1_Init+0x74>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031b2:	480e      	ldr	r0, [pc, #56]	; (80031ec <MX_I2C1_Init+0x74>)
 80031b4:	f002 fa57 	bl	8005666 <HAL_I2C_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80031be:	f000 f921 	bl	8003404 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031c2:	2100      	movs	r1, #0
 80031c4:	4809      	ldr	r0, [pc, #36]	; (80031ec <MX_I2C1_Init+0x74>)
 80031c6:	f003 f97d 	bl	80064c4 <HAL_I2CEx_ConfigAnalogFilter>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80031d0:	f000 f918 	bl	8003404 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80031d4:	2100      	movs	r1, #0
 80031d6:	4805      	ldr	r0, [pc, #20]	; (80031ec <MX_I2C1_Init+0x74>)
 80031d8:	f003 f9bf 	bl	800655a <HAL_I2CEx_ConfigDigitalFilter>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80031e2:	f000 f90f 	bl	8003404 <Error_Handler>
  }

}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000fe4 	.word	0x20000fe4
 80031f0:	40005400 	.word	0x40005400
 80031f4:	10909cec 	.word	0x10909cec

080031f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003200:	f107 0314 	add.w	r3, r7, #20
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a18      	ldr	r2, [pc, #96]	; (8003278 <HAL_I2C_MspInit+0x80>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d129      	bne.n	800326e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321a:	4b18      	ldr	r3, [pc, #96]	; (800327c <HAL_I2C_MspInit+0x84>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <HAL_I2C_MspInit+0x84>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003226:	4b15      	ldr	r3, [pc, #84]	; (800327c <HAL_I2C_MspInit+0x84>)
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003232:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003238:	2312      	movs	r3, #18
 800323a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800323c:	2301      	movs	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003240:	2303      	movs	r3, #3
 8003242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003244:	2304      	movs	r3, #4
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	4619      	mov	r1, r3
 800324e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003252:	f002 f86d 	bl	8005330 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_I2C_MspInit+0x84>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <HAL_I2C_MspInit+0x84>)
 800325c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003260:	6593      	str	r3, [r2, #88]	; 0x58
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <HAL_I2C_MspInit+0x84>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800326e:	bf00      	nop
 8003270:	3728      	adds	r7, #40	; 0x28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40005400 	.word	0x40005400
 800327c:	40021000 	.word	0x40021000

08003280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003284:	f000 fdb3 	bl	8003dee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003288:	f000 f820 	bl	80032cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800328c:	f7ff ff14 	bl	80030b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003290:	f7ff fef4 	bl	800307c <MX_DMA_Init>
  MX_ADC1_Init();
 8003294:	f7fe fa40 	bl	8001718 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003298:	f7ff ff6e 	bl	8003178 <MX_I2C1_Init>
  MX_SPI1_Init();
 800329c:	f000 f8ba 	bl	8003414 <MX_SPI1_Init>
  MX_TIM1_Init();
 80032a0:	f000 fa7c 	bl	800379c <MX_TIM1_Init>
  MX_TIM2_Init();
 80032a4:	f000 fb0a 	bl	80038bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80032a8:	f000 fc6c 	bl	8003b84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80032ac:	f000 fc9a 	bl	8003be4 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80032b0:	f7ff fea2 	bl	8002ff8 <MX_CRC_Init>
  MX_FATFS_Init();
 80032b4:	f008 fe9a 	bl	800bfec <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80032b8:	f00d faf4 	bl	80108a4 <MX_USB_DEVICE_Init>
  MX_TIM16_Init();
 80032bc:	f000 fb62 	bl	8003984 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit();
 80032c0:	f7fd fec2 	bl	8001048 <ApplicationInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ApplicationTask();
 80032c4:	f7fd ff34 	bl	8001130 <ApplicationTask>
 80032c8:	e7fc      	b.n	80032c4 <main+0x44>
	...

080032cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b0ac      	sub	sp, #176	; 0xb0
 80032d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032d6:	2244      	movs	r2, #68	; 0x44
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f00e f873 	bl	80113c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	2254      	movs	r2, #84	; 0x54
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f00e f865 	bl	80113c6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80032fc:	f004 f8bc 	bl	8007478 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003300:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <SystemClock_Config+0x134>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003306:	4a3e      	ldr	r2, [pc, #248]	; (8003400 <SystemClock_Config+0x134>)
 8003308:	f023 0318 	bic.w	r3, r3, #24
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003310:	2314      	movs	r3, #20
 8003312:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003314:	2301      	movs	r3, #1
 8003316:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003318:	2301      	movs	r3, #1
 800331a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003324:	2360      	movs	r3, #96	; 0x60
 8003326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800332a:	2302      	movs	r3, #2
 800332c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003330:	2301      	movs	r3, #1
 8003332:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003336:	2301      	movs	r3, #1
 8003338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800333c:	2328      	movs	r3, #40	; 0x28
 800333e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003342:	2307      	movs	r3, #7
 8003344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003348:	2302      	movs	r3, #2
 800334a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800334e:	2302      	movs	r3, #2
 8003350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003354:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003358:	4618      	mov	r0, r3
 800335a:	f004 f911 	bl	8007580 <HAL_RCC_OscConfig>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003364:	f000 f84e 	bl	8003404 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003368:	230f      	movs	r3, #15
 800336a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800336c:	2303      	movs	r3, #3
 800336e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003370:	2300      	movs	r3, #0
 8003372:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003374:	2300      	movs	r3, #0
 8003376:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003378:	2300      	movs	r3, #0
 800337a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800337c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003380:	2104      	movs	r1, #4
 8003382:	4618      	mov	r0, r3
 8003384:	f004 fd1c 	bl	8007dc0 <HAL_RCC_ClockConfig>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800338e:	f000 f839 	bl	8003404 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003392:	f246 0343 	movw	r3, #24643	; 0x6043
 8003396:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800339c:	2300      	movs	r3, #0
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80033a0:	2300      	movs	r3, #0
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80033a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80033a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80033aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033ae:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80033b0:	2301      	movs	r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80033b4:	2301      	movs	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80033b8:	2318      	movs	r3, #24
 80033ba:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80033bc:	2307      	movs	r3, #7
 80033be:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80033c0:	2302      	movs	r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80033c4:	2302      	movs	r3, #2
 80033c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80033c8:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80033cc:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 fef9 	bl	80081c8 <HAL_RCCEx_PeriphCLKConfig>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80033dc:	f000 f812 	bl	8003404 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80033e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033e4:	f004 f866 	bl	80074b4 <HAL_PWREx_ControlVoltageScaling>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <SystemClock_Config+0x126>
  {
    Error_Handler();
 80033ee:	f000 f809 	bl	8003404 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80033f2:	f005 f8db 	bl	80085ac <HAL_RCCEx_EnableMSIPLLMode>
}
 80033f6:	bf00      	nop
 80033f8:	37b0      	adds	r7, #176	; 0xb0
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000

08003404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <MX_SPI1_Init+0x74>)
 800341a:	4a1c      	ldr	r2, [pc, #112]	; (800348c <MX_SPI1_Init+0x78>)
 800341c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <MX_SPI1_Init+0x74>)
 8003420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <MX_SPI1_Init+0x74>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <MX_SPI1_Init+0x74>)
 800342e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003432:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <MX_SPI1_Init+0x74>)
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <MX_SPI1_Init+0x74>)
 800343c:	2200      	movs	r2, #0
 800343e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <MX_SPI1_Init+0x74>)
 8003442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003446:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <MX_SPI1_Init+0x74>)
 800344a:	2230      	movs	r2, #48	; 0x30
 800344c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <MX_SPI1_Init+0x74>)
 8003450:	2200      	movs	r2, #0
 8003452:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <MX_SPI1_Init+0x74>)
 8003456:	2200      	movs	r2, #0
 8003458:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <MX_SPI1_Init+0x74>)
 800345c:	2200      	movs	r2, #0
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <MX_SPI1_Init+0x74>)
 8003462:	2207      	movs	r2, #7
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <MX_SPI1_Init+0x74>)
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <MX_SPI1_Init+0x74>)
 800346e:	2208      	movs	r2, #8
 8003470:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003472:	4805      	ldr	r0, [pc, #20]	; (8003488 <MX_SPI1_Init+0x74>)
 8003474:	f005 f99a 	bl	80087ac <HAL_SPI_Init>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800347e:	f7ff ffc1 	bl	8003404 <Error_Handler>
  }

}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20001030 	.word	0x20001030
 800348c:	40013000 	.word	0x40013000

08003490 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a17      	ldr	r2, [pc, #92]	; (800350c <HAL_SPI_MspInit+0x7c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d128      	bne.n	8003504 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <HAL_SPI_MspInit+0x80>)
 80034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b6:	4a16      	ldr	r2, [pc, #88]	; (8003510 <HAL_SPI_MspInit+0x80>)
 80034b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034bc:	6613      	str	r3, [r2, #96]	; 0x60
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <HAL_SPI_MspInit+0x80>)
 80034c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_SPI_MspInit+0x80>)
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	4a10      	ldr	r2, [pc, #64]	; (8003510 <HAL_SPI_MspInit+0x80>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_SPI_MspInit+0x80>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034e2:	23e0      	movs	r3, #224	; 0xe0
 80034e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ee:	2303      	movs	r3, #3
 80034f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034f2:	2305      	movs	r3, #5
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f6:	f107 0314 	add.w	r3, r7, #20
 80034fa:	4619      	mov	r1, r3
 80034fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003500:	f001 ff16 	bl	8005330 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003504:	bf00      	nop
 8003506:	3728      	adds	r7, #40	; 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40013000 	.word	0x40013000
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_MspInit+0x44>)
 800351c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351e:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <HAL_MspInit+0x44>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6613      	str	r3, [r2, #96]	; 0x60
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_MspInit+0x44>)
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_MspInit+0x44>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <HAL_MspInit+0x44>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353c:	6593      	str	r3, [r2, #88]	; 0x58
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_MspInit+0x44>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000

0800355c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800356e:	e7fe      	b.n	800356e <HardFault_Handler+0x4>

08003570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003574:	e7fe      	b.n	8003574 <MemManage_Handler+0x4>

08003576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800357a:	e7fe      	b.n	800357a <BusFault_Handler+0x4>

0800357c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003580:	e7fe      	b.n	8003580 <UsageFault_Handler+0x4>

08003582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035b0:	f000 fc70 	bl	8003e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035b4:	bf00      	nop
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80035bc:	4802      	ldr	r0, [pc, #8]	; (80035c8 <DMA1_Channel6_IRQHandler+0x10>)
 80035be:	f001 fdd7 	bl	8005170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20001154 	.word	0x20001154

080035cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035d0:	4803      	ldr	r0, [pc, #12]	; (80035e0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80035d2:	f005 fd71 	bl	80090b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80035d6:	4803      	ldr	r0, [pc, #12]	; (80035e4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80035d8:	f005 fd6e 	bl	80090b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20001094 	.word	0x20001094
 80035e4:	20001114 	.word	0x20001114

080035e8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <USB_IRQHandler+0x10>)
 80035ee:	f003 f90a 	bl	8006806 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200023a4 	.word	0x200023a4

080035fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e00a      	b.n	8003624 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800360e:	f3af 8000 	nop.w
 8003612:	4601      	mov	r1, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	60ba      	str	r2, [r7, #8]
 800361a:	b2ca      	uxtb	r2, r1
 800361c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3301      	adds	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	dbf0      	blt.n	800360e <_read+0x12>
	}

return len;
 800362c:	687b      	ldr	r3, [r7, #4]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e009      	b.n	800365c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	60ba      	str	r2, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	3301      	adds	r3, #1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	dbf1      	blt.n	8003648 <_write+0x12>
	}
	return len;
 8003664:	687b      	ldr	r3, [r7, #4]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <_close>:

int _close(int file)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
	return -1;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003696:	605a      	str	r2, [r3, #4]
	return 0;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <_isatty>:

int _isatty(int file)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
	return 1;
 80036ae:	2301      	movs	r3, #1
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
	return 0;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <_sbrk+0x50>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <_sbrk+0x16>
		heap_end = &end;
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <_sbrk+0x50>)
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <_sbrk+0x54>)
 80036ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <_sbrk+0x50>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <_sbrk+0x50>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	466a      	mov	r2, sp
 80036fe:	4293      	cmp	r3, r2
 8003700:	d907      	bls.n	8003712 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003702:	f00d fe2b 	bl	801135c <__errno>
 8003706:	4602      	mov	r2, r0
 8003708:	230c      	movs	r3, #12
 800370a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800370c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003710:	e006      	b.n	8003720 <_sbrk+0x48>
	}

	heap_end += incr;
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <_sbrk+0x50>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	4a03      	ldr	r2, [pc, #12]	; (8003728 <_sbrk+0x50>)
 800371c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800371e:	68fb      	ldr	r3, [r7, #12]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200003a0 	.word	0x200003a0
 800372c:	20002620 	.word	0x20002620

08003730 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <SystemInit+0x64>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	4a16      	ldr	r2, [pc, #88]	; (8003794 <SystemInit+0x64>)
 800373c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <SystemInit+0x68>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a13      	ldr	r2, [pc, #76]	; (8003798 <SystemInit+0x68>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003750:	4b11      	ldr	r3, [pc, #68]	; (8003798 <SystemInit+0x68>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <SystemInit+0x68>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <SystemInit+0x68>)
 800375c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003760:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003764:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <SystemInit+0x68>)
 8003768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800376c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <SystemInit+0x68>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <SystemInit+0x68>)
 8003774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003778:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <SystemInit+0x68>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <SystemInit+0x64>)
 8003782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003786:	609a      	str	r2, [r3, #8]
#endif
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000ed00 	.word	0xe000ed00
 8003798:	40021000 	.word	0x40021000

0800379c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b096      	sub	sp, #88	; 0x58
 80037a0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]
 80037ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	611a      	str	r2, [r3, #16]
 80037be:	615a      	str	r2, [r3, #20]
 80037c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	222c      	movs	r2, #44	; 0x2c
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f00d fdfc 	bl	80113c6 <memset>

  htim1.Instance = TIM1;
 80037ce:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <MX_TIM1_Init+0x118>)
 80037d0:	4a39      	ldr	r2, [pc, #228]	; (80038b8 <MX_TIM1_Init+0x11c>)
 80037d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 221;
 80037d4:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <MX_TIM1_Init+0x118>)
 80037d6:	22dd      	movs	r2, #221	; 0xdd
 80037d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037da:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <MX_TIM1_Init+0x118>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80037e0:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <MX_TIM1_Init+0x118>)
 80037e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e8:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <MX_TIM1_Init+0x118>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037ee:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <MX_TIM1_Init+0x118>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f4:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <MX_TIM1_Init+0x118>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037fa:	482e      	ldr	r0, [pc, #184]	; (80038b4 <MX_TIM1_Init+0x118>)
 80037fc:	f005 fbe6 	bl	8008fcc <HAL_TIM_PWM_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003806:	f7ff fdfd 	bl	8003404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003812:	2300      	movs	r3, #0
 8003814:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003816:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800381a:	4619      	mov	r1, r3
 800381c:	4825      	ldr	r0, [pc, #148]	; (80038b4 <MX_TIM1_Init+0x118>)
 800381e:	f006 f9b3 	bl	8009b88 <HAL_TIMEx_MasterConfigSynchronization>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003828:	f7ff fdec 	bl	8003404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800382c:	2360      	movs	r3, #96	; 0x60
 800382e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003834:	2300      	movs	r3, #0
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003838:	2300      	movs	r3, #0
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800383c:	2300      	movs	r3, #0
 800383e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003840:	2300      	movs	r3, #0
 8003842:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003844:	2300      	movs	r3, #0
 8003846:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800384c:	2200      	movs	r2, #0
 800384e:	4619      	mov	r1, r3
 8003850:	4818      	ldr	r0, [pc, #96]	; (80038b4 <MX_TIM1_Init+0x118>)
 8003852:	f005 fd51 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800385c:	f7ff fdd2 	bl	8003404 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003860:	2300      	movs	r3, #0
 8003862:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003864:	2300      	movs	r3, #0
 8003866:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003878:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800387e:	2300      	movs	r3, #0
 8003880:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800388c:	2300      	movs	r3, #0
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003890:	1d3b      	adds	r3, r7, #4
 8003892:	4619      	mov	r1, r3
 8003894:	4807      	ldr	r0, [pc, #28]	; (80038b4 <MX_TIM1_Init+0x118>)
 8003896:	f006 f9dd 	bl	8009c54 <HAL_TIMEx_ConfigBreakDeadTime>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80038a0:	f7ff fdb0 	bl	8003404 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80038a4:	4803      	ldr	r0, [pc, #12]	; (80038b4 <MX_TIM1_Init+0x118>)
 80038a6:	f000 f8f3 	bl	8003a90 <HAL_TIM_MspPostInit>

}
 80038aa:	bf00      	nop
 80038ac:	3758      	adds	r7, #88	; 0x58
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20001094 	.word	0x20001094
 80038b8:	40012c00 	.word	0x40012c00

080038bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038c2:	f107 031c 	add.w	r3, r7, #28
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038ce:	463b      	mov	r3, r7
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	611a      	str	r2, [r3, #16]
 80038dc:	615a      	str	r2, [r3, #20]
 80038de:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <MX_TIM2_Init+0xc4>)
 80038e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80038e8:	4b25      	ldr	r3, [pc, #148]	; (8003980 <MX_TIM2_Init+0xc4>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <MX_TIM2_Init+0xc4>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80038f4:	4b22      	ldr	r3, [pc, #136]	; (8003980 <MX_TIM2_Init+0xc4>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038fa:	4b21      	ldr	r3, [pc, #132]	; (8003980 <MX_TIM2_Init+0xc4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <MX_TIM2_Init+0xc4>)
 8003902:	2200      	movs	r2, #0
 8003904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003906:	481e      	ldr	r0, [pc, #120]	; (8003980 <MX_TIM2_Init+0xc4>)
 8003908:	f005 fb60 	bl	8008fcc <HAL_TIM_PWM_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003912:	f7ff fd77 	bl	8003404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800391e:	f107 031c 	add.w	r3, r7, #28
 8003922:	4619      	mov	r1, r3
 8003924:	4816      	ldr	r0, [pc, #88]	; (8003980 <MX_TIM2_Init+0xc4>)
 8003926:	f006 f92f 	bl	8009b88 <HAL_TIMEx_MasterConfigSynchronization>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003930:	f7ff fd68 	bl	8003404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003934:	2360      	movs	r3, #96	; 0x60
 8003936:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003944:	463b      	mov	r3, r7
 8003946:	2200      	movs	r2, #0
 8003948:	4619      	mov	r1, r3
 800394a:	480d      	ldr	r0, [pc, #52]	; (8003980 <MX_TIM2_Init+0xc4>)
 800394c:	f005 fcd4 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003956:	f7ff fd55 	bl	8003404 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800395a:	463b      	mov	r3, r7
 800395c:	2204      	movs	r2, #4
 800395e:	4619      	mov	r1, r3
 8003960:	4807      	ldr	r0, [pc, #28]	; (8003980 <MX_TIM2_Init+0xc4>)
 8003962:	f005 fcc9 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800396c:	f7ff fd4a 	bl	8003404 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003970:	4803      	ldr	r0, [pc, #12]	; (8003980 <MX_TIM2_Init+0xc4>)
 8003972:	f000 f88d 	bl	8003a90 <HAL_TIM_MspPostInit>

}
 8003976:	bf00      	nop
 8003978:	3728      	adds	r7, #40	; 0x28
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200010d4 	.word	0x200010d4

08003984 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <MX_TIM16_Init+0x48>)
 800398a:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <MX_TIM16_Init+0x4c>)
 800398c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000;
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <MX_TIM16_Init+0x48>)
 8003990:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003994:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <MX_TIM16_Init+0x48>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <MX_TIM16_Init+0x48>)
 800399e:	f242 7210 	movw	r2, #10000	; 0x2710
 80039a2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <MX_TIM16_Init+0x48>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <MX_TIM16_Init+0x48>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <MX_TIM16_Init+0x48>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80039b6:	4805      	ldr	r0, [pc, #20]	; (80039cc <MX_TIM16_Init+0x48>)
 80039b8:	f005 fab2 	bl	8008f20 <HAL_TIM_Base_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80039c2:	f7ff fd1f 	bl	8003404 <Error_Handler>
  }

}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20001114 	.word	0x20001114
 80039d0:	40014400 	.word	0x40014400

080039d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_TIM_PWM_MspInit+0x68>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d114      	bne.n	8003a10 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039e6:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <HAL_TIM_PWM_MspInit+0x6c>)
 80039e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ea:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <HAL_TIM_PWM_MspInit+0x6c>)
 80039ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039f0:	6613      	str	r3, [r2, #96]	; 0x60
 80039f2:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <HAL_TIM_PWM_MspInit+0x6c>)
 80039f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2100      	movs	r1, #0
 8003a02:	2019      	movs	r0, #25
 8003a04:	f001 f97b 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a08:	2019      	movs	r0, #25
 8003a0a:	f001 f994 	bl	8004d36 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003a0e:	e010      	b.n	8003a32 <HAL_TIM_PWM_MspInit+0x5e>
  else if(tim_pwmHandle->Instance==TIM2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d10b      	bne.n	8003a32 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_TIM_PWM_MspInit+0x6c>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <HAL_TIM_PWM_MspInit+0x6c>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_TIM_PWM_MspInit+0x6c>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40021000 	.word	0x40021000

08003a44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <HAL_TIM_Base_MspInit+0x44>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d113      	bne.n	8003a7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <HAL_TIM_Base_MspInit+0x48>)
 8003a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <HAL_TIM_Base_MspInit+0x48>)
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a60:	6613      	str	r3, [r2, #96]	; 0x60
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_TIM_Base_MspInit+0x48>)
 8003a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2100      	movs	r1, #0
 8003a72:	2019      	movs	r0, #25
 8003a74:	f001 f943 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a78:	2019      	movs	r0, #25
 8003a7a:	f001 f95c 	bl	8004d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40014400 	.word	0x40014400
 8003a8c:	40021000 	.word	0x40021000

08003a90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a32      	ldr	r2, [pc, #200]	; (8003b78 <HAL_TIM_MspPostInit+0xe8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d11e      	bne.n	8003af0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab2:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <HAL_TIM_MspPostInit+0xec>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	4a31      	ldr	r2, [pc, #196]	; (8003b7c <HAL_TIM_MspPostInit+0xec>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_TIM_MspPostInit+0xec>)
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_TIM1_CH1_Pin;
 8003aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003adc:	2301      	movs	r3, #1
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_TIM1_CH1_GPIO_Port, &GPIO_InitStruct);
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aea:	f001 fc21 	bl	8005330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003aee:	e03e      	b.n	8003b6e <HAL_TIM_MspPostInit+0xde>
  else if(timHandle->Instance==TIM2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af8:	d139      	bne.n	8003b6e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_TIM_MspPostInit+0xec>)
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	4a1f      	ldr	r2, [pc, #124]	; (8003b7c <HAL_TIM_MspPostInit+0xec>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b06:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <HAL_TIM_MspPostInit+0xec>)
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b12:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <HAL_TIM_MspPostInit+0xec>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	4a19      	ldr	r2, [pc, #100]	; (8003b7c <HAL_TIM_MspPostInit+0xec>)
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1e:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <HAL_TIM_MspPostInit+0xec>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RIGHT_TIM2_CH1_Pin;
 8003b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RIGHT_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4619      	mov	r1, r3
 8003b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4a:	f001 fbf1 	bl	8005330 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LEFT_TIM2_CH2_Pin;
 8003b4e:	2308      	movs	r3, #8
 8003b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b52:	2302      	movs	r3, #2
 8003b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEFT_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	4619      	mov	r1, r3
 8003b68:	4805      	ldr	r0, [pc, #20]	; (8003b80 <HAL_TIM_MspPostInit+0xf0>)
 8003b6a:	f001 fbe1 	bl	8005330 <HAL_GPIO_Init>
}
 8003b6e:	bf00      	nop
 8003b70:	3728      	adds	r7, #40	; 0x28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	48000400 	.word	0x48000400

08003b84 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <MX_USART1_UART_Init+0x5c>)
 8003b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003b90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b96:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003baa:	220c      	movs	r2, #12
 8003bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bc6:	4805      	ldr	r0, [pc, #20]	; (8003bdc <MX_USART1_UART_Init+0x58>)
 8003bc8:	f006 f8da 	bl	8009d80 <HAL_UART_Init>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003bd2:	f7ff fc17 	bl	8003404 <Error_Handler>
  }

}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000119c 	.word	0x2000119c
 8003be0:	40013800 	.word	0x40013800

08003be4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003bea:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <MX_USART2_UART_Init+0x5c>)
 8003bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c02:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c0a:	220c      	movs	r2, #12
 8003c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c26:	4805      	ldr	r0, [pc, #20]	; (8003c3c <MX_USART2_UART_Init+0x58>)
 8003c28:	f006 f8aa 	bl	8009d80 <HAL_UART_Init>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003c32:	f7ff fbe7 	bl	8003404 <Error_Handler>
  }

}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000121c 	.word	0x2000121c
 8003c40:	40004400 	.word	0x40004400

08003c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	; 0x30
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	f107 031c 	add.w	r3, r7, #28
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a47      	ldr	r2, [pc, #284]	; (8003d80 <HAL_UART_MspInit+0x13c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d130      	bne.n	8003cc8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6a:	4a46      	ldr	r2, [pc, #280]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c70:	6613      	str	r3, [r2, #96]	; 0x60
 8003c72:	4b44      	ldr	r3, [pc, #272]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7e:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c82:	4a40      	ldr	r2, [pc, #256]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPS_USART1_TX_Pin|GPS_USART1_RX_Pin;
 8003c96:	23c0      	movs	r3, #192	; 0xc0
 8003c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003caa:	f107 031c 	add.w	r3, r7, #28
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4835      	ldr	r0, [pc, #212]	; (8003d88 <HAL_UART_MspInit+0x144>)
 8003cb2:	f001 fb3d 	bl	8005330 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8003cb6:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <HAL_UART_MspInit+0x148>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b33      	ldr	r3, [pc, #204]	; (8003d8c <HAL_UART_MspInit+0x148>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0220 	orr.w	r2, r2, #32
 8003cc4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003cc6:	e056      	b.n	8003d76 <HAL_UART_MspInit+0x132>
  else if(uartHandle->Instance==USART2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a30      	ldr	r2, [pc, #192]	; (8003d90 <HAL_UART_MspInit+0x14c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d151      	bne.n	8003d76 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	4a2b      	ldr	r2, [pc, #172]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cea:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cf6:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <HAL_UART_MspInit+0x140>)
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TELEM_USART2_TX_Pin|TELEM_USART2_RX_Pin;
 8003d02:	230c      	movs	r3, #12
 8003d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d06:	2302      	movs	r3, #2
 8003d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d12:	2307      	movs	r3, #7
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d16:	f107 031c 	add.w	r3, r7, #28
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d20:	f001 fb06 	bl	8005330 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d26:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <HAL_UART_MspInit+0x154>)
 8003d28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d30:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d36:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d48:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d50:	2220      	movs	r2, #32
 8003d52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d5a:	480e      	ldr	r0, [pc, #56]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d5c:	f001 f8f0 	bl	8004f40 <HAL_DMA_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_UART_MspInit+0x126>
      Error_Handler();
 8003d66:	f7ff fb4d 	bl	8003404 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d6e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003d70:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <HAL_UART_MspInit+0x150>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003d76:	bf00      	nop
 8003d78:	3730      	adds	r7, #48	; 0x30
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40013800 	.word	0x40013800
 8003d84:	40021000 	.word	0x40021000
 8003d88:	48000400 	.word	0x48000400
 8003d8c:	2000119c 	.word	0x2000119c
 8003d90:	40004400 	.word	0x40004400
 8003d94:	20001154 	.word	0x20001154
 8003d98:	4002006c 	.word	0x4002006c

08003d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dd4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003da0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003da2:	e003      	b.n	8003dac <LoopCopyDataInit>

08003da4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003da6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003da8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003daa:	3104      	adds	r1, #4

08003dac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003dac:	480b      	ldr	r0, [pc, #44]	; (8003ddc <LoopForever+0xa>)
	ldr	r3, =_edata
 8003dae:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003db0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003db2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003db4:	d3f6      	bcc.n	8003da4 <CopyDataInit>
	ldr	r2, =_sbss
 8003db6:	4a0b      	ldr	r2, [pc, #44]	; (8003de4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003db8:	e002      	b.n	8003dc0 <LoopFillZerobss>

08003dba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003dba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003dbc:	f842 3b04 	str.w	r3, [r2], #4

08003dc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <LoopForever+0x16>)
	cmp	r2, r3
 8003dc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003dc4:	d3f9      	bcc.n	8003dba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003dc6:	f7ff fcb3 	bl	8003730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dca:	f00d facd 	bl	8011368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003dce:	f7ff fa57 	bl	8003280 <main>

08003dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8003dd2:	e7fe      	b.n	8003dd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003dd4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003dd8:	080154dc 	.word	0x080154dc
	ldr	r0, =_sdata
 8003ddc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003de0:	20000380 	.word	0x20000380
	ldr	r2, =_sbss
 8003de4:	20000380 	.word	0x20000380
	ldr	r3, = _ebss
 8003de8:	2000261c 	.word	0x2000261c

08003dec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003dec:	e7fe      	b.n	8003dec <ADC1_IRQHandler>

08003dee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003df8:	2003      	movs	r0, #3
 8003dfa:	f000 ff75 	bl	8004ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f000 f80e 	bl	8003e20 <HAL_InitTick>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	71fb      	strb	r3, [r7, #7]
 8003e0e:	e001      	b.n	8003e14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e10:	f7ff fb80 	bl	8003514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e14:	79fb      	ldrb	r3, [r7, #7]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <HAL_InitTick+0x68>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d022      	beq.n	8003e7a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003e34:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_InitTick+0x6c>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_InitTick+0x68>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 ff82 	bl	8004d52 <HAL_SYSTICK_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10f      	bne.n	8003e74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b0f      	cmp	r3, #15
 8003e58:	d809      	bhi.n	8003e6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e62:	f000 ff4c 	bl	8004cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <HAL_InitTick+0x70>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	e007      	b.n	8003e7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
 8003e72:	e004      	b.n	8003e7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e001      	b.n	8003e7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000014 	.word	0x20000014
 8003e8c:	2000000c 	.word	0x2000000c
 8003e90:	20000010 	.word	0x20000010

08003e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_IncTick+0x1c>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_IncTick+0x20>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	4a03      	ldr	r2, [pc, #12]	; (8003eb0 <HAL_IncTick+0x1c>)
 8003ea4:	6013      	str	r3, [r2, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	2000129c 	.word	0x2000129c
 8003eb4:	20000014 	.word	0x20000014

08003eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  return uwTick;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <HAL_GetTick+0x14>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	2000129c 	.word	0x2000129c

08003ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ed8:	f7ff ffee 	bl	8003eb8 <HAL_GetTick>
 8003edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee8:	d004      	beq.n	8003ef4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_Delay+0x40>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ef4:	bf00      	nop
 8003ef6:	f7ff ffdf 	bl	8003eb8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d8f7      	bhi.n	8003ef6 <HAL_Delay+0x26>
  {
  }
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000014 	.word	0x20000014

08003f14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f7c:	b490      	push	{r4, r7}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3360      	adds	r3, #96	; 0x60
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <LL_ADC_SetOffset+0x40>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fae:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc90      	pop	{r4, r7}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	03fff000 	.word	0x03fff000

08003fc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003fc0:	b490      	push	{r4, r7}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3360      	adds	r3, #96	; 0x60
 8003fce:	461a      	mov	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc90      	pop	{r4, r7}
 8003fe6:	4770      	bx	lr

08003fe8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003fe8:	b490      	push	{r4, r7}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3360      	adds	r3, #96	; 0x60
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4313      	orrs	r3, r2
 800400c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bc90      	pop	{r4, r7}
 8004016:	4770      	bx	lr

08004018 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004018:	b490      	push	{r4, r7}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3330      	adds	r3, #48	; 0x30
 8004028:	461a      	mov	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	0a1b      	lsrs	r3, r3, #8
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	f003 030c 	and.w	r3, r3, #12
 8004034:	4413      	add	r3, r2
 8004036:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004038:	6822      	ldr	r2, [r4, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	211f      	movs	r1, #31
 8004042:	fa01 f303 	lsl.w	r3, r1, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	401a      	ands	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0e9b      	lsrs	r3, r3, #26
 800404e:	f003 011f 	and.w	r1, r3, #31
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	4313      	orrs	r3, r2
 800405e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bc90      	pop	{r4, r7}
 8004068:	4770      	bx	lr

0800406a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800406a:	b490      	push	{r4, r7}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3314      	adds	r3, #20
 800407a:	461a      	mov	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	0e5b      	lsrs	r3, r3, #25
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	4413      	add	r3, r2
 8004088:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	0d1b      	lsrs	r3, r3, #20
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2107      	movs	r1, #7
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	43db      	mvns	r3, r3
 800409c:	401a      	ands	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	0d1b      	lsrs	r3, r3, #20
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	4313      	orrs	r3, r2
 80040ae:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc90      	pop	{r4, r7}
 80040b8:	4770      	bx	lr
	...

080040bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d4:	43db      	mvns	r3, r3
 80040d6:	401a      	ands	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f003 0318 	and.w	r3, r3, #24
 80040de:	4908      	ldr	r1, [pc, #32]	; (8004100 <LL_ADC_SetChannelSingleDiff+0x44>)
 80040e0:	40d9      	lsrs	r1, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	400b      	ands	r3, r1
 80040e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ea:	431a      	orrs	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	0007ffff 	.word	0x0007ffff

08004104 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004114:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6093      	str	r3, [r2, #8]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413c:	d101      	bne.n	8004142 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004164:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800418c:	d101      	bne.n	8004192 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <LL_ADC_IsEnabled+0x18>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <LL_ADC_IsEnabled+0x1a>
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d101      	bne.n	80041de <LL_ADC_REG_IsConversionOngoing+0x18>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d101      	bne.n	8004204 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004220:	2300      	movs	r3, #0
 8004222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e12a      	b.n	8004484 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7fd fad1 	bl	80017e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ff67 	bl	8004128 <LL_ADC_IsDeepPowerDownEnabled>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff4d 	bl	8004104 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff82 	bl	8004178 <LL_ADC_IsInternalRegulatorEnabled>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d113      	bne.n	80042a2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff66 	bl	8004150 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004284:	4b81      	ldr	r3, [pc, #516]	; (800448c <HAL_ADC_Init+0x278>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	4a81      	ldr	r2, [pc, #516]	; (8004490 <HAL_ADC_Init+0x27c>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	099b      	lsrs	r3, r3, #6
 8004292:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004294:	e002      	b.n	800429c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	3b01      	subs	r3, #1
 800429a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f9      	bne.n	8004296 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ff66 	bl	8004178 <LL_ADC_IsInternalRegulatorEnabled>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10d      	bne.n	80042ce <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	f043 0210 	orr.w	r2, r3, #16
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff ff77 	bl	80041c6 <LL_ADC_REG_IsConversionOngoing>
 80042d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f040 80c5 	bne.w	8004472 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 80c1 	bne.w	8004472 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80042f8:	f043 0202 	orr.w	r2, r3, #2
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff ff4b 	bl	80041a0 <LL_ADC_IsEnabled>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10b      	bne.n	8004328 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004310:	4860      	ldr	r0, [pc, #384]	; (8004494 <HAL_ADC_Init+0x280>)
 8004312:	f7ff ff45 	bl	80041a0 <LL_ADC_IsEnabled>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4619      	mov	r1, r3
 8004322:	485d      	ldr	r0, [pc, #372]	; (8004498 <HAL_ADC_Init+0x284>)
 8004324:	f7ff fdf6 	bl	8003f14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	7e5b      	ldrb	r3, [r3, #25]
 800432c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004332:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004338:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800433e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004346:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d106      	bne.n	8004364 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	3b01      	subs	r3, #1
 800435c:	045b      	lsls	r3, r3, #17
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d009      	beq.n	8004380 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	4b45      	ldr	r3, [pc, #276]	; (800449c <HAL_ADC_Init+0x288>)
 8004388:	4013      	ands	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	69b9      	ldr	r1, [r7, #24]
 8004390:	430b      	orrs	r3, r1
 8004392:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff ff14 	bl	80041c6 <LL_ADC_REG_IsConversionOngoing>
 800439e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff21 	bl	80041ec <LL_ADC_INJ_IsConversionOngoing>
 80043aa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d13d      	bne.n	800442e <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d13a      	bne.n	800442e <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80043bc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043c4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d4:	f023 0302 	bic.w	r3, r3, #2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	69b9      	ldr	r1, [r7, #24]
 80043de:	430b      	orrs	r3, r1
 80043e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d118      	bne.n	800441e <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043f6:	f023 0304 	bic.w	r3, r3, #4
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004402:	4311      	orrs	r1, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004408:	4311      	orrs	r1, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800440e:	430a      	orrs	r2, r1
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	611a      	str	r2, [r3, #16]
 800441c:	e007      	b.n	800442e <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d10c      	bne.n	8004450 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	f023 010f 	bic.w	r1, r3, #15
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	1e5a      	subs	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
 800444e:	e007      	b.n	8004460 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 020f 	bic.w	r2, r2, #15
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	f023 0303 	bic.w	r3, r3, #3
 8004468:	f043 0201 	orr.w	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
 8004470:	e007      	b.n	8004482 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	f043 0210 	orr.w	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004482:	7ffb      	ldrb	r3, [r7, #31]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	2000000c 	.word	0x2000000c
 8004490:	053e2d63 	.word	0x053e2d63
 8004494:	50040000 	.word	0x50040000
 8004498:	50040300 	.word	0x50040300
 800449c:	fff0c007 	.word	0xfff0c007

080044a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b0a6      	sub	sp, #152	; 0x98
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_ConfigChannel+0x22>
 80044be:	2302      	movs	r3, #2
 80044c0:	e338      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x694>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fe79 	bl	80041c6 <LL_ADC_REG_IsConversionOngoing>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f040 831d 	bne.w	8004b16 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	d824      	bhi.n	800452e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	3b02      	subs	r3, #2
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d81b      	bhi.n	8004526 <HAL_ADC_ConfigChannel+0x86>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <HAL_ADC_ConfigChannel+0x54>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004505 	.word	0x08004505
 80044f8:	0800450d 	.word	0x0800450d
 80044fc:	08004515 	.word	0x08004515
 8004500:	0800451d 	.word	0x0800451d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	220c      	movs	r2, #12
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	e011      	b.n	8004530 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2212      	movs	r2, #18
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	e00d      	b.n	8004530 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2218      	movs	r2, #24
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	e009      	b.n	8004530 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	e004      	b.n	8004530 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2206      	movs	r2, #6
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	e000      	b.n	8004530 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800452e:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	f7ff fd6b 	bl	8004018 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fe3d 	bl	80041c6 <LL_ADC_REG_IsConversionOngoing>
 800454c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fe49 	bl	80041ec <LL_ADC_INJ_IsConversionOngoing>
 800455a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800455e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004562:	2b00      	cmp	r3, #0
 8004564:	f040 8148 	bne.w	80047f8 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800456c:	2b00      	cmp	r3, #0
 800456e:	f040 8143 	bne.w	80047f8 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	461a      	mov	r2, r3
 8004580:	f7ff fd73 	bl	800406a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	08db      	lsrs	r3, r3, #3
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d00a      	beq.n	80045bc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6919      	ldr	r1, [r3, #16]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b6:	f7ff fce1 	bl	8003f7c <LL_ADC_SetOffset>
 80045ba:	e11d      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fcfc 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x148>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fcf1 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 80045de:	4603      	mov	r3, r0
 80045e0:	0e9b      	lsrs	r3, r3, #26
 80045e2:	f003 021f 	and.w	r2, r3, #31
 80045e6:	e012      	b.n	800460e <HAL_ADC_ConfigChannel+0x16e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fce6 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045fe:	fa93 f3a3 	rbit	r3, r3
 8004602:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004604:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004616:	2b00      	cmp	r3, #0
 8004618:	d105      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x186>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	0e9b      	lsrs	r3, r3, #26
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	e00a      	b.n	800463c <HAL_ADC_ConfigChannel+0x19c>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8004634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	429a      	cmp	r2, r3
 800463e:	d106      	bne.n	800464e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fccd 	bl	8003fe8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2101      	movs	r1, #1
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fcb3 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 800465a:	4603      	mov	r3, r0
 800465c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <HAL_ADC_ConfigChannel+0x1da>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fca8 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 8004670:	4603      	mov	r3, r0
 8004672:	0e9b      	lsrs	r3, r3, #26
 8004674:	f003 021f 	and.w	r2, r3, #31
 8004678:	e010      	b.n	800469c <HAL_ADC_ConfigChannel+0x1fc>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2101      	movs	r1, #1
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fc9d 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 8004686:	4603      	mov	r3, r0
 8004688:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004694:	fab3 f383 	clz	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x214>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0e9b      	lsrs	r3, r3, #26
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	e00a      	b.n	80046ca <HAL_ADC_ConfigChannel+0x22a>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80046c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c4:	fab3 f383 	clz	r3, r3
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d106      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2200      	movs	r2, #0
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fc86 	bl	8003fe8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2102      	movs	r1, #2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fc6c 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x268>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2102      	movs	r1, #2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fc61 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 80046fe:	4603      	mov	r3, r0
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	f003 021f 	and.w	r2, r3, #31
 8004706:	e010      	b.n	800472a <HAL_ADC_ConfigChannel+0x28a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fc56 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 8004714:	4603      	mov	r3, r0
 8004716:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800471a:	fa93 f3a3 	rbit	r3, r3
 800471e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8004720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004732:	2b00      	cmp	r3, #0
 8004734:	d105      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x2a2>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	0e9b      	lsrs	r3, r3, #26
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	e00a      	b.n	8004758 <HAL_ADC_ConfigChannel+0x2b8>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004752:	fab3 f383 	clz	r3, r3
 8004756:	b2db      	uxtb	r3, r3
 8004758:	429a      	cmp	r2, r3
 800475a:	d106      	bne.n	800476a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2200      	movs	r2, #0
 8004762:	2102      	movs	r1, #2
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fc3f 	bl	8003fe8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2103      	movs	r1, #3
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fc25 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 8004776:	4603      	mov	r3, r0
 8004778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x2f6>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2103      	movs	r1, #3
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fc1a 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 800478c:	4603      	mov	r3, r0
 800478e:	0e9b      	lsrs	r3, r3, #26
 8004790:	f003 021f 	and.w	r2, r3, #31
 8004794:	e010      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x318>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2103      	movs	r1, #3
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fc0f 	bl	8003fc0 <LL_ADC_GetOffsetChannel>
 80047a2:	4603      	mov	r3, r0
 80047a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80047ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b0:	fab3 f383 	clz	r3, r3
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x330>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	0e9b      	lsrs	r3, r3, #26
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	e00a      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x346>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80047de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e0:	fab3 f383 	clz	r3, r3
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d106      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	2103      	movs	r1, #3
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fbf8 	bl	8003fe8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fccf 	bl	80041a0 <LL_ADC_IsEnabled>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 810c 	bne.w	8004a22 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	461a      	mov	r2, r3
 8004818:	f7ff fc50 	bl	80040bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4aa8      	ldr	r2, [pc, #672]	; (8004ac4 <HAL_ADC_ConfigChannel+0x624>)
 8004822:	4293      	cmp	r3, r2
 8004824:	f040 80fd 	bne.w	8004a22 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10b      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x3b0>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	0e9b      	lsrs	r3, r3, #26
 800483e:	3301      	adds	r3, #1
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2b09      	cmp	r3, #9
 8004846:	bf94      	ite	ls
 8004848:	2301      	movls	r3, #1
 800484a:	2300      	movhi	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e012      	b.n	8004876 <HAL_ADC_ConfigChannel+0x3d6>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	fab3 f383 	clz	r3, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	3301      	adds	r3, #1
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	2b09      	cmp	r3, #9
 800486e:	bf94      	ite	ls
 8004870:	2301      	movls	r3, #1
 8004872:	2300      	movhi	r3, #0
 8004874:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004876:	2b00      	cmp	r3, #0
 8004878:	d064      	beq.n	8004944 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004882:	2b00      	cmp	r3, #0
 8004884:	d107      	bne.n	8004896 <HAL_ADC_ConfigChannel+0x3f6>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	0e9b      	lsrs	r3, r3, #26
 800488c:	3301      	adds	r3, #1
 800488e:	069b      	lsls	r3, r3, #26
 8004890:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004894:	e00e      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x414>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	3301      	adds	r3, #1
 80048ae:	069b      	lsls	r3, r3, #26
 80048b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x434>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	0e9b      	lsrs	r3, r3, #26
 80048c6:	3301      	adds	r3, #1
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	2101      	movs	r1, #1
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	e010      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x456>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	fa93 f3a3 	rbit	r3, r3
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	3301      	adds	r3, #1
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2101      	movs	r1, #1
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	ea42 0103 	orr.w	r1, r2, r3
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <HAL_ADC_ConfigChannel+0x47c>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	0e9b      	lsrs	r3, r3, #26
 800490c:	3301      	adds	r3, #1
 800490e:	f003 021f 	and.w	r2, r3, #31
 8004912:	4613      	mov	r3, r2
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	4413      	add	r3, r2
 8004918:	051b      	lsls	r3, r3, #20
 800491a:	e011      	b.n	8004940 <HAL_ADC_ConfigChannel+0x4a0>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	fa93 f3a3 	rbit	r3, r3
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	b2db      	uxtb	r3, r3
 8004932:	3301      	adds	r3, #1
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	4613      	mov	r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4413      	add	r3, r2
 800493e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004940:	430b      	orrs	r3, r1
 8004942:	e069      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x4c0>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0e9b      	lsrs	r3, r3, #26
 8004956:	3301      	adds	r3, #1
 8004958:	069b      	lsls	r3, r3, #26
 800495a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800495e:	e00e      	b.n	800497e <HAL_ADC_ConfigChannel+0x4de>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	fa93 f3a3 	rbit	r3, r3
 800496c:	61fb      	str	r3, [r7, #28]
  return result;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	fab3 f383 	clz	r3, r3
 8004974:	b2db      	uxtb	r3, r3
 8004976:	3301      	adds	r3, #1
 8004978:	069b      	lsls	r3, r3, #26
 800497a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_ADC_ConfigChannel+0x4fe>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	0e9b      	lsrs	r3, r3, #26
 8004990:	3301      	adds	r3, #1
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	2101      	movs	r1, #1
 8004998:	fa01 f303 	lsl.w	r3, r1, r3
 800499c:	e010      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x520>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	617b      	str	r3, [r7, #20]
  return result;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	fab3 f383 	clz	r3, r3
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	3301      	adds	r3, #1
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	2101      	movs	r1, #1
 80049bc:	fa01 f303 	lsl.w	r3, r1, r3
 80049c0:	ea42 0103 	orr.w	r1, r2, r3
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10d      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x54c>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0e9b      	lsrs	r3, r3, #26
 80049d6:	3301      	adds	r3, #1
 80049d8:	f003 021f 	and.w	r2, r3, #31
 80049dc:	4613      	mov	r3, r2
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	4413      	add	r3, r2
 80049e2:	3b1e      	subs	r3, #30
 80049e4:	051b      	lsls	r3, r3, #20
 80049e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049ea:	e014      	b.n	8004a16 <HAL_ADC_ConfigChannel+0x576>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	60fb      	str	r3, [r7, #12]
  return result;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	fab3 f383 	clz	r3, r3
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	f003 021f 	and.w	r2, r3, #31
 8004a08:	4613      	mov	r3, r2
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3b1e      	subs	r3, #30
 8004a10:	051b      	lsls	r3, r3, #20
 8004a12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a16:	430b      	orrs	r3, r1
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	6892      	ldr	r2, [r2, #8]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f7ff fb24 	bl	800406a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b28      	ldr	r3, [pc, #160]	; (8004ac8 <HAL_ADC_ConfigChannel+0x628>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d07c      	beq.n	8004b28 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a2e:	4827      	ldr	r0, [pc, #156]	; (8004acc <HAL_ADC_ConfigChannel+0x62c>)
 8004a30:	f7ff fa96 	bl	8003f60 <LL_ADC_GetCommonPathInternalCh>
 8004a34:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a24      	ldr	r2, [pc, #144]	; (8004ad0 <HAL_ADC_ConfigChannel+0x630>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d126      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x5f0>
 8004a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d120      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a20      	ldr	r2, [pc, #128]	; (8004ad4 <HAL_ADC_ConfigChannel+0x634>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d167      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a60:	4619      	mov	r1, r3
 8004a62:	481a      	ldr	r0, [pc, #104]	; (8004acc <HAL_ADC_ConfigChannel+0x62c>)
 8004a64:	f7ff fa69 	bl	8003f3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004a68:	4b1b      	ldr	r3, [pc, #108]	; (8004ad8 <HAL_ADC_ConfigChannel+0x638>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	099b      	lsrs	r3, r3, #6
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_ADC_ConfigChannel+0x63c>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	099a      	lsrs	r2, r3, #6
 8004a76:	4613      	mov	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a80:	e002      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f9      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a8e:	e04b      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <HAL_ADC_ConfigChannel+0x640>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d124      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x644>
 8004a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d11e      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <HAL_ADC_ConfigChannel+0x634>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d13b      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4804      	ldr	r0, [pc, #16]	; (8004acc <HAL_ADC_ConfigChannel+0x62c>)
 8004abc:	f7ff fa3d 	bl	8003f3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ac0:	e032      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x688>
 8004ac2:	bf00      	nop
 8004ac4:	407f0000 	.word	0x407f0000
 8004ac8:	80080000 	.word	0x80080000
 8004acc:	50040300 	.word	0x50040300
 8004ad0:	c7520000 	.word	0xc7520000
 8004ad4:	50040000 	.word	0x50040000
 8004ad8:	2000000c 	.word	0x2000000c
 8004adc:	053e2d63 	.word	0x053e2d63
 8004ae0:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <HAL_ADC_ConfigChannel+0x69c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d11c      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d116      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a10      	ldr	r2, [pc, #64]	; (8004b40 <HAL_ADC_ConfigChannel+0x6a0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d111      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	480d      	ldr	r0, [pc, #52]	; (8004b44 <HAL_ADC_ConfigChannel+0x6a4>)
 8004b10:	f7ff fa13 	bl	8003f3a <LL_ADC_SetCommonPathInternalCh>
 8004b14:	e008      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b30:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3798      	adds	r7, #152	; 0x98
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	80000001 	.word	0x80000001
 8004b40:	50040000 	.word	0x50040000
 8004b44:	50040300 	.word	0x50040300

08004b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <__NVIC_SetPriorityGrouping+0x44>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b64:	4013      	ands	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b7a:	4a04      	ldr	r2, [pc, #16]	; (8004b8c <__NVIC_SetPriorityGrouping+0x44>)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	60d3      	str	r3, [r2, #12]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	f003 0307 	and.w	r3, r3, #7
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000ed00 	.word	0xe000ed00

08004bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	db0b      	blt.n	8004bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	f003 021f 	and.w	r2, r3, #31
 8004bc4:	4907      	ldr	r1, [pc, #28]	; (8004be4 <__NVIC_EnableIRQ+0x38>)
 8004bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2001      	movs	r0, #1
 8004bce:	fa00 f202 	lsl.w	r2, r0, r2
 8004bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	e000e100 	.word	0xe000e100

08004be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	6039      	str	r1, [r7, #0]
 8004bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	db0a      	blt.n	8004c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	490c      	ldr	r1, [pc, #48]	; (8004c34 <__NVIC_SetPriority+0x4c>)
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	0112      	lsls	r2, r2, #4
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c10:	e00a      	b.n	8004c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	4908      	ldr	r1, [pc, #32]	; (8004c38 <__NVIC_SetPriority+0x50>)
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	3b04      	subs	r3, #4
 8004c20:	0112      	lsls	r2, r2, #4
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	440b      	add	r3, r1
 8004c26:	761a      	strb	r2, [r3, #24]
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000e100 	.word	0xe000e100
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	; 0x24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f1c3 0307 	rsb	r3, r3, #7
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	bf28      	it	cs
 8004c5a:	2304      	movcs	r3, #4
 8004c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3304      	adds	r3, #4
 8004c62:	2b06      	cmp	r3, #6
 8004c64:	d902      	bls.n	8004c6c <NVIC_EncodePriority+0x30>
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3b03      	subs	r3, #3
 8004c6a:	e000      	b.n	8004c6e <NVIC_EncodePriority+0x32>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	43da      	mvns	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	401a      	ands	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	43d9      	mvns	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c94:	4313      	orrs	r3, r2
         );
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3724      	adds	r7, #36	; 0x24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cb4:	d301      	bcc.n	8004cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e00f      	b.n	8004cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cba:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <SysTick_Config+0x40>)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cc2:	210f      	movs	r1, #15
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cc8:	f7ff ff8e 	bl	8004be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <SysTick_Config+0x40>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cd2:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <SysTick_Config+0x40>)
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	e000e010 	.word	0xe000e010

08004ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff29 	bl	8004b48 <__NVIC_SetPriorityGrouping>
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	4603      	mov	r3, r0
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d10:	f7ff ff3e 	bl	8004b90 <__NVIC_GetPriorityGrouping>
 8004d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	6978      	ldr	r0, [r7, #20]
 8004d1c:	f7ff ff8e 	bl	8004c3c <NVIC_EncodePriority>
 8004d20:	4602      	mov	r2, r0
 8004d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ff5d 	bl	8004be8 <__NVIC_SetPriority>
}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff31 	bl	8004bac <__NVIC_EnableIRQ>
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff ffa2 	bl	8004ca4 <SysTick_Config>
 8004d60:	4603      	mov	r3, r0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e054      	b.n	8004e28 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7f5b      	ldrb	r3, [r3, #29]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d105      	bne.n	8004d94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fe f954 	bl	800303c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	791b      	ldrb	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a22      	ldr	r2, [pc, #136]	; (8004e30 <HAL_CRC_Init+0xc4>)
 8004da8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0218 	bic.w	r2, r2, #24
 8004db8:	609a      	str	r2, [r3, #8]
 8004dba:	e00c      	b.n	8004dd6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6899      	ldr	r1, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f834 	bl	8004e34 <HAL_CRCEx_Polynomial_Set>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e028      	b.n	8004e28 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	795b      	ldrb	r3, [r3, #5]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d105      	bne.n	8004dea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004de6:	611a      	str	r2, [r3, #16]
 8004de8:	e004      	b.n	8004df4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6912      	ldr	r2, [r2, #16]
 8004df2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	04c11db7 	.word	0x04c11db7

08004e34 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004e44:	231f      	movs	r3, #31
 8004e46:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004e48:	bf00      	nop
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1e5a      	subs	r2, r3, #1
 8004e4e:	613a      	str	r2, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <HAL_CRCEx_Polynomial_Set+0x34>
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b18      	cmp	r3, #24
 8004e6c:	d846      	bhi.n	8004efc <HAL_CRCEx_Polynomial_Set+0xc8>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004f03 	.word	0x08004f03
 8004e78:	08004efd 	.word	0x08004efd
 8004e7c:	08004efd 	.word	0x08004efd
 8004e80:	08004efd 	.word	0x08004efd
 8004e84:	08004efd 	.word	0x08004efd
 8004e88:	08004efd 	.word	0x08004efd
 8004e8c:	08004efd 	.word	0x08004efd
 8004e90:	08004efd 	.word	0x08004efd
 8004e94:	08004ef1 	.word	0x08004ef1
 8004e98:	08004efd 	.word	0x08004efd
 8004e9c:	08004efd 	.word	0x08004efd
 8004ea0:	08004efd 	.word	0x08004efd
 8004ea4:	08004efd 	.word	0x08004efd
 8004ea8:	08004efd 	.word	0x08004efd
 8004eac:	08004efd 	.word	0x08004efd
 8004eb0:	08004efd 	.word	0x08004efd
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004efd 	.word	0x08004efd
 8004ebc:	08004efd 	.word	0x08004efd
 8004ec0:	08004efd 	.word	0x08004efd
 8004ec4:	08004efd 	.word	0x08004efd
 8004ec8:	08004efd 	.word	0x08004efd
 8004ecc:	08004efd 	.word	0x08004efd
 8004ed0:	08004efd 	.word	0x08004efd
 8004ed4:	08004ed9 	.word	0x08004ed9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d913      	bls.n	8004f06 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ee2:	e010      	b.n	8004f06 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b07      	cmp	r3, #7
 8004ee8:	d90f      	bls.n	8004f0a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004eee:	e00c      	b.n	8004f0a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d90b      	bls.n	8004f0e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004efa:	e008      	b.n	8004f0e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	e006      	b.n	8004f10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f0e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10d      	bne.n	8004f32 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f023 0118 	bic.w	r1, r3, #24
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e098      	b.n	8005084 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	4b4d      	ldr	r3, [pc, #308]	; (8005090 <HAL_DMA_Init+0x150>)
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d80f      	bhi.n	8004f7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b4b      	ldr	r3, [pc, #300]	; (8005094 <HAL_DMA_Init+0x154>)
 8004f66:	4413      	add	r3, r2
 8004f68:	4a4b      	ldr	r2, [pc, #300]	; (8005098 <HAL_DMA_Init+0x158>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	009a      	lsls	r2, r3, #2
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a48      	ldr	r2, [pc, #288]	; (800509c <HAL_DMA_Init+0x15c>)
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8004f7c:	e00e      	b.n	8004f9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b46      	ldr	r3, [pc, #280]	; (80050a0 <HAL_DMA_Init+0x160>)
 8004f86:	4413      	add	r3, r2
 8004f88:	4a43      	ldr	r2, [pc, #268]	; (8005098 <HAL_DMA_Init+0x158>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	009a      	lsls	r2, r3, #2
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a42      	ldr	r2, [pc, #264]	; (80050a4 <HAL_DMA_Init+0x164>)
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ff6:	d039      	beq.n	800506c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	4a27      	ldr	r2, [pc, #156]	; (800509c <HAL_DMA_Init+0x15c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d11a      	bne.n	8005038 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005002:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <HAL_DMA_Init+0x168>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	f003 031c 	and.w	r3, r3, #28
 800500e:	210f      	movs	r1, #15
 8005010:	fa01 f303 	lsl.w	r3, r1, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	4924      	ldr	r1, [pc, #144]	; (80050a8 <HAL_DMA_Init+0x168>)
 8005018:	4013      	ands	r3, r2
 800501a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800501c:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <HAL_DMA_Init+0x168>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6859      	ldr	r1, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	f003 031c 	and.w	r3, r3, #28
 800502c:	fa01 f303 	lsl.w	r3, r1, r3
 8005030:	491d      	ldr	r1, [pc, #116]	; (80050a8 <HAL_DMA_Init+0x168>)
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]
 8005036:	e019      	b.n	800506c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005038:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <HAL_DMA_Init+0x16c>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005040:	f003 031c 	and.w	r3, r3, #28
 8005044:	210f      	movs	r1, #15
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	43db      	mvns	r3, r3
 800504c:	4917      	ldr	r1, [pc, #92]	; (80050ac <HAL_DMA_Init+0x16c>)
 800504e:	4013      	ands	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005052:	4b16      	ldr	r3, [pc, #88]	; (80050ac <HAL_DMA_Init+0x16c>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	f003 031c 	and.w	r3, r3, #28
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	4911      	ldr	r1, [pc, #68]	; (80050ac <HAL_DMA_Init+0x16c>)
 8005068:	4313      	orrs	r3, r2
 800506a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40020407 	.word	0x40020407
 8005094:	bffdfff8 	.word	0xbffdfff8
 8005098:	cccccccd 	.word	0xcccccccd
 800509c:	40020000 	.word	0x40020000
 80050a0:	bffdfbf8 	.word	0xbffdfbf8
 80050a4:	40020400 	.word	0x40020400
 80050a8:	400200a8 	.word	0x400200a8
 80050ac:	400204a8 	.word	0x400204a8

080050b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_DMA_Start_IT+0x20>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e04b      	b.n	8005168 <HAL_DMA_Start_IT+0xb8>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d13a      	bne.n	800515a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f8e0 	bl	80052ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 020e 	orr.w	r2, r2, #14
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e00f      	b.n	8005148 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0204 	bic.w	r2, r2, #4
 8005136:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 020a 	orr.w	r2, r2, #10
 8005146:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e005      	b.n	8005166 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005162:	2302      	movs	r3, #2
 8005164:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005166:	7dfb      	ldrb	r3, [r7, #23]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518c:	f003 031c 	and.w	r3, r3, #28
 8005190:	2204      	movs	r2, #4
 8005192:	409a      	lsls	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4013      	ands	r3, r2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d026      	beq.n	80051ea <HAL_DMA_IRQHandler+0x7a>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d021      	beq.n	80051ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d107      	bne.n	80051c4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0204 	bic.w	r2, r2, #4
 80051c2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c8:	f003 021c 	and.w	r2, r3, #28
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2104      	movs	r1, #4
 80051d2:	fa01 f202 	lsl.w	r2, r1, r2
 80051d6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d071      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80051e8:	e06c      	b.n	80052c4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	f003 031c 	and.w	r3, r3, #28
 80051f2:	2202      	movs	r2, #2
 80051f4:	409a      	lsls	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d02e      	beq.n	800525c <HAL_DMA_IRQHandler+0xec>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d029      	beq.n	800525c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 020a 	bic.w	r2, r2, #10
 8005224:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	f003 021c 	and.w	r2, r3, #28
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2102      	movs	r1, #2
 800523c:	fa01 f202 	lsl.w	r2, r1, r2
 8005240:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d038      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800525a:	e033      	b.n	80052c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005260:	f003 031c 	and.w	r3, r3, #28
 8005264:	2208      	movs	r2, #8
 8005266:	409a      	lsls	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d02a      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x156>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d025      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 020e 	bic.w	r2, r2, #14
 8005288:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	f003 021c 	and.w	r2, r3, #28
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2101      	movs	r1, #1
 8005298:	fa01 f202 	lsl.w	r2, r1, r2
 800529c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
}
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	f003 021c 	and.w	r2, r3, #28
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	2101      	movs	r1, #1
 80052ea:	fa01 f202 	lsl.w	r2, r1, r2
 80052ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d108      	bne.n	8005312 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005310:	e007      	b.n	8005322 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	60da      	str	r2, [r3, #12]
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800533e:	e148      	b.n	80055d2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	2101      	movs	r1, #1
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 813a 	beq.w	80055cc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d003      	beq.n	8005368 <HAL_GPIO_Init+0x38>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b12      	cmp	r3, #18
 8005366:	d123      	bne.n	80053b0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	08da      	lsrs	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3208      	adds	r2, #8
 8005370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005374:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	220f      	movs	r2, #15
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	43db      	mvns	r3, r3
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4013      	ands	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	08da      	lsrs	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3208      	adds	r2, #8
 80053aa:	6939      	ldr	r1, [r7, #16]
 80053ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	2203      	movs	r2, #3
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4013      	ands	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 0203 	and.w	r2, r3, #3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d00b      	beq.n	8005404 <HAL_GPIO_Init+0xd4>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d007      	beq.n	8005404 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053f8:	2b11      	cmp	r3, #17
 80053fa:	d003      	beq.n	8005404 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b12      	cmp	r3, #18
 8005402:	d130      	bne.n	8005466 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	2203      	movs	r2, #3
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	43db      	mvns	r3, r3
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4013      	ands	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800543a:	2201      	movs	r2, #1
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4013      	ands	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	f003 0201 	and.w	r2, r3, #1
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	2203      	movs	r2, #3
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4013      	ands	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 8094 	beq.w	80055cc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a4:	4b52      	ldr	r3, [pc, #328]	; (80055f0 <HAL_GPIO_Init+0x2c0>)
 80054a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a8:	4a51      	ldr	r2, [pc, #324]	; (80055f0 <HAL_GPIO_Init+0x2c0>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	6613      	str	r3, [r2, #96]	; 0x60
 80054b0:	4b4f      	ldr	r3, [pc, #316]	; (80055f0 <HAL_GPIO_Init+0x2c0>)
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054bc:	4a4d      	ldr	r2, [pc, #308]	; (80055f4 <HAL_GPIO_Init+0x2c4>)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	3302      	adds	r3, #2
 80054c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	220f      	movs	r2, #15
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4013      	ands	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054e6:	d00d      	beq.n	8005504 <HAL_GPIO_Init+0x1d4>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a43      	ldr	r2, [pc, #268]	; (80055f8 <HAL_GPIO_Init+0x2c8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <HAL_GPIO_Init+0x1d0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a42      	ldr	r2, [pc, #264]	; (80055fc <HAL_GPIO_Init+0x2cc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d101      	bne.n	80054fc <HAL_GPIO_Init+0x1cc>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e004      	b.n	8005506 <HAL_GPIO_Init+0x1d6>
 80054fc:	2307      	movs	r3, #7
 80054fe:	e002      	b.n	8005506 <HAL_GPIO_Init+0x1d6>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_GPIO_Init+0x1d6>
 8005504:	2300      	movs	r3, #0
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	f002 0203 	and.w	r2, r2, #3
 800550c:	0092      	lsls	r2, r2, #2
 800550e:	4093      	lsls	r3, r2
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005516:	4937      	ldr	r1, [pc, #220]	; (80055f4 <HAL_GPIO_Init+0x2c4>)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	3302      	adds	r3, #2
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005524:	4b36      	ldr	r3, [pc, #216]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	43db      	mvns	r3, r3
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4013      	ands	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005548:	4a2d      	ldr	r2, [pc, #180]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800554e:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	43db      	mvns	r3, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005572:	4a23      	ldr	r2, [pc, #140]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005578:	4b21      	ldr	r3, [pc, #132]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	43db      	mvns	r3, r3
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4013      	ands	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800559c:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055a2:	4b17      	ldr	r3, [pc, #92]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	43db      	mvns	r3, r3
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4013      	ands	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	3301      	adds	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f47f aeaf 	bne.w	8005340 <HAL_GPIO_Init+0x10>
  }
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000
 80055f4:	40010000 	.word	0x40010000
 80055f8:	48000400 	.word	0x48000400
 80055fc:	48000800 	.word	0x48000800
 8005600:	40010400 	.word	0x40010400

08005604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	807b      	strh	r3, [r7, #2]
 8005610:	4613      	mov	r3, r2
 8005612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005614:	787b      	ldrb	r3, [r7, #1]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800561a:	887a      	ldrh	r2, [r7, #2]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005620:	e002      	b.n	8005628 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005622:	887a      	ldrh	r2, [r7, #2]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695a      	ldr	r2, [r3, #20]
 8005644:	887b      	ldrh	r3, [r7, #2]
 8005646:	4013      	ands	r3, r2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800564c:	887a      	ldrh	r2, [r7, #2]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005652:	e002      	b.n	800565a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005654:	887a      	ldrh	r2, [r7, #2]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	619a      	str	r2, [r3, #24]
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e081      	b.n	800577c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7fd fdb3 	bl	80031f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2224      	movs	r2, #36	; 0x24
 8005696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d107      	bne.n	80056e0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056dc:	609a      	str	r2, [r3, #8]
 80056de:	e006      	b.n	80056ee <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d104      	bne.n	8005700 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800570e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005712:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005722:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	ea42 0103 	orr.w	r1, r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	021a      	lsls	r2, r3, #8
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69d9      	ldr	r1, [r3, #28]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1a      	ldr	r2, [r3, #32]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0201 	orr.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	461a      	mov	r2, r3
 8005790:	460b      	mov	r3, r1
 8005792:	817b      	strh	r3, [r7, #10]
 8005794:	4613      	mov	r3, r2
 8005796:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	f040 80da 	bne.w	800595a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_I2C_Master_Transmit+0x30>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e0d3      	b.n	800595c <HAL_I2C_Master_Transmit+0x1d8>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057bc:	f7fe fb7c 	bl	8003eb8 <HAL_GetTick>
 80057c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	2319      	movs	r3, #25
 80057c8:	2201      	movs	r2, #1
 80057ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fcbc 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e0be      	b.n	800595c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2221      	movs	r2, #33	; 0x21
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2210      	movs	r2, #16
 80057ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	893a      	ldrh	r2, [r7, #8]
 80057fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2bff      	cmp	r3, #255	; 0xff
 800580e:	d90e      	bls.n	800582e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	22ff      	movs	r2, #255	; 0xff
 8005814:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581a:	b2da      	uxtb	r2, r3
 800581c:	8979      	ldrh	r1, [r7, #10]
 800581e:	4b51      	ldr	r3, [pc, #324]	; (8005964 <HAL_I2C_Master_Transmit+0x1e0>)
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fe1e 	bl	8006468 <I2C_TransferConfig>
 800582c:	e06c      	b.n	8005908 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	b2da      	uxtb	r2, r3
 800583e:	8979      	ldrh	r1, [r7, #10]
 8005840:	4b48      	ldr	r3, [pc, #288]	; (8005964 <HAL_I2C_Master_Transmit+0x1e0>)
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fe0d 	bl	8006468 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800584e:	e05b      	b.n	8005908 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	6a39      	ldr	r1, [r7, #32]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fcb9 	bl	80061cc <I2C_WaitOnTXISFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e07b      	b.n	800595c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	781a      	ldrb	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d034      	beq.n	8005908 <HAL_I2C_Master_Transmit+0x184>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d130      	bne.n	8005908 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	2200      	movs	r2, #0
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fc4b 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e04d      	b.n	800595c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2bff      	cmp	r3, #255	; 0xff
 80058c8:	d90e      	bls.n	80058e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	8979      	ldrh	r1, [r7, #10]
 80058d8:	2300      	movs	r3, #0
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fdc1 	bl	8006468 <I2C_TransferConfig>
 80058e6:	e00f      	b.n	8005908 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	8979      	ldrh	r1, [r7, #10]
 80058fa:	2300      	movs	r3, #0
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fdb0 	bl	8006468 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d19e      	bne.n	8005850 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	6a39      	ldr	r1, [r7, #32]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fc98 	bl	800624c <I2C_WaitOnSTOPFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e01a      	b.n	800595c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2220      	movs	r2, #32
 800592c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6859      	ldr	r1, [r3, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_I2C_Master_Transmit+0x1e4>)
 800593a:	400b      	ands	r3, r1
 800593c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	e000      	b.n	800595c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
  }
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	80002000 	.word	0x80002000
 8005968:	fe00e800 	.word	0xfe00e800

0800596c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af02      	add	r7, sp, #8
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	607a      	str	r2, [r7, #4]
 8005976:	461a      	mov	r2, r3
 8005978:	460b      	mov	r3, r1
 800597a:	817b      	strh	r3, [r7, #10]
 800597c:	4613      	mov	r3, r2
 800597e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b20      	cmp	r3, #32
 800598a:	f040 80db 	bne.w	8005b44 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_I2C_Master_Receive+0x30>
 8005998:	2302      	movs	r3, #2
 800599a:	e0d4      	b.n	8005b46 <HAL_I2C_Master_Receive+0x1da>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059a4:	f7fe fa88 	bl	8003eb8 <HAL_GetTick>
 80059a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	2319      	movs	r3, #25
 80059b0:	2201      	movs	r2, #1
 80059b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 fbc8 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e0bf      	b.n	8005b46 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2222      	movs	r2, #34	; 0x22
 80059ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2210      	movs	r2, #16
 80059d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	893a      	ldrh	r2, [r7, #8]
 80059e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2bff      	cmp	r3, #255	; 0xff
 80059f6:	d90e      	bls.n	8005a16 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	22ff      	movs	r2, #255	; 0xff
 80059fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	8979      	ldrh	r1, [r7, #10]
 8005a06:	4b52      	ldr	r3, [pc, #328]	; (8005b50 <HAL_I2C_Master_Receive+0x1e4>)
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fd2a 	bl	8006468 <I2C_TransferConfig>
 8005a14:	e06d      	b.n	8005af2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	8979      	ldrh	r1, [r7, #10]
 8005a28:	4b49      	ldr	r3, [pc, #292]	; (8005b50 <HAL_I2C_Master_Receive+0x1e4>)
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fd19 	bl	8006468 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005a36:	e05c      	b.n	8005af2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	6a39      	ldr	r1, [r7, #32]
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 fc41 	bl	80062c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e07c      	b.n	8005b46 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d034      	beq.n	8005af2 <HAL_I2C_Master_Receive+0x186>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d130      	bne.n	8005af2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	2200      	movs	r2, #0
 8005a98:	2180      	movs	r1, #128	; 0x80
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fb56 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e04d      	b.n	8005b46 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2bff      	cmp	r3, #255	; 0xff
 8005ab2:	d90e      	bls.n	8005ad2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	22ff      	movs	r2, #255	; 0xff
 8005ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	8979      	ldrh	r1, [r7, #10]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fccc 	bl	8006468 <I2C_TransferConfig>
 8005ad0:	e00f      	b.n	8005af2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	8979      	ldrh	r1, [r7, #10]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fcbb 	bl	8006468 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d19d      	bne.n	8005a38 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	6a39      	ldr	r1, [r7, #32]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fba3 	bl	800624c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e01a      	b.n	8005b46 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2220      	movs	r2, #32
 8005b16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <HAL_I2C_Master_Receive+0x1e8>)
 8005b24:	400b      	ands	r3, r1
 8005b26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
  }
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	80002400 	.word	0x80002400
 8005b54:	fe00e800 	.word	0xfe00e800

08005b58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	4608      	mov	r0, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	461a      	mov	r2, r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	817b      	strh	r3, [r7, #10]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	813b      	strh	r3, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	f040 80f9 	bne.w	8005d72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_I2C_Mem_Write+0x34>
 8005b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d105      	bne.n	8005b98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0ed      	b.n	8005d74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_I2C_Mem_Write+0x4e>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e0e6      	b.n	8005d74 <HAL_I2C_Mem_Write+0x21c>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bae:	f7fe f983 	bl	8003eb8 <HAL_GetTick>
 8005bb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	2319      	movs	r3, #25
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fac3 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0d1      	b.n	8005d74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2221      	movs	r2, #33	; 0x21
 8005bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2240      	movs	r2, #64	; 0x40
 8005bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a3a      	ldr	r2, [r7, #32]
 8005bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bf8:	88f8      	ldrh	r0, [r7, #6]
 8005bfa:	893a      	ldrh	r2, [r7, #8]
 8005bfc:	8979      	ldrh	r1, [r7, #10]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	4603      	mov	r3, r0
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f9d3 	bl	8005fb4 <I2C_RequestMemoryWrite>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0a9      	b.n	8005d74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2bff      	cmp	r3, #255	; 0xff
 8005c28:	d90e      	bls.n	8005c48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	22ff      	movs	r2, #255	; 0xff
 8005c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	8979      	ldrh	r1, [r7, #10]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fc11 	bl	8006468 <I2C_TransferConfig>
 8005c46:	e00f      	b.n	8005c68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	8979      	ldrh	r1, [r7, #10]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fc00 	bl	8006468 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 faad 	bl	80061cc <I2C_WaitOnTXISFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e07b      	b.n	8005d74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	781a      	ldrb	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d034      	beq.n	8005d20 <HAL_I2C_Mem_Write+0x1c8>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d130      	bne.n	8005d20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2180      	movs	r1, #128	; 0x80
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 fa3f 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e04d      	b.n	8005d74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2bff      	cmp	r3, #255	; 0xff
 8005ce0:	d90e      	bls.n	8005d00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	22ff      	movs	r2, #255	; 0xff
 8005ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	8979      	ldrh	r1, [r7, #10]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 fbb5 	bl	8006468 <I2C_TransferConfig>
 8005cfe:	e00f      	b.n	8005d20 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	8979      	ldrh	r1, [r7, #10]
 8005d12:	2300      	movs	r3, #0
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 fba4 	bl	8006468 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d19e      	bne.n	8005c68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 fa8c 	bl	800624c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e01a      	b.n	8005d74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2220      	movs	r2, #32
 8005d44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6859      	ldr	r1, [r3, #4]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <HAL_I2C_Mem_Write+0x224>)
 8005d52:	400b      	ands	r3, r1
 8005d54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e000      	b.n	8005d74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005d72:	2302      	movs	r3, #2
  }
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	fe00e800 	.word	0xfe00e800

08005d80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	4608      	mov	r0, r1
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4603      	mov	r3, r0
 8005d90:	817b      	strh	r3, [r7, #10]
 8005d92:	460b      	mov	r3, r1
 8005d94:	813b      	strh	r3, [r7, #8]
 8005d96:	4613      	mov	r3, r2
 8005d98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	f040 80fd 	bne.w	8005fa2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_I2C_Mem_Read+0x34>
 8005dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e0f1      	b.n	8005fa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <HAL_I2C_Mem_Read+0x4e>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e0ea      	b.n	8005fa4 <HAL_I2C_Mem_Read+0x224>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dd6:	f7fe f86f 	bl	8003eb8 <HAL_GetTick>
 8005dda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	2319      	movs	r3, #25
 8005de2:	2201      	movs	r2, #1
 8005de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f9af 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0d5      	b.n	8005fa4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2222      	movs	r2, #34	; 0x22
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2240      	movs	r2, #64	; 0x40
 8005e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e20:	88f8      	ldrh	r0, [r7, #6]
 8005e22:	893a      	ldrh	r2, [r7, #8]
 8005e24:	8979      	ldrh	r1, [r7, #10]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	4603      	mov	r3, r0
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f913 	bl	800605c <I2C_RequestMemoryRead>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0ad      	b.n	8005fa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2bff      	cmp	r3, #255	; 0xff
 8005e50:	d90e      	bls.n	8005e70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	8979      	ldrh	r1, [r7, #10]
 8005e60:	4b52      	ldr	r3, [pc, #328]	; (8005fac <HAL_I2C_Mem_Read+0x22c>)
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fafd 	bl	8006468 <I2C_TransferConfig>
 8005e6e:	e00f      	b.n	8005e90 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	8979      	ldrh	r1, [r7, #10]
 8005e82:	4b4a      	ldr	r3, [pc, #296]	; (8005fac <HAL_I2C_Mem_Read+0x22c>)
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 faec 	bl	8006468 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	2200      	movs	r2, #0
 8005e98:	2104      	movs	r1, #4
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f956 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e07c      	b.n	8005fa4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d034      	beq.n	8005f50 <HAL_I2C_Mem_Read+0x1d0>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d130      	bne.n	8005f50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2180      	movs	r1, #128	; 0x80
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f927 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e04d      	b.n	8005fa4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2bff      	cmp	r3, #255	; 0xff
 8005f10:	d90e      	bls.n	8005f30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	22ff      	movs	r2, #255	; 0xff
 8005f16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	8979      	ldrh	r1, [r7, #10]
 8005f20:	2300      	movs	r3, #0
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fa9d 	bl	8006468 <I2C_TransferConfig>
 8005f2e:	e00f      	b.n	8005f50 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	8979      	ldrh	r1, [r7, #10]
 8005f42:	2300      	movs	r3, #0
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fa8c 	bl	8006468 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d19a      	bne.n	8005e90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f974 	bl	800624c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e01a      	b.n	8005fa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2220      	movs	r2, #32
 8005f74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6859      	ldr	r1, [r3, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <HAL_I2C_Mem_Read+0x230>)
 8005f82:	400b      	ands	r3, r1
 8005f84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e000      	b.n	8005fa4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005fa2:	2302      	movs	r3, #2
  }
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	80002400 	.word	0x80002400
 8005fb0:	fe00e800 	.word	0xfe00e800

08005fb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	817b      	strh	r3, [r7, #10]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	813b      	strh	r3, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	8979      	ldrh	r1, [r7, #10]
 8005fd4:	4b20      	ldr	r3, [pc, #128]	; (8006058 <I2C_RequestMemoryWrite+0xa4>)
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 fa43 	bl	8006468 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	69b9      	ldr	r1, [r7, #24]
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f8f0 	bl	80061cc <I2C_WaitOnTXISFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e02c      	b.n	8006050 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d105      	bne.n	8006008 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ffc:	893b      	ldrh	r3, [r7, #8]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	629a      	str	r2, [r3, #40]	; 0x28
 8006006:	e015      	b.n	8006034 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006008:	893b      	ldrh	r3, [r7, #8]
 800600a:	0a1b      	lsrs	r3, r3, #8
 800600c:	b29b      	uxth	r3, r3
 800600e:	b2da      	uxtb	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	69b9      	ldr	r1, [r7, #24]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 f8d6 	bl	80061cc <I2C_WaitOnTXISFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e012      	b.n	8006050 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800602a:	893b      	ldrh	r3, [r7, #8]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2200      	movs	r2, #0
 800603c:	2180      	movs	r1, #128	; 0x80
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f884 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	80002000 	.word	0x80002000

0800605c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	461a      	mov	r2, r3
 800606a:	4603      	mov	r3, r0
 800606c:	817b      	strh	r3, [r7, #10]
 800606e:	460b      	mov	r3, r1
 8006070:	813b      	strh	r3, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	b2da      	uxtb	r2, r3
 800607a:	8979      	ldrh	r1, [r7, #10]
 800607c:	4b20      	ldr	r3, [pc, #128]	; (8006100 <I2C_RequestMemoryRead+0xa4>)
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	2300      	movs	r3, #0
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f9f0 	bl	8006468 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	69b9      	ldr	r1, [r7, #24]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f89d 	bl	80061cc <I2C_WaitOnTXISFlagUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e02c      	b.n	80060f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d105      	bne.n	80060ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060a2:	893b      	ldrh	r3, [r7, #8]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28
 80060ac:	e015      	b.n	80060da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80060ae:	893b      	ldrh	r3, [r7, #8]
 80060b0:	0a1b      	lsrs	r3, r3, #8
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	69b9      	ldr	r1, [r7, #24]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f883 	bl	80061cc <I2C_WaitOnTXISFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e012      	b.n	80060f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060d0:	893b      	ldrh	r3, [r7, #8]
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2200      	movs	r2, #0
 80060e2:	2140      	movs	r1, #64	; 0x40
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f831 	bl	800614c <I2C_WaitOnFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	80002000 	.word	0x80002000

08006104 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	d103      	bne.n	8006122 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b01      	cmp	r3, #1
 800612e:	d007      	beq.n	8006140 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0201 	orr.w	r2, r2, #1
 800613e:	619a      	str	r2, [r3, #24]
  }
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800615c:	e022      	b.n	80061a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006164:	d01e      	beq.n	80061a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006166:	f7fd fea7 	bl	8003eb8 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d302      	bcc.n	800617c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d113      	bne.n	80061a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006180:	f043 0220 	orr.w	r2, r3, #32
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e00f      	b.n	80061c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4013      	ands	r3, r2
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d0cd      	beq.n	800615e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061d8:	e02c      	b.n	8006234 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f8dc 	bl	800639c <I2C_IsAcknowledgeFailed>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e02a      	b.n	8006244 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f4:	d01e      	beq.n	8006234 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f6:	f7fd fe5f 	bl	8003eb8 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	d302      	bcc.n	800620c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d113      	bne.n	8006234 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006210:	f043 0220 	orr.w	r2, r3, #32
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e007      	b.n	8006244 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b02      	cmp	r3, #2
 8006240:	d1cb      	bne.n	80061da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006258:	e028      	b.n	80062ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f89c 	bl	800639c <I2C_IsAcknowledgeFailed>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e026      	b.n	80062bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626e:	f7fd fe23 	bl	8003eb8 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	d302      	bcc.n	8006284 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d113      	bne.n	80062ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006288:	f043 0220 	orr.w	r2, r3, #32
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e007      	b.n	80062bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d1cf      	bne.n	800625a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062d0:	e055      	b.n	800637e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f860 	bl	800639c <I2C_IsAcknowledgeFailed>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e053      	b.n	800638e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d129      	bne.n	8006348 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d105      	bne.n	800630e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	e03f      	b.n	800638e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2220      	movs	r2, #32
 8006314:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6859      	ldr	r1, [r3, #4]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b1d      	ldr	r3, [pc, #116]	; (8006398 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006322:	400b      	ands	r3, r1
 8006324:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e022      	b.n	800638e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006348:	f7fd fdb6 	bl	8003eb8 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	429a      	cmp	r2, r3
 8006356:	d302      	bcc.n	800635e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10f      	bne.n	800637e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006362:	f043 0220 	orr.w	r2, r3, #32
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e007      	b.n	800638e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b04      	cmp	r3, #4
 800638a:	d1a2      	bne.n	80062d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	fe00e800 	.word	0xfe00e800

0800639c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d151      	bne.n	800645a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063b6:	e022      	b.n	80063fe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063be:	d01e      	beq.n	80063fe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c0:	f7fd fd7a 	bl	8003eb8 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d302      	bcc.n	80063d6 <I2C_IsAcknowledgeFailed+0x3a>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d113      	bne.n	80063fe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	f043 0220 	orr.w	r2, r3, #32
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e02e      	b.n	800645c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	2b20      	cmp	r3, #32
 800640a:	d1d5      	bne.n	80063b8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2210      	movs	r2, #16
 8006412:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2220      	movs	r2, #32
 800641a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7ff fe71 	bl	8006104 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6859      	ldr	r1, [r3, #4]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <I2C_IsAcknowledgeFailed+0xc8>)
 800642e:	400b      	ands	r3, r1
 8006430:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006436:	f043 0204 	orr.w	r2, r3, #4
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	fe00e800 	.word	0xfe00e800

08006468 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	607b      	str	r3, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	817b      	strh	r3, [r7, #10]
 8006476:	4613      	mov	r3, r2
 8006478:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	0d5b      	lsrs	r3, r3, #21
 8006484:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006488:	4b0d      	ldr	r3, [pc, #52]	; (80064c0 <I2C_TransferConfig+0x58>)
 800648a:	430b      	orrs	r3, r1
 800648c:	43db      	mvns	r3, r3
 800648e:	ea02 0103 	and.w	r1, r2, r3
 8006492:	897b      	ldrh	r3, [r7, #10]
 8006494:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006498:	7a7b      	ldrb	r3, [r7, #9]
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	431a      	orrs	r2, r3
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	03ff63ff 	.word	0x03ff63ff

080064c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d138      	bne.n	800654c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e032      	b.n	800654e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2224      	movs	r2, #36	; 0x24
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006516:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6819      	ldr	r1, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0201 	orr.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	e000      	b.n	800654e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800654c:	2302      	movs	r3, #2
  }
}
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b20      	cmp	r3, #32
 800656e:	d139      	bne.n	80065e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800657a:	2302      	movs	r3, #2
 800657c:	e033      	b.n	80065e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2224      	movs	r2, #36	; 0x24
 800658a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0201 	bic.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	e000      	b.n	80065e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065e4:	2302      	movs	r3, #2
  }
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80065f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f4:	b08b      	sub	sp, #44	; 0x2c
 80065f6:	af06      	add	r7, sp, #24
 80065f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e0da      	b.n	80067ba <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f00a fb21 	bl	8010c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2203      	movs	r2, #3
 8006622:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f004 fb93 	bl	800ad56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	603b      	str	r3, [r7, #0]
 8006636:	687e      	ldr	r6, [r7, #4]
 8006638:	466d      	mov	r5, sp
 800663a:	f106 0410 	add.w	r4, r6, #16
 800663e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	602b      	str	r3, [r5, #0]
 8006646:	1d33      	adds	r3, r6, #4
 8006648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800664a:	6838      	ldr	r0, [r7, #0]
 800664c:	f004 fb59 	bl	800ad02 <USB_CoreInit>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e0ab      	b.n	80067ba <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2100      	movs	r1, #0
 8006668:	4618      	mov	r0, r3
 800666a:	f004 fb8f 	bl	800ad8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
 8006672:	e035      	b.n	80066e0 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	015b      	lsls	r3, r3, #5
 800667a:	4413      	add	r3, r2
 800667c:	3329      	adds	r3, #41	; 0x29
 800667e:	2201      	movs	r2, #1
 8006680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	015b      	lsls	r3, r3, #5
 8006688:	4413      	add	r3, r2
 800668a:	3328      	adds	r3, #40	; 0x28
 800668c:	7bfa      	ldrb	r2, [r7, #15]
 800668e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	7bfa      	ldrb	r2, [r7, #15]
 8006694:	b291      	uxth	r1, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	015b      	lsls	r3, r3, #5
 800669a:	4413      	add	r3, r2
 800669c:	3336      	adds	r3, #54	; 0x36
 800669e:	460a      	mov	r2, r1
 80066a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	015b      	lsls	r3, r3, #5
 80066a8:	4413      	add	r3, r2
 80066aa:	332b      	adds	r3, #43	; 0x2b
 80066ac:	2200      	movs	r2, #0
 80066ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	015b      	lsls	r3, r3, #5
 80066b6:	4413      	add	r3, r2
 80066b8:	3338      	adds	r3, #56	; 0x38
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	015b      	lsls	r3, r3, #5
 80066c4:	4413      	add	r3, r2
 80066c6:	333c      	adds	r3, #60	; 0x3c
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	3302      	adds	r3, #2
 80066d2:	015b      	lsls	r3, r3, #5
 80066d4:	4413      	add	r3, r2
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	3301      	adds	r3, #1
 80066de:	73fb      	strb	r3, [r7, #15]
 80066e0:	7bfa      	ldrb	r2, [r7, #15]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d3c4      	bcc.n	8006674 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ea:	2300      	movs	r3, #0
 80066ec:	73fb      	strb	r3, [r7, #15]
 80066ee:	e031      	b.n	8006754 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	015b      	lsls	r3, r3, #5
 80066f6:	4413      	add	r3, r2
 80066f8:	f203 1329 	addw	r3, r3, #297	; 0x129
 80066fc:	2200      	movs	r2, #0
 80066fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	015b      	lsls	r3, r3, #5
 8006706:	4413      	add	r3, r2
 8006708:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800670c:	7bfa      	ldrb	r2, [r7, #15]
 800670e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	015b      	lsls	r3, r3, #5
 8006716:	4413      	add	r3, r2
 8006718:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800671c:	2200      	movs	r2, #0
 800671e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	015b      	lsls	r3, r3, #5
 8006726:	4413      	add	r3, r2
 8006728:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	015b      	lsls	r3, r3, #5
 8006736:	4413      	add	r3, r2
 8006738:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	330a      	adds	r3, #10
 8006746:	015b      	lsls	r3, r3, #5
 8006748:	4413      	add	r3, r2
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	3301      	adds	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
 8006754:	7bfa      	ldrb	r2, [r7, #15]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	429a      	cmp	r2, r3
 800675c:	d3c8      	bcc.n	80066f0 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	687e      	ldr	r6, [r7, #4]
 8006766:	466d      	mov	r5, sp
 8006768:	f106 0410 	add.w	r4, r6, #16
 800676c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800676e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	1d33      	adds	r3, r6, #4
 8006776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006778:	6838      	ldr	r0, [r7, #0]
 800677a:	f004 fb14 	bl	800ada6 <USB_DevInit>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e014      	b.n	80067ba <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d102      	bne.n	80067ae <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fe3a 	bl	8007422 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f005 fb5b 	bl	800be6e <USB_DevDisconnect>

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_PCD_Start+0x16>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e012      	b.n	80067fe <HAL_PCD_Start+0x3c>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f005 fb2b 	bl	800be40 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f004 fa98 	bl	800ad24 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f005 fb40 	bl	800be98 <USB_ReadInterrupts>
 8006818:	4603      	mov	r3, r0
 800681a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800681e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006822:	d102      	bne.n	800682a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fb33 	bl	8006e90 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f005 fb32 	bl	800be98 <USB_ReadInterrupts>
 8006834:	4603      	mov	r3, r0
 8006836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800683a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683e:	d112      	bne.n	8006866 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006852:	b292      	uxth	r2, r2
 8006854:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f00a fa76 	bl	8010d4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800685e:	2100      	movs	r1, #0
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f91e 	bl	8006aa2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f005 fb14 	bl	800be98 <USB_ReadInterrupts>
 8006870:	4603      	mov	r3, r0
 8006872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800687a:	d10b      	bne.n	8006894 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006884:	b29a      	uxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800688e:	b292      	uxth	r2, r2
 8006890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f005 fafd 	bl	800be98 <USB_ReadInterrupts>
 800689e:	4603      	mov	r3, r0
 80068a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a8:	d10b      	bne.n	80068c2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068bc:	b292      	uxth	r2, r2
 80068be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f005 fae6 	bl	800be98 <USB_ReadInterrupts>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d6:	d133      	bne.n	8006940 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0204 	bic.w	r2, r2, #4
 80068ea:	b292      	uxth	r2, r2
 80068ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0208 	bic.w	r2, r2, #8
 8006902:	b292      	uxth	r2, r2
 8006904:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800690e:	2b01      	cmp	r3, #1
 8006910:	d107      	bne.n	8006922 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800691a:	2100      	movs	r1, #0
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f00a fcc1 	bl	80112a4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f00a fa4a 	bl	8010dbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006930:	b29a      	uxth	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800693a:	b292      	uxth	r2, r2
 800693c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f005 faa7 	bl	800be98 <USB_ReadInterrupts>
 800694a:	4603      	mov	r3, r0
 800694c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006954:	d126      	bne.n	80069a4 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800695e:	b29a      	uxth	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0208 	orr.w	r2, r2, #8
 8006968:	b292      	uxth	r2, r2
 800696a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006976:	b29a      	uxth	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006980:	b292      	uxth	r2, r2
 8006982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800698e:	b29a      	uxth	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0204 	orr.w	r2, r2, #4
 8006998:	b292      	uxth	r2, r2
 800699a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f00a f9f2 	bl	8010d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f005 fa75 	bl	800be98 <USB_ReadInterrupts>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b4:	2b80      	cmp	r3, #128	; 0x80
 80069b6:	d13f      	bne.n	8006a38 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ca:	b292      	uxth	r2, r2
 80069cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d12b      	bne.n	8006a32 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0204 	orr.w	r2, r2, #4
 80069ec:	b292      	uxth	r2, r2
 80069ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0208 	orr.w	r2, r2, #8
 8006a04:	b292      	uxth	r2, r2
 8006a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	089b      	lsrs	r3, r3, #2
 8006a1e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006a28:	2101      	movs	r1, #1
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f00a fc3a 	bl	80112a4 <HAL_PCDEx_LPM_Callback>
 8006a30:	e002      	b.n	8006a38 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f00a f9a8 	bl	8010d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f005 fa2b 	bl	800be98 <USB_ReadInterrupts>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d10e      	bne.n	8006a6c <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006a60:	b292      	uxth	r2, r2
 8006a62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f00a f961 	bl	8010d2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f005 fa11 	bl	800be98 <USB_ReadInterrupts>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a80:	d10b      	bne.n	8006a9a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a94:	b292      	uxth	r2, r2
 8006a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_PCD_SetAddress+0x1a>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e013      	b.n	8006ae4 <HAL_PCD_SetAddress+0x42>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	78fa      	ldrb	r2, [r7, #3]
 8006ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	78fa      	ldrb	r2, [r7, #3]
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f005 f99f 	bl	800be18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	4608      	mov	r0, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	4603      	mov	r3, r0
 8006afc:	70fb      	strb	r3, [r7, #3]
 8006afe:	460b      	mov	r3, r1
 8006b00:	803b      	strh	r3, [r7, #0]
 8006b02:	4613      	mov	r3, r2
 8006b04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	da0b      	bge.n	8006b2a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b12:	78fb      	ldrb	r3, [r7, #3]
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	015b      	lsls	r3, r3, #5
 8006b1a:	3328      	adds	r3, #40	; 0x28
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	4413      	add	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	705a      	strb	r2, [r3, #1]
 8006b28:	e00b      	b.n	8006b42 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	015b      	lsls	r3, r3, #5
 8006b32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4413      	add	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006b4e:	883a      	ldrh	r2, [r7, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	78ba      	ldrb	r2, [r7, #2]
 8006b58:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006b6c:	78bb      	ldrb	r3, [r7, #2]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d102      	bne.n	8006b78 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_PCD_EP_Open+0x9a>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e00e      	b.n	8006ba4 <HAL_PCD_EP_Open+0xb8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f004 f92b 	bl	800adf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	da0b      	bge.n	8006bd8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	015b      	lsls	r3, r3, #5
 8006bc8:	3328      	adds	r3, #40	; 0x28
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	705a      	strb	r2, [r3, #1]
 8006bd6:	e00b      	b.n	8006bf0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	015b      	lsls	r3, r3, #5
 8006be0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4413      	add	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_PCD_EP_Close+0x5e>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e00e      	b.n	8006c28 <HAL_PCD_EP_Close+0x7c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f004 fbd9 	bl	800b3d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c40:	7afb      	ldrb	r3, [r7, #11]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	015b      	lsls	r3, r3, #5
 8006c48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2200      	movs	r2, #0
 8006c62:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2200      	movs	r2, #0
 8006c68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c6a:	7afb      	ldrb	r3, [r7, #11]
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c76:	7afb      	ldrb	r3, [r7, #11]
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d106      	bne.n	8006c8e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6979      	ldr	r1, [r7, #20]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f004 fd38 	bl	800b6fc <USB_EPStartXfer>
 8006c8c:	e005      	b.n	8006c9a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6979      	ldr	r1, [r7, #20]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f004 fd31 	bl	800b6fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	330a      	adds	r3, #10
 8006cba:	015b      	lsls	r3, r3, #5
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	681b      	ldr	r3, [r3, #0]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b086      	sub	sp, #24
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cde:	7afb      	ldrb	r3, [r7, #11]
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	015b      	lsls	r3, r3, #5
 8006ce6:	3328      	adds	r3, #40	; 0x28
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4413      	add	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2201      	movs	r2, #1
 8006d04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d12:	7afb      	ldrb	r3, [r7, #11]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6979      	ldr	r1, [r7, #20]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f004 fcea 	bl	800b6fc <USB_EPStartXfer>
 8006d28:	e005      	b.n	8006d36 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6979      	ldr	r1, [r7, #20]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f004 fce3 	bl	800b6fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	f003 0207 	and.w	r2, r3, #7
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d901      	bls.n	8006d5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e046      	b.n	8006dec <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	da0b      	bge.n	8006d7e <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d66:	78fb      	ldrb	r3, [r7, #3]
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	015b      	lsls	r3, r3, #5
 8006d6e:	3328      	adds	r3, #40	; 0x28
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	4413      	add	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	705a      	strb	r2, [r3, #1]
 8006d7c:	e009      	b.n	8006d92 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	015b      	lsls	r3, r3, #5
 8006d82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <HAL_PCD_EP_SetStall+0x72>
 8006dae:	2302      	movs	r3, #2
 8006db0:	e01c      	b.n	8006dec <HAL_PCD_EP_SetStall+0xac>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68f9      	ldr	r1, [r7, #12]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f004 ff53 	bl	800bc6c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d108      	bne.n	8006de2 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4610      	mov	r0, r2
 8006dde:	f005 f86b 	bl	800beb8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	f003 020f 	and.w	r2, r3, #15
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d901      	bls.n	8006e12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e03a      	b.n	8006e88 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	da0b      	bge.n	8006e32 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	015b      	lsls	r3, r3, #5
 8006e22:	3328      	adds	r3, #40	; 0x28
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	4413      	add	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	705a      	strb	r2, [r3, #1]
 8006e30:	e00b      	b.n	8006e4a <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	015b      	lsls	r3, r3, #5
 8006e3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	4413      	add	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <HAL_PCD_EP_ClrStall+0x76>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e00e      	b.n	8006e88 <HAL_PCD_EP_ClrStall+0x94>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f004 ff39 	bl	800bcf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006e90:	b590      	push	{r4, r7, lr}
 8006e92:	b089      	sub	sp, #36	; 0x24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006e98:	e274      	b.n	8007384 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ea2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006ea4:	8afb      	ldrh	r3, [r7, #22]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8006eae:	7d7b      	ldrb	r3, [r7, #21]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f040 813c 	bne.w	800712e <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006eb6:	8afb      	ldrh	r3, [r7, #22]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d14f      	bne.n	8006f60 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed0:	b29c      	uxth	r4, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8006eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3328      	adds	r3, #40	; 0x28
 8006ee6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	4413      	add	r3, r2
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	4413      	add	r3, r2
 8006f02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	695a      	ldr	r2, [r3, #20]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	441a      	add	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f009 feed 	bl	8010d00 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8228 	beq.w	8007384 <PCD_EP_ISR_Handler+0x4f4>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f040 8223 	bne.w	8007384 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	b292      	uxth	r2, r2
 8006f52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006f5e:	e211      	b.n	8007384 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006f66:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006f70:	8a7b      	ldrh	r3, [r7, #18]
 8006f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d031      	beq.n	8006fde <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	4413      	add	r3, r2
 8006f94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f004 ffcc 	bl	800bf52 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	b29c      	uxth	r4, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8006fd2:	b292      	uxth	r2, r2
 8006fd4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f009 fe68 	bl	8010cac <HAL_PCD_SetupStageCallback>
 8006fdc:	e1d2      	b.n	8007384 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006fde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f280 81ce 	bge.w	8007384 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	b29c      	uxth	r4, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8007000:	b292      	uxth	r2, r2
 8007002:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700c:	b29b      	uxth	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	4413      	add	r3, r2
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6812      	ldr	r2, [r2, #0]
 800701c:	4413      	add	r3, r2
 800701e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d019      	beq.n	8007068 <PCD_EP_ISR_Handler+0x1d8>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d015      	beq.n	8007068 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6959      	ldr	r1, [r3, #20]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800704c:	b29b      	uxth	r3, r3
 800704e:	f004 ff80 	bl	800bf52 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	695a      	ldr	r2, [r3, #20]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	441a      	add	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007060:	2100      	movs	r1, #0
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f009 fe34 	bl	8010cd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461c      	mov	r4, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007076:	b29b      	uxth	r3, r3
 8007078:	441c      	add	r4, r3
 800707a:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800707e:	461c      	mov	r4, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10e      	bne.n	80070a6 <PCD_EP_ISR_Handler+0x216>
 8007088:	8823      	ldrh	r3, [r4, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007090:	b29b      	uxth	r3, r3
 8007092:	8023      	strh	r3, [r4, #0]
 8007094:	8823      	ldrh	r3, [r4, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800709c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	8023      	strh	r3, [r4, #0]
 80070a4:	e02d      	b.n	8007102 <PCD_EP_ISR_Handler+0x272>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b3e      	cmp	r3, #62	; 0x3e
 80070ac:	d812      	bhi.n	80070d4 <PCD_EP_ISR_Handler+0x244>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <PCD_EP_ISR_Handler+0x238>
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	3301      	adds	r3, #1
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	029b      	lsls	r3, r3, #10
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	8023      	strh	r3, [r4, #0]
 80070d2:	e016      	b.n	8007102 <PCD_EP_ISR_Handler+0x272>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	61bb      	str	r3, [r7, #24]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <PCD_EP_ISR_Handler+0x25e>
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	029b      	lsls	r3, r3, #10
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fe:	b29b      	uxth	r3, r3
 8007100:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	b29c      	uxth	r4, r3
 8007114:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007118:	b29c      	uxth	r4, r3
 800711a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800711e:	b29c      	uxth	r4, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	4b9e      	ldr	r3, [pc, #632]	; (80073a0 <PCD_EP_ISR_Handler+0x510>)
 8007126:	4323      	orrs	r3, r4
 8007128:	b29b      	uxth	r3, r3
 800712a:	8013      	strh	r3, [r2, #0]
 800712c:	e12a      	b.n	8007384 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	7d7b      	ldrb	r3, [r7, #21]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800713e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f280 80cb 	bge.w	80072de <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	7d7b      	ldrb	r3, [r7, #21]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29a      	uxth	r2, r3
 8007158:	f640 738f 	movw	r3, #3983	; 0xf8f
 800715c:	4013      	ands	r3, r2
 800715e:	b29c      	uxth	r4, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	7d7b      	ldrb	r3, [r7, #21]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8007170:	b292      	uxth	r2, r2
 8007172:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007174:	7d7b      	ldrb	r3, [r7, #21]
 8007176:	015b      	lsls	r3, r3, #5
 8007178:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	4413      	add	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	7b1b      	ldrb	r3, [r3, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d11f      	bne.n	80071ca <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007192:	b29b      	uxth	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4413      	add	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6812      	ldr	r2, [r2, #0]
 80071a2:	4413      	add	r3, r2
 80071a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ae:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80071b0:	8bfb      	ldrh	r3, [r7, #30]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d06e      	beq.n	8007294 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6959      	ldr	r1, [r3, #20]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	88da      	ldrh	r2, [r3, #6]
 80071c2:	8bfb      	ldrh	r3, [r7, #30]
 80071c4:	f004 fec5 	bl	800bf52 <USB_ReadPMA>
 80071c8:	e064      	b.n	8007294 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e4:	b29c      	uxth	r4, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	441a      	add	r2, r3
 80071f4:	4b6b      	ldr	r3, [pc, #428]	; (80073a4 <PCD_EP_ISR_Handler+0x514>)
 80071f6:	4323      	orrs	r3, r4
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	461a      	mov	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01f      	beq.n	8007256 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721e:	b29b      	uxth	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	4413      	add	r3, r2
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	4413      	add	r3, r2
 8007230:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800723a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800723c:	8bfb      	ldrh	r3, [r7, #30]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d028      	beq.n	8007294 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6959      	ldr	r1, [r3, #20]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	891a      	ldrh	r2, [r3, #8]
 800724e:	8bfb      	ldrh	r3, [r7, #30]
 8007250:	f004 fe7f 	bl	800bf52 <USB_ReadPMA>
 8007254:	e01e      	b.n	8007294 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725e:	b29b      	uxth	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	4413      	add	r3, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6812      	ldr	r2, [r2, #0]
 800726e:	4413      	add	r3, r2
 8007270:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800727a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800727c:	8bfb      	ldrh	r3, [r7, #30]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d008      	beq.n	8007294 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6959      	ldr	r1, [r3, #20]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	895a      	ldrh	r2, [r3, #10]
 800728e:	8bfb      	ldrh	r3, [r7, #30]
 8007290:	f004 fe5f 	bl	800bf52 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	8bfb      	ldrh	r3, [r7, #30]
 800729a:	441a      	add	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	695a      	ldr	r2, [r3, #20]
 80072a4:	8bfb      	ldrh	r3, [r7, #30]
 80072a6:	441a      	add	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <PCD_EP_ISR_Handler+0x42e>
 80072b4:	8bfa      	ldrh	r2, [r7, #30]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d206      	bcs.n	80072cc <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f009 fd03 	bl	8010cd0 <HAL_PCD_DataOutStageCallback>
 80072ca:	e008      	b.n	80072de <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	7819      	ldrb	r1, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	695a      	ldr	r2, [r3, #20]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff fca9 	bl	8006c30 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80072de:	8a7b      	ldrh	r3, [r7, #18]
 80072e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d04d      	beq.n	8007384 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 80072e8:	7d7b      	ldrb	r3, [r7, #21]
 80072ea:	015b      	lsls	r3, r3, #5
 80072ec:	3328      	adds	r3, #40	; 0x28
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	4413      	add	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	7d7b      	ldrb	r3, [r7, #21]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800730c:	b29c      	uxth	r4, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	7d7b      	ldrb	r3, [r7, #21]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	441a      	add	r2, r3
 800731a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800731e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007322:	b29b      	uxth	r3, r3
 8007324:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800732e:	b29b      	uxth	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	4413      	add	r3, r2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	4413      	add	r3, r2
 8007340:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	695a      	ldr	r2, [r3, #20]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	441a      	add	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f009 fcc8 	bl	8010d00 <HAL_PCD_DataInStageCallback>
 8007370:	e008      	b.n	8007384 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	7819      	ldrb	r1, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	695a      	ldr	r2, [r3, #20]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff fca5 	bl	8006cce <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800738c:	b29b      	uxth	r3, r3
 800738e:	b21b      	sxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	f6ff ad82 	blt.w	8006e9a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3724      	adds	r7, #36	; 0x24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd90      	pop	{r4, r7, pc}
 80073a0:	ffff8080 	.word	0xffff8080
 80073a4:	ffff80c0 	.word	0xffff80c0

080073a8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	817b      	strh	r3, [r7, #10]
 80073b6:	4613      	mov	r3, r2
 80073b8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80073ba:	897b      	ldrh	r3, [r7, #10]
 80073bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d008      	beq.n	80073d8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073c6:	897b      	ldrh	r3, [r7, #10]
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	015b      	lsls	r3, r3, #5
 80073ce:	3328      	adds	r3, #40	; 0x28
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4413      	add	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	e006      	b.n	80073e6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80073d8:	897b      	ldrh	r3, [r7, #10]
 80073da:	015b      	lsls	r3, r3, #5
 80073dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80073e6:	893b      	ldrh	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d107      	bne.n	80073fc <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2200      	movs	r2, #0
 80073f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	80da      	strh	r2, [r3, #6]
 80073fa:	e00b      	b.n	8007414 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2201      	movs	r2, #1
 8007400:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	b29a      	uxth	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	b29a      	uxth	r2, r3
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007422:	b480      	push	{r7}
 8007424:	b085      	sub	sp, #20
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007446:	b29b      	uxth	r3, r3
 8007448:	f043 0301 	orr.w	r3, r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800745a:	b29b      	uxth	r3, r3
 800745c:	f043 0302 	orr.w	r3, r3, #2
 8007460:	b29a      	uxth	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
	...

08007478 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800747c:	4b05      	ldr	r3, [pc, #20]	; (8007494 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a04      	ldr	r2, [pc, #16]	; (8007494 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007486:	6013      	str	r3, [r2, #0]
}
 8007488:	bf00      	nop
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40007000 	.word	0x40007000

08007498 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800749c:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	40007000 	.word	0x40007000

080074b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074c2:	d130      	bne.n	8007526 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80074c4:	4b23      	ldr	r3, [pc, #140]	; (8007554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d0:	d038      	beq.n	8007544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074d2:	4b20      	ldr	r3, [pc, #128]	; (8007554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80074da:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2232      	movs	r2, #50	; 0x32
 80074e8:	fb02 f303 	mul.w	r3, r2, r3
 80074ec:	4a1b      	ldr	r2, [pc, #108]	; (800755c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80074ee:	fba2 2303 	umull	r2, r3, r2, r3
 80074f2:	0c9b      	lsrs	r3, r3, #18
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074f8:	e002      	b.n	8007500 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007500:	4b14      	ldr	r3, [pc, #80]	; (8007554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750c:	d102      	bne.n	8007514 <HAL_PWREx_ControlVoltageScaling+0x60>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f2      	bne.n	80074fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007514:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800751c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007520:	d110      	bne.n	8007544 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e00f      	b.n	8007546 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007526:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800752e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007532:	d007      	beq.n	8007544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007534:	4b07      	ldr	r3, [pc, #28]	; (8007554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800753c:	4a05      	ldr	r2, [pc, #20]	; (8007554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800753e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007542:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40007000 	.word	0x40007000
 8007558:	2000000c 	.word	0x2000000c
 800755c:	431bde83 	.word	0x431bde83

08007560 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	4a04      	ldr	r2, [pc, #16]	; (800757c <HAL_PWREx_EnableVddUSB+0x1c>)
 800756a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800756e:	6053      	str	r3, [r2, #4]
}
 8007570:	bf00      	nop
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40007000 	.word	0x40007000

08007580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d102      	bne.n	8007594 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f000 bc11 	b.w	8007db6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007594:	4ba0      	ldr	r3, [pc, #640]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f003 030c 	and.w	r3, r3, #12
 800759c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800759e:	4b9e      	ldr	r3, [pc, #632]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0310 	and.w	r3, r3, #16
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 80e4 	beq.w	800777e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d007      	beq.n	80075cc <HAL_RCC_OscConfig+0x4c>
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2b0c      	cmp	r3, #12
 80075c0:	f040 808b 	bne.w	80076da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	f040 8087 	bne.w	80076da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80075cc:	4b92      	ldr	r3, [pc, #584]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <HAL_RCC_OscConfig+0x64>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e3e8      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a1a      	ldr	r2, [r3, #32]
 80075e8:	4b8b      	ldr	r3, [pc, #556]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <HAL_RCC_OscConfig+0x7e>
 80075f4:	4b88      	ldr	r3, [pc, #544]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075fc:	e005      	b.n	800760a <HAL_RCC_OscConfig+0x8a>
 80075fe:	4b86      	ldr	r3, [pc, #536]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800760a:	4293      	cmp	r3, r2
 800760c:	d223      	bcs.n	8007656 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fd78 	bl	8008108 <RCC_SetFlashLatencyFromMSIRange>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e3c9      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007622:	4b7d      	ldr	r3, [pc, #500]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a7c      	ldr	r2, [pc, #496]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007628:	f043 0308 	orr.w	r3, r3, #8
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	4b7a      	ldr	r3, [pc, #488]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	4977      	ldr	r1, [pc, #476]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 800763c:	4313      	orrs	r3, r2
 800763e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007640:	4b75      	ldr	r3, [pc, #468]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	4972      	ldr	r1, [pc, #456]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007650:	4313      	orrs	r3, r2
 8007652:	604b      	str	r3, [r1, #4]
 8007654:	e025      	b.n	80076a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007656:	4b70      	ldr	r3, [pc, #448]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a6f      	ldr	r2, [pc, #444]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 800765c:	f043 0308 	orr.w	r3, r3, #8
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	4b6d      	ldr	r3, [pc, #436]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	496a      	ldr	r1, [pc, #424]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007670:	4313      	orrs	r3, r2
 8007672:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007674:	4b68      	ldr	r3, [pc, #416]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	4965      	ldr	r1, [pc, #404]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007684:	4313      	orrs	r3, r2
 8007686:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fd38 	bl	8008108 <RCC_SetFlashLatencyFromMSIRange>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e389      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80076a2:	f000 fc6f 	bl	8007f84 <HAL_RCC_GetSysClockFreq>
 80076a6:	4601      	mov	r1, r0
 80076a8:	4b5b      	ldr	r3, [pc, #364]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	091b      	lsrs	r3, r3, #4
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	4a5a      	ldr	r2, [pc, #360]	; (800781c <HAL_RCC_OscConfig+0x29c>)
 80076b4:	5cd3      	ldrb	r3, [r2, r3]
 80076b6:	f003 031f 	and.w	r3, r3, #31
 80076ba:	fa21 f303 	lsr.w	r3, r1, r3
 80076be:	4a58      	ldr	r2, [pc, #352]	; (8007820 <HAL_RCC_OscConfig+0x2a0>)
 80076c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80076c2:	4b58      	ldr	r3, [pc, #352]	; (8007824 <HAL_RCC_OscConfig+0x2a4>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fc fbaa 	bl	8003e20 <HAL_InitTick>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d052      	beq.n	800777c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	e36d      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d032      	beq.n	8007748 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80076e2:	4b4d      	ldr	r3, [pc, #308]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a4c      	ldr	r2, [pc, #304]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80076e8:	f043 0301 	orr.w	r3, r3, #1
 80076ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80076ee:	f7fc fbe3 	bl	8003eb8 <HAL_GetTick>
 80076f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076f4:	e008      	b.n	8007708 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80076f6:	f7fc fbdf 	bl	8003eb8 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d901      	bls.n	8007708 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e356      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007708:	4b43      	ldr	r3, [pc, #268]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0f0      	beq.n	80076f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007714:	4b40      	ldr	r3, [pc, #256]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a3f      	ldr	r2, [pc, #252]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 800771a:	f043 0308 	orr.w	r3, r3, #8
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	4b3d      	ldr	r3, [pc, #244]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	493a      	ldr	r1, [pc, #232]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 800772e:	4313      	orrs	r3, r2
 8007730:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007732:	4b39      	ldr	r3, [pc, #228]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	4935      	ldr	r1, [pc, #212]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007742:	4313      	orrs	r3, r2
 8007744:	604b      	str	r3, [r1, #4]
 8007746:	e01a      	b.n	800777e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007748:	4b33      	ldr	r3, [pc, #204]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a32      	ldr	r2, [pc, #200]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 800774e:	f023 0301 	bic.w	r3, r3, #1
 8007752:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007754:	f7fc fbb0 	bl	8003eb8 <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800775a:	e008      	b.n	800776e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800775c:	f7fc fbac 	bl	8003eb8 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e323      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800776e:	4b2a      	ldr	r3, [pc, #168]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1f0      	bne.n	800775c <HAL_RCC_OscConfig+0x1dc>
 800777a:	e000      	b.n	800777e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800777c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d073      	beq.n	8007872 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	2b08      	cmp	r3, #8
 800778e:	d005      	beq.n	800779c <HAL_RCC_OscConfig+0x21c>
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b0c      	cmp	r3, #12
 8007794:	d10e      	bne.n	80077b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b03      	cmp	r3, #3
 800779a:	d10b      	bne.n	80077b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800779c:	4b1e      	ldr	r3, [pc, #120]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d063      	beq.n	8007870 <HAL_RCC_OscConfig+0x2f0>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d15f      	bne.n	8007870 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e300      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077bc:	d106      	bne.n	80077cc <HAL_RCC_OscConfig+0x24c>
 80077be:	4b16      	ldr	r3, [pc, #88]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a15      	ldr	r2, [pc, #84]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80077c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	e01d      	b.n	8007808 <HAL_RCC_OscConfig+0x288>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077d4:	d10c      	bne.n	80077f0 <HAL_RCC_OscConfig+0x270>
 80077d6:	4b10      	ldr	r3, [pc, #64]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a0f      	ldr	r2, [pc, #60]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80077dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a0c      	ldr	r2, [pc, #48]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80077e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	e00b      	b.n	8007808 <HAL_RCC_OscConfig+0x288>
 80077f0:	4b09      	ldr	r3, [pc, #36]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a08      	ldr	r2, [pc, #32]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80077f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a05      	ldr	r2, [pc, #20]	; (8007818 <HAL_RCC_OscConfig+0x298>)
 8007802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01b      	beq.n	8007848 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007810:	f7fc fb52 	bl	8003eb8 <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007816:	e010      	b.n	800783a <HAL_RCC_OscConfig+0x2ba>
 8007818:	40021000 	.word	0x40021000
 800781c:	080150dc 	.word	0x080150dc
 8007820:	2000000c 	.word	0x2000000c
 8007824:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007828:	f7fc fb46 	bl	8003eb8 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b64      	cmp	r3, #100	; 0x64
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e2bd      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800783a:	4baf      	ldr	r3, [pc, #700]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0x2a8>
 8007846:	e014      	b.n	8007872 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007848:	f7fc fb36 	bl	8003eb8 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007850:	f7fc fb32 	bl	8003eb8 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b64      	cmp	r3, #100	; 0x64
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e2a9      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007862:	4ba5      	ldr	r3, [pc, #660]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f0      	bne.n	8007850 <HAL_RCC_OscConfig+0x2d0>
 800786e:	e000      	b.n	8007872 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d060      	beq.n	8007940 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b04      	cmp	r3, #4
 8007882:	d005      	beq.n	8007890 <HAL_RCC_OscConfig+0x310>
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b0c      	cmp	r3, #12
 8007888:	d119      	bne.n	80078be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d116      	bne.n	80078be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007890:	4b99      	ldr	r3, [pc, #612]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <HAL_RCC_OscConfig+0x328>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e286      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a8:	4b93      	ldr	r3, [pc, #588]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	061b      	lsls	r3, r3, #24
 80078b6:	4990      	ldr	r1, [pc, #576]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078bc:	e040      	b.n	8007940 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d023      	beq.n	800790e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078c6:	4b8c      	ldr	r3, [pc, #560]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a8b      	ldr	r2, [pc, #556]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80078cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d2:	f7fc faf1 	bl	8003eb8 <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078d8:	e008      	b.n	80078ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078da:	f7fc faed 	bl	8003eb8 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d901      	bls.n	80078ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e264      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078ec:	4b82      	ldr	r3, [pc, #520]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0f0      	beq.n	80078da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f8:	4b7f      	ldr	r3, [pc, #508]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	061b      	lsls	r3, r3, #24
 8007906:	497c      	ldr	r1, [pc, #496]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007908:	4313      	orrs	r3, r2
 800790a:	604b      	str	r3, [r1, #4]
 800790c:	e018      	b.n	8007940 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800790e:	4b7a      	ldr	r3, [pc, #488]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a79      	ldr	r2, [pc, #484]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791a:	f7fc facd 	bl	8003eb8 <HAL_GetTick>
 800791e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007920:	e008      	b.n	8007934 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007922:	f7fc fac9 	bl	8003eb8 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	2b02      	cmp	r3, #2
 800792e:	d901      	bls.n	8007934 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e240      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007934:	4b70      	ldr	r3, [pc, #448]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1f0      	bne.n	8007922 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0308 	and.w	r3, r3, #8
 8007948:	2b00      	cmp	r3, #0
 800794a:	d03c      	beq.n	80079c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01c      	beq.n	800798e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007954:	4b68      	ldr	r3, [pc, #416]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800795a:	4a67      	ldr	r2, [pc, #412]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 800795c:	f043 0301 	orr.w	r3, r3, #1
 8007960:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007964:	f7fc faa8 	bl	8003eb8 <HAL_GetTick>
 8007968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800796a:	e008      	b.n	800797e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800796c:	f7fc faa4 	bl	8003eb8 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b02      	cmp	r3, #2
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e21b      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800797e:	4b5e      	ldr	r3, [pc, #376]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0ef      	beq.n	800796c <HAL_RCC_OscConfig+0x3ec>
 800798c:	e01b      	b.n	80079c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800798e:	4b5a      	ldr	r3, [pc, #360]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007994:	4a58      	ldr	r2, [pc, #352]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007996:	f023 0301 	bic.w	r3, r3, #1
 800799a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800799e:	f7fc fa8b 	bl	8003eb8 <HAL_GetTick>
 80079a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079a6:	f7fc fa87 	bl	8003eb8 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e1fe      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079b8:	4b4f      	ldr	r3, [pc, #316]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80079ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1ef      	bne.n	80079a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0304 	and.w	r3, r3, #4
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 80a6 	beq.w	8007b20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079d4:	2300      	movs	r3, #0
 80079d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80079d8:	4b47      	ldr	r3, [pc, #284]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80079da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10d      	bne.n	8007a00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079e4:	4b44      	ldr	r3, [pc, #272]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80079e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e8:	4a43      	ldr	r2, [pc, #268]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80079ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ee:	6593      	str	r3, [r2, #88]	; 0x58
 80079f0:	4b41      	ldr	r3, [pc, #260]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 80079f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f8:	60bb      	str	r3, [r7, #8]
 80079fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079fc:	2301      	movs	r3, #1
 80079fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a00:	4b3e      	ldr	r3, [pc, #248]	; (8007afc <HAL_RCC_OscConfig+0x57c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d118      	bne.n	8007a3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a0c:	4b3b      	ldr	r3, [pc, #236]	; (8007afc <HAL_RCC_OscConfig+0x57c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a3a      	ldr	r2, [pc, #232]	; (8007afc <HAL_RCC_OscConfig+0x57c>)
 8007a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a18:	f7fc fa4e 	bl	8003eb8 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a20:	f7fc fa4a 	bl	8003eb8 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e1c1      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a32:	4b32      	ldr	r3, [pc, #200]	; (8007afc <HAL_RCC_OscConfig+0x57c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f0      	beq.n	8007a20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d108      	bne.n	8007a58 <HAL_RCC_OscConfig+0x4d8>
 8007a46:	4b2c      	ldr	r3, [pc, #176]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4c:	4a2a      	ldr	r2, [pc, #168]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007a4e:	f043 0301 	orr.w	r3, r3, #1
 8007a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a56:	e024      	b.n	8007aa2 <HAL_RCC_OscConfig+0x522>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	d110      	bne.n	8007a82 <HAL_RCC_OscConfig+0x502>
 8007a60:	4b25      	ldr	r3, [pc, #148]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a66:	4a24      	ldr	r2, [pc, #144]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007a68:	f043 0304 	orr.w	r3, r3, #4
 8007a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a70:	4b21      	ldr	r3, [pc, #132]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a76:	4a20      	ldr	r2, [pc, #128]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007a78:	f043 0301 	orr.w	r3, r3, #1
 8007a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a80:	e00f      	b.n	8007aa2 <HAL_RCC_OscConfig+0x522>
 8007a82:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a88:	4a1b      	ldr	r2, [pc, #108]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007a8a:	f023 0301 	bic.w	r3, r3, #1
 8007a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a92:	4b19      	ldr	r3, [pc, #100]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a98:	4a17      	ldr	r2, [pc, #92]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007a9a:	f023 0304 	bic.w	r3, r3, #4
 8007a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d016      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aaa:	f7fc fa05 	bl	8003eb8 <HAL_GetTick>
 8007aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ab0:	e00a      	b.n	8007ac8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ab2:	f7fc fa01 	bl	8003eb8 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d901      	bls.n	8007ac8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e176      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ac8:	4b0b      	ldr	r3, [pc, #44]	; (8007af8 <HAL_RCC_OscConfig+0x578>)
 8007aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0ed      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x532>
 8007ad6:	e01a      	b.n	8007b0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad8:	f7fc f9ee 	bl	8003eb8 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ade:	e00f      	b.n	8007b00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae0:	f7fc f9ea 	bl	8003eb8 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d906      	bls.n	8007b00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e15f      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
 8007af6:	bf00      	nop
 8007af8:	40021000 	.word	0x40021000
 8007afc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b00:	4baa      	ldr	r3, [pc, #680]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e8      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b0e:	7ffb      	ldrb	r3, [r7, #31]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d105      	bne.n	8007b20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b14:	4ba5      	ldr	r3, [pc, #660]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b18:	4aa4      	ldr	r2, [pc, #656]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d03c      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01c      	beq.n	8007b6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b34:	4b9d      	ldr	r3, [pc, #628]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b3a:	4a9c      	ldr	r2, [pc, #624]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b44:	f7fc f9b8 	bl	8003eb8 <HAL_GetTick>
 8007b48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b4c:	f7fc f9b4 	bl	8003eb8 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e12b      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b5e:	4b93      	ldr	r3, [pc, #588]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0ef      	beq.n	8007b4c <HAL_RCC_OscConfig+0x5cc>
 8007b6c:	e01b      	b.n	8007ba6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b6e:	4b8f      	ldr	r3, [pc, #572]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b74:	4a8d      	ldr	r2, [pc, #564]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007b76:	f023 0301 	bic.w	r3, r3, #1
 8007b7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7e:	f7fc f99b 	bl	8003eb8 <HAL_GetTick>
 8007b82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b84:	e008      	b.n	8007b98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b86:	f7fc f997 	bl	8003eb8 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d901      	bls.n	8007b98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e10e      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b98:	4b84      	ldr	r3, [pc, #528]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1ef      	bne.n	8007b86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 8102 	beq.w	8007db4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	f040 80c5 	bne.w	8007d44 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007bba:	4b7c      	ldr	r3, [pc, #496]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f003 0203 	and.w	r2, r3, #3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d12c      	bne.n	8007c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d123      	bne.n	8007c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d11b      	bne.n	8007c28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d113      	bne.n	8007c28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0a:	085b      	lsrs	r3, r3, #1
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d109      	bne.n	8007c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	3b01      	subs	r3, #1
 8007c22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d067      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	2b0c      	cmp	r3, #12
 8007c2c:	d062      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007c2e:	4b5f      	ldr	r3, [pc, #380]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e0bb      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007c3e:	4b5b      	ldr	r3, [pc, #364]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a5a      	ldr	r2, [pc, #360]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c4a:	f7fc f935 	bl	8003eb8 <HAL_GetTick>
 8007c4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c50:	e008      	b.n	8007c64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c52:	f7fc f931 	bl	8003eb8 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e0a8      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c64:	4b51      	ldr	r3, [pc, #324]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1f0      	bne.n	8007c52 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c70:	4b4e      	ldr	r3, [pc, #312]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	4b4e      	ldr	r3, [pc, #312]	; (8007db0 <HAL_RCC_OscConfig+0x830>)
 8007c76:	4013      	ands	r3, r2
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c80:	3a01      	subs	r2, #1
 8007c82:	0112      	lsls	r2, r2, #4
 8007c84:	4311      	orrs	r1, r2
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c8a:	0212      	lsls	r2, r2, #8
 8007c8c:	4311      	orrs	r1, r2
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c92:	0852      	lsrs	r2, r2, #1
 8007c94:	3a01      	subs	r2, #1
 8007c96:	0552      	lsls	r2, r2, #21
 8007c98:	4311      	orrs	r1, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007c9e:	0852      	lsrs	r2, r2, #1
 8007ca0:	3a01      	subs	r2, #1
 8007ca2:	0652      	lsls	r2, r2, #25
 8007ca4:	4311      	orrs	r1, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007caa:	06d2      	lsls	r2, r2, #27
 8007cac:	430a      	orrs	r2, r1
 8007cae:	493f      	ldr	r1, [pc, #252]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007cb4:	4b3d      	ldr	r3, [pc, #244]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a3c      	ldr	r2, [pc, #240]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007cc0:	4b3a      	ldr	r3, [pc, #232]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	4a39      	ldr	r2, [pc, #228]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ccc:	f7fc f8f4 	bl	8003eb8 <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cd2:	e008      	b.n	8007ce6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd4:	f7fc f8f0 	bl	8003eb8 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e067      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ce6:	4b31      	ldr	r3, [pc, #196]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d0f0      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007cf2:	e05f      	b.n	8007db4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e05e      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cf8:	4b2c      	ldr	r3, [pc, #176]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d157      	bne.n	8007db4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007d04:	4b29      	ldr	r3, [pc, #164]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a28      	ldr	r2, [pc, #160]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d10:	4b26      	ldr	r3, [pc, #152]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	4a25      	ldr	r2, [pc, #148]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d1c:	f7fc f8cc 	bl	8003eb8 <HAL_GetTick>
 8007d20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d22:	e008      	b.n	8007d36 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d24:	f7fc f8c8 	bl	8003eb8 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e03f      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d36:	4b1d      	ldr	r3, [pc, #116]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0f0      	beq.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
 8007d42:	e037      	b.n	8007db4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	2b0c      	cmp	r3, #12
 8007d48:	d02d      	beq.n	8007da6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d4a:	4b18      	ldr	r3, [pc, #96]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a17      	ldr	r2, [pc, #92]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d54:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d56:	4b15      	ldr	r3, [pc, #84]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d105      	bne.n	8007d6e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007d62:	4b12      	ldr	r3, [pc, #72]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	4a11      	ldr	r2, [pc, #68]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d68:	f023 0303 	bic.w	r3, r3, #3
 8007d6c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	4a0e      	ldr	r2, [pc, #56]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d7c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7e:	f7fc f89b 	bl	8003eb8 <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d84:	e008      	b.n	8007d98 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d86:	f7fc f897 	bl	8003eb8 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e00e      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <HAL_RCC_OscConfig+0x82c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1f0      	bne.n	8007d86 <HAL_RCC_OscConfig+0x806>
 8007da4:	e006      	b.n	8007db4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e005      	b.n	8007db6 <HAL_RCC_OscConfig+0x836>
 8007daa:	bf00      	nop
 8007dac:	40021000 	.word	0x40021000
 8007db0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3720      	adds	r7, #32
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop

08007dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e0c8      	b.n	8007f66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007dd4:	4b66      	ldr	r3, [pc, #408]	; (8007f70 <HAL_RCC_ClockConfig+0x1b0>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d910      	bls.n	8007e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007de2:	4b63      	ldr	r3, [pc, #396]	; (8007f70 <HAL_RCC_ClockConfig+0x1b0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f023 0207 	bic.w	r2, r3, #7
 8007dea:	4961      	ldr	r1, [pc, #388]	; (8007f70 <HAL_RCC_ClockConfig+0x1b0>)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007df2:	4b5f      	ldr	r3, [pc, #380]	; (8007f70 <HAL_RCC_ClockConfig+0x1b0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d001      	beq.n	8007e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e0b0      	b.n	8007f66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d04c      	beq.n	8007eaa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d107      	bne.n	8007e28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e18:	4b56      	ldr	r3, [pc, #344]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d121      	bne.n	8007e68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e09e      	b.n	8007f66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d107      	bne.n	8007e40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e30:	4b50      	ldr	r3, [pc, #320]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d115      	bne.n	8007e68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e092      	b.n	8007f66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d107      	bne.n	8007e58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e48:	4b4a      	ldr	r3, [pc, #296]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d109      	bne.n	8007e68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e086      	b.n	8007f66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e58:	4b46      	ldr	r3, [pc, #280]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e07e      	b.n	8007f66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e68:	4b42      	ldr	r3, [pc, #264]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 0203 	bic.w	r2, r3, #3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	493f      	ldr	r1, [pc, #252]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e7a:	f7fc f81d 	bl	8003eb8 <HAL_GetTick>
 8007e7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e80:	e00a      	b.n	8007e98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e82:	f7fc f819 	bl	8003eb8 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e066      	b.n	8007f66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e98:	4b36      	ldr	r3, [pc, #216]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f003 020c 	and.w	r2, r3, #12
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d1eb      	bne.n	8007e82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d008      	beq.n	8007ec8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eb6:	4b2f      	ldr	r3, [pc, #188]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	492c      	ldr	r1, [pc, #176]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ec8:	4b29      	ldr	r3, [pc, #164]	; (8007f70 <HAL_RCC_ClockConfig+0x1b0>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d210      	bcs.n	8007ef8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ed6:	4b26      	ldr	r3, [pc, #152]	; (8007f70 <HAL_RCC_ClockConfig+0x1b0>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f023 0207 	bic.w	r2, r3, #7
 8007ede:	4924      	ldr	r1, [pc, #144]	; (8007f70 <HAL_RCC_ClockConfig+0x1b0>)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ee6:	4b22      	ldr	r3, [pc, #136]	; (8007f70 <HAL_RCC_ClockConfig+0x1b0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d001      	beq.n	8007ef8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e036      	b.n	8007f66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d008      	beq.n	8007f16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f04:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	4918      	ldr	r1, [pc, #96]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d009      	beq.n	8007f36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f22:	4b14      	ldr	r3, [pc, #80]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	4910      	ldr	r1, [pc, #64]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f36:	f000 f825 	bl	8007f84 <HAL_RCC_GetSysClockFreq>
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <HAL_RCC_ClockConfig+0x1b4>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	091b      	lsrs	r3, r3, #4
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	4a0c      	ldr	r2, [pc, #48]	; (8007f78 <HAL_RCC_ClockConfig+0x1b8>)
 8007f48:	5cd3      	ldrb	r3, [r2, r3]
 8007f4a:	f003 031f 	and.w	r3, r3, #31
 8007f4e:	fa21 f303 	lsr.w	r3, r1, r3
 8007f52:	4a0a      	ldr	r2, [pc, #40]	; (8007f7c <HAL_RCC_ClockConfig+0x1bc>)
 8007f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007f56:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <HAL_RCC_ClockConfig+0x1c0>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fb ff60 	bl	8003e20 <HAL_InitTick>
 8007f60:	4603      	mov	r3, r0
 8007f62:	72fb      	strb	r3, [r7, #11]

  return status;
 8007f64:	7afb      	ldrb	r3, [r7, #11]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	40022000 	.word	0x40022000
 8007f74:	40021000 	.word	0x40021000
 8007f78:	080150dc 	.word	0x080150dc
 8007f7c:	2000000c 	.word	0x2000000c
 8007f80:	20000010 	.word	0x20000010

08007f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b089      	sub	sp, #36	; 0x24
 8007f88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f92:	4b3d      	ldr	r3, [pc, #244]	; (8008088 <HAL_RCC_GetSysClockFreq+0x104>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 030c 	and.w	r3, r3, #12
 8007f9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f9c:	4b3a      	ldr	r3, [pc, #232]	; (8008088 <HAL_RCC_GetSysClockFreq+0x104>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d005      	beq.n	8007fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b0c      	cmp	r3, #12
 8007fb0:	d121      	bne.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d11e      	bne.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007fb8:	4b33      	ldr	r3, [pc, #204]	; (8008088 <HAL_RCC_GetSysClockFreq+0x104>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d107      	bne.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007fc4:	4b30      	ldr	r3, [pc, #192]	; (8008088 <HAL_RCC_GetSysClockFreq+0x104>)
 8007fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fca:	0a1b      	lsrs	r3, r3, #8
 8007fcc:	f003 030f 	and.w	r3, r3, #15
 8007fd0:	61fb      	str	r3, [r7, #28]
 8007fd2:	e005      	b.n	8007fe0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007fd4:	4b2c      	ldr	r3, [pc, #176]	; (8008088 <HAL_RCC_GetSysClockFreq+0x104>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	091b      	lsrs	r3, r3, #4
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007fe0:	4a2a      	ldr	r2, [pc, #168]	; (800808c <HAL_RCC_GetSysClockFreq+0x108>)
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10d      	bne.n	800800c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ff4:	e00a      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d102      	bne.n	8008002 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ffc:	4b24      	ldr	r3, [pc, #144]	; (8008090 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007ffe:	61bb      	str	r3, [r7, #24]
 8008000:	e004      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	2b08      	cmp	r3, #8
 8008006:	d101      	bne.n	800800c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008008:	4b22      	ldr	r3, [pc, #136]	; (8008094 <HAL_RCC_GetSysClockFreq+0x110>)
 800800a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2b0c      	cmp	r3, #12
 8008010:	d133      	bne.n	800807a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008012:	4b1d      	ldr	r3, [pc, #116]	; (8008088 <HAL_RCC_GetSysClockFreq+0x104>)
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d002      	beq.n	8008028 <HAL_RCC_GetSysClockFreq+0xa4>
 8008022:	2b03      	cmp	r3, #3
 8008024:	d003      	beq.n	800802e <HAL_RCC_GetSysClockFreq+0xaa>
 8008026:	e005      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008028:	4b19      	ldr	r3, [pc, #100]	; (8008090 <HAL_RCC_GetSysClockFreq+0x10c>)
 800802a:	617b      	str	r3, [r7, #20]
      break;
 800802c:	e005      	b.n	800803a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800802e:	4b19      	ldr	r3, [pc, #100]	; (8008094 <HAL_RCC_GetSysClockFreq+0x110>)
 8008030:	617b      	str	r3, [r7, #20]
      break;
 8008032:	e002      	b.n	800803a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	617b      	str	r3, [r7, #20]
      break;
 8008038:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800803a:	4b13      	ldr	r3, [pc, #76]	; (8008088 <HAL_RCC_GetSysClockFreq+0x104>)
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	091b      	lsrs	r3, r3, #4
 8008040:	f003 0307 	and.w	r3, r3, #7
 8008044:	3301      	adds	r3, #1
 8008046:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008048:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <HAL_RCC_GetSysClockFreq+0x104>)
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	0a1b      	lsrs	r3, r3, #8
 800804e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	fb02 f203 	mul.w	r2, r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	fbb2 f3f3 	udiv	r3, r2, r3
 800805e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008060:	4b09      	ldr	r3, [pc, #36]	; (8008088 <HAL_RCC_GetSysClockFreq+0x104>)
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	0e5b      	lsrs	r3, r3, #25
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	3301      	adds	r3, #1
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	fbb2 f3f3 	udiv	r3, r2, r3
 8008078:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800807a:	69bb      	ldr	r3, [r7, #24]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3724      	adds	r7, #36	; 0x24
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	40021000 	.word	0x40021000
 800808c:	080150f4 	.word	0x080150f4
 8008090:	00f42400 	.word	0x00f42400
 8008094:	007a1200 	.word	0x007a1200

08008098 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800809c:	4b03      	ldr	r3, [pc, #12]	; (80080ac <HAL_RCC_GetHCLKFreq+0x14>)
 800809e:	681b      	ldr	r3, [r3, #0]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	2000000c 	.word	0x2000000c

080080b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80080b4:	f7ff fff0 	bl	8008098 <HAL_RCC_GetHCLKFreq>
 80080b8:	4601      	mov	r1, r0
 80080ba:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	0a1b      	lsrs	r3, r3, #8
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	4a04      	ldr	r2, [pc, #16]	; (80080d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80080c6:	5cd3      	ldrb	r3, [r2, r3]
 80080c8:	f003 031f 	and.w	r3, r3, #31
 80080cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	40021000 	.word	0x40021000
 80080d8:	080150ec 	.word	0x080150ec

080080dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80080e0:	f7ff ffda 	bl	8008098 <HAL_RCC_GetHCLKFreq>
 80080e4:	4601      	mov	r1, r0
 80080e6:	4b06      	ldr	r3, [pc, #24]	; (8008100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	0adb      	lsrs	r3, r3, #11
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	4a04      	ldr	r2, [pc, #16]	; (8008104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80080f2:	5cd3      	ldrb	r3, [r2, r3]
 80080f4:	f003 031f 	and.w	r3, r3, #31
 80080f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40021000 	.word	0x40021000
 8008104:	080150ec 	.word	0x080150ec

08008108 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008114:	4b2a      	ldr	r3, [pc, #168]	; (80081c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008120:	f7ff f9ba 	bl	8007498 <HAL_PWREx_GetVoltageRange>
 8008124:	6178      	str	r0, [r7, #20]
 8008126:	e014      	b.n	8008152 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008128:	4b25      	ldr	r3, [pc, #148]	; (80081c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800812a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812c:	4a24      	ldr	r2, [pc, #144]	; (80081c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800812e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008132:	6593      	str	r3, [r2, #88]	; 0x58
 8008134:	4b22      	ldr	r3, [pc, #136]	; (80081c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008140:	f7ff f9aa 	bl	8007498 <HAL_PWREx_GetVoltageRange>
 8008144:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008146:	4b1e      	ldr	r3, [pc, #120]	; (80081c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814a:	4a1d      	ldr	r2, [pc, #116]	; (80081c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800814c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008150:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008158:	d10b      	bne.n	8008172 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b80      	cmp	r3, #128	; 0x80
 800815e:	d919      	bls.n	8008194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2ba0      	cmp	r3, #160	; 0xa0
 8008164:	d902      	bls.n	800816c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008166:	2302      	movs	r3, #2
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	e013      	b.n	8008194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800816c:	2301      	movs	r3, #1
 800816e:	613b      	str	r3, [r7, #16]
 8008170:	e010      	b.n	8008194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b80      	cmp	r3, #128	; 0x80
 8008176:	d902      	bls.n	800817e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008178:	2303      	movs	r3, #3
 800817a:	613b      	str	r3, [r7, #16]
 800817c:	e00a      	b.n	8008194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b80      	cmp	r3, #128	; 0x80
 8008182:	d102      	bne.n	800818a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008184:	2302      	movs	r3, #2
 8008186:	613b      	str	r3, [r7, #16]
 8008188:	e004      	b.n	8008194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b70      	cmp	r3, #112	; 0x70
 800818e:	d101      	bne.n	8008194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008190:	2301      	movs	r3, #1
 8008192:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008194:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f023 0207 	bic.w	r2, r3, #7
 800819c:	4909      	ldr	r1, [pc, #36]	; (80081c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80081a4:	4b07      	ldr	r3, [pc, #28]	; (80081c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d001      	beq.n	80081b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e000      	b.n	80081b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3718      	adds	r7, #24
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	40021000 	.word	0x40021000
 80081c4:	40022000 	.word	0x40022000

080081c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80081d0:	2300      	movs	r3, #0
 80081d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081d4:	2300      	movs	r3, #0
 80081d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d02f      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081ec:	d005      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80081ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081f2:	d015      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80081f8:	e00f      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80081fa:	4bac      	ldr	r3, [pc, #688]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	4aab      	ldr	r2, [pc, #684]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008204:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008206:	e00c      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3304      	adds	r3, #4
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f000 f9dc 	bl	80085cc <RCCEx_PLLSAI1_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008218:	e003      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	74fb      	strb	r3, [r7, #19]
      break;
 800821e:	e000      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8008220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008222:	7cfb      	ldrb	r3, [r7, #19]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10b      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008228:	4ba0      	ldr	r3, [pc, #640]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800822a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008236:	499d      	ldr	r1, [pc, #628]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008238:	4313      	orrs	r3, r2
 800823a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800823e:	e001      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	7cfb      	ldrb	r3, [r7, #19]
 8008242:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8099 	beq.w	8008384 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008252:	2300      	movs	r3, #0
 8008254:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008256:	4b95      	ldr	r3, [pc, #596]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8008266:	2300      	movs	r3, #0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00d      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800826c:	4b8f      	ldr	r3, [pc, #572]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800826e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008270:	4a8e      	ldr	r2, [pc, #568]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008276:	6593      	str	r3, [r2, #88]	; 0x58
 8008278:	4b8c      	ldr	r3, [pc, #560]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800827a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008284:	2301      	movs	r3, #1
 8008286:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008288:	4b89      	ldr	r3, [pc, #548]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a88      	ldr	r2, [pc, #544]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800828e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008294:	f7fb fe10 	bl	8003eb8 <HAL_GetTick>
 8008298:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800829a:	e009      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800829c:	f7fb fe0c 	bl	8003eb8 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d902      	bls.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	74fb      	strb	r3, [r7, #19]
        break;
 80082ae:	e005      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80082b0:	4b7f      	ldr	r3, [pc, #508]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0ef      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80082bc:	7cfb      	ldrb	r3, [r7, #19]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d155      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082c2:	4b7a      	ldr	r3, [pc, #488]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80082c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01e      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d019      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082de:	4b73      	ldr	r3, [pc, #460]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082ea:	4b70      	ldr	r3, [pc, #448]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80082ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f0:	4a6e      	ldr	r2, [pc, #440]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80082f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082fa:	4b6c      	ldr	r3, [pc, #432]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80082fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008300:	4a6a      	ldr	r2, [pc, #424]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800830a:	4a68      	ldr	r2, [pc, #416]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d016      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831c:	f7fb fdcc 	bl	8003eb8 <HAL_GetTick>
 8008320:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008322:	e00b      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008324:	f7fb fdc8 	bl	8003eb8 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008332:	4293      	cmp	r3, r2
 8008334:	d902      	bls.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	74fb      	strb	r3, [r7, #19]
            break;
 800833a:	e006      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800833c:	4b5b      	ldr	r3, [pc, #364]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800833e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0ec      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800834a:	7cfb      	ldrb	r3, [r7, #19]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008350:	4b56      	ldr	r3, [pc, #344]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835e:	4953      	ldr	r1, [pc, #332]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008360:	4313      	orrs	r3, r2
 8008362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008366:	e004      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008368:	7cfb      	ldrb	r3, [r7, #19]
 800836a:	74bb      	strb	r3, [r7, #18]
 800836c:	e001      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800836e:	7cfb      	ldrb	r3, [r7, #19]
 8008370:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008372:	7c7b      	ldrb	r3, [r7, #17]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d105      	bne.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008378:	4b4c      	ldr	r3, [pc, #304]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800837a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837c:	4a4b      	ldr	r2, [pc, #300]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800837e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008382:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00a      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008390:	4b46      	ldr	r3, [pc, #280]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008396:	f023 0203 	bic.w	r2, r3, #3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	4943      	ldr	r1, [pc, #268]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00a      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083b2:	4b3e      	ldr	r3, [pc, #248]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80083b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b8:	f023 020c 	bic.w	r2, r3, #12
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	493a      	ldr	r1, [pc, #232]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0320 	and.w	r3, r3, #32
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00a      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083d4:	4b35      	ldr	r3, [pc, #212]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80083d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e2:	4932      	ldr	r1, [pc, #200]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083f6:	4b2d      	ldr	r3, [pc, #180]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80083f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008404:	4929      	ldr	r1, [pc, #164]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008406:	4313      	orrs	r3, r2
 8008408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00a      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008418:	4b24      	ldr	r3, [pc, #144]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800841a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	4921      	ldr	r1, [pc, #132]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008428:	4313      	orrs	r3, r2
 800842a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800843a:	4b1c      	ldr	r3, [pc, #112]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800843c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008440:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	4918      	ldr	r1, [pc, #96]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800844a:	4313      	orrs	r3, r2
 800844c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00a      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800845c:	4b13      	ldr	r3, [pc, #76]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800845e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008462:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846a:	4910      	ldr	r1, [pc, #64]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800846c:	4313      	orrs	r3, r2
 800846e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d02c      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800847e:	4b0b      	ldr	r3, [pc, #44]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008484:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848c:	4907      	ldr	r1, [pc, #28]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800848e:	4313      	orrs	r3, r2
 8008490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800849c:	d10a      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800849e:	4b03      	ldr	r3, [pc, #12]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	4a02      	ldr	r2, [pc, #8]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	60d3      	str	r3, [r2, #12]
 80084aa:	e015      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80084ac:	40021000 	.word	0x40021000
 80084b0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084bc:	d10c      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3304      	adds	r3, #4
 80084c2:	2101      	movs	r1, #1
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 f881 	bl	80085cc <RCCEx_PLLSAI1_Config>
 80084ca:	4603      	mov	r3, r0
 80084cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80084ce:	7cfb      	ldrb	r3, [r7, #19]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80084d4:	7cfb      	ldrb	r3, [r7, #19]
 80084d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d028      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084e4:	4b30      	ldr	r3, [pc, #192]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f2:	492d      	ldr	r1, [pc, #180]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008502:	d106      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008504:	4b28      	ldr	r3, [pc, #160]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	4a27      	ldr	r2, [pc, #156]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800850a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800850e:	60d3      	str	r3, [r2, #12]
 8008510:	e011      	b.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800851a:	d10c      	bne.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3304      	adds	r3, #4
 8008520:	2101      	movs	r1, #1
 8008522:	4618      	mov	r0, r3
 8008524:	f000 f852 	bl	80085cc <RCCEx_PLLSAI1_Config>
 8008528:	4603      	mov	r3, r0
 800852a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800852c:	7cfb      	ldrb	r3, [r7, #19]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8008532:	7cfb      	ldrb	r3, [r7, #19]
 8008534:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d01c      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008542:	4b19      	ldr	r3, [pc, #100]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008548:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008550:	4915      	ldr	r1, [pc, #84]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008552:	4313      	orrs	r3, r2
 8008554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800855c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008560:	d10c      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3304      	adds	r3, #4
 8008566:	2102      	movs	r1, #2
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f82f 	bl	80085cc <RCCEx_PLLSAI1_Config>
 800856e:	4603      	mov	r3, r0
 8008570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008572:	7cfb      	ldrb	r3, [r7, #19]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8008578:	7cfb      	ldrb	r3, [r7, #19]
 800857a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00a      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008588:	4b07      	ldr	r3, [pc, #28]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800858a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800858e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008596:	4904      	ldr	r1, [pc, #16]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008598:	4313      	orrs	r3, r2
 800859a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800859e:	7cbb      	ldrb	r3, [r7, #18]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	40021000 	.word	0x40021000

080085ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80085b0:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a04      	ldr	r2, [pc, #16]	; (80085c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80085b6:	f043 0304 	orr.w	r3, r3, #4
 80085ba:	6013      	str	r3, [r2, #0]
}
 80085bc:	bf00      	nop
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	40021000 	.word	0x40021000

080085cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80085da:	4b73      	ldr	r3, [pc, #460]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d018      	beq.n	8008618 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80085e6:	4b70      	ldr	r3, [pc, #448]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f003 0203 	and.w	r2, r3, #3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d10d      	bne.n	8008612 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
       ||
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80085fe:	4b6a      	ldr	r3, [pc, #424]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	091b      	lsrs	r3, r3, #4
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685b      	ldr	r3, [r3, #4]
       ||
 800860e:	429a      	cmp	r2, r3
 8008610:	d044      	beq.n	800869c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	73fb      	strb	r3, [r7, #15]
 8008616:	e041      	b.n	800869c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b02      	cmp	r3, #2
 800861e:	d00c      	beq.n	800863a <RCCEx_PLLSAI1_Config+0x6e>
 8008620:	2b03      	cmp	r3, #3
 8008622:	d013      	beq.n	800864c <RCCEx_PLLSAI1_Config+0x80>
 8008624:	2b01      	cmp	r3, #1
 8008626:	d120      	bne.n	800866a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008628:	4b5f      	ldr	r3, [pc, #380]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d11d      	bne.n	8008670 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008638:	e01a      	b.n	8008670 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800863a:	4b5b      	ldr	r3, [pc, #364]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008642:	2b00      	cmp	r3, #0
 8008644:	d116      	bne.n	8008674 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800864a:	e013      	b.n	8008674 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800864c:	4b56      	ldr	r3, [pc, #344]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10f      	bne.n	8008678 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008658:	4b53      	ldr	r3, [pc, #332]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d109      	bne.n	8008678 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008668:	e006      	b.n	8008678 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	73fb      	strb	r3, [r7, #15]
      break;
 800866e:	e004      	b.n	800867a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008670:	bf00      	nop
 8008672:	e002      	b.n	800867a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008678:	bf00      	nop
    }

    if(status == HAL_OK)
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10d      	bne.n	800869c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008680:	4b49      	ldr	r3, [pc, #292]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6819      	ldr	r1, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	3b01      	subs	r3, #1
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	430b      	orrs	r3, r1
 8008696:	4944      	ldr	r1, [pc, #272]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008698:	4313      	orrs	r3, r2
 800869a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d17c      	bne.n	800879c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80086a2:	4b41      	ldr	r3, [pc, #260]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a40      	ldr	r2, [pc, #256]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ae:	f7fb fc03 	bl	8003eb8 <HAL_GetTick>
 80086b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80086b4:	e009      	b.n	80086ca <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086b6:	f7fb fbff 	bl	8003eb8 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d902      	bls.n	80086ca <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	73fb      	strb	r3, [r7, #15]
        break;
 80086c8:	e005      	b.n	80086d6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80086ca:	4b37      	ldr	r3, [pc, #220]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1ef      	bne.n	80086b6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d15f      	bne.n	800879c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d110      	bne.n	8008704 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086e2:	4b31      	ldr	r3, [pc, #196]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80086ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6892      	ldr	r2, [r2, #8]
 80086f2:	0211      	lsls	r1, r2, #8
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	68d2      	ldr	r2, [r2, #12]
 80086f8:	06d2      	lsls	r2, r2, #27
 80086fa:	430a      	orrs	r2, r1
 80086fc:	492a      	ldr	r1, [pc, #168]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	610b      	str	r3, [r1, #16]
 8008702:	e027      	b.n	8008754 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d112      	bne.n	8008730 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800870a:	4b27      	ldr	r3, [pc, #156]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008712:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6892      	ldr	r2, [r2, #8]
 800871a:	0211      	lsls	r1, r2, #8
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	6912      	ldr	r2, [r2, #16]
 8008720:	0852      	lsrs	r2, r2, #1
 8008722:	3a01      	subs	r2, #1
 8008724:	0552      	lsls	r2, r2, #21
 8008726:	430a      	orrs	r2, r1
 8008728:	491f      	ldr	r1, [pc, #124]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800872a:	4313      	orrs	r3, r2
 800872c:	610b      	str	r3, [r1, #16]
 800872e:	e011      	b.n	8008754 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008730:	4b1d      	ldr	r3, [pc, #116]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008738:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6892      	ldr	r2, [r2, #8]
 8008740:	0211      	lsls	r1, r2, #8
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6952      	ldr	r2, [r2, #20]
 8008746:	0852      	lsrs	r2, r2, #1
 8008748:	3a01      	subs	r2, #1
 800874a:	0652      	lsls	r2, r2, #25
 800874c:	430a      	orrs	r2, r1
 800874e:	4916      	ldr	r1, [pc, #88]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008750:	4313      	orrs	r3, r2
 8008752:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008754:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a13      	ldr	r2, [pc, #76]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800875a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800875e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008760:	f7fb fbaa 	bl	8003eb8 <HAL_GetTick>
 8008764:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008766:	e009      	b.n	800877c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008768:	f7fb fba6 	bl	8003eb8 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d902      	bls.n	800877c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	73fb      	strb	r3, [r7, #15]
          break;
 800877a:	e005      	b.n	8008788 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0ef      	beq.n	8008768 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800878e:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008790:	691a      	ldr	r2, [r3, #16]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	4904      	ldr	r1, [pc, #16]	; (80087a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008798:	4313      	orrs	r3, r2
 800879a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	40021000 	.word	0x40021000

080087ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e07c      	b.n	80088b8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d106      	bne.n	80087de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7fa fe59 	bl	8003490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087fe:	d902      	bls.n	8008806 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	e002      	b.n	800880c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800880a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008814:	d007      	beq.n	8008826 <HAL_SPI_Init+0x7a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800881e:	d002      	beq.n	8008826 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10b      	bne.n	8008846 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008836:	d903      	bls.n	8008840 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	631a      	str	r2, [r3, #48]	; 0x30
 800883e:	e002      	b.n	8008846 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	ea42 0103 	orr.w	r1, r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	0c1b      	lsrs	r3, r3, #16
 8008886:	f003 0204 	and.w	r2, r3, #4
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	ea42 0103 	orr.w	r1, r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08a      	sub	sp, #40	; 0x28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
 80088cc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80088ce:	2301      	movs	r3, #1
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d101      	bne.n	80088e6 <HAL_SPI_TransmitReceive+0x26>
 80088e2:	2302      	movs	r3, #2
 80088e4:	e1fb      	b.n	8008cde <HAL_SPI_TransmitReceive+0x41e>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088ee:	f7fb fae3 	bl	8003eb8 <HAL_GetTick>
 80088f2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088fa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008902:	887b      	ldrh	r3, [r7, #2]
 8008904:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008906:	887b      	ldrh	r3, [r7, #2]
 8008908:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800890a:	7efb      	ldrb	r3, [r7, #27]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d00e      	beq.n	800892e <HAL_SPI_TransmitReceive+0x6e>
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008916:	d106      	bne.n	8008926 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <HAL_SPI_TransmitReceive+0x66>
 8008920:	7efb      	ldrb	r3, [r7, #27]
 8008922:	2b04      	cmp	r3, #4
 8008924:	d003      	beq.n	800892e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008926:	2302      	movs	r3, #2
 8008928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800892c:	e1cd      	b.n	8008cca <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <HAL_SPI_TransmitReceive+0x80>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <HAL_SPI_TransmitReceive+0x80>
 800893a:	887b      	ldrh	r3, [r7, #2]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008946:	e1c0      	b.n	8008cca <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b04      	cmp	r3, #4
 8008952:	d003      	beq.n	800895c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2205      	movs	r2, #5
 8008958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	887a      	ldrh	r2, [r7, #2]
 800896c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	887a      	ldrh	r2, [r7, #2]
 8008974:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	887a      	ldrh	r2, [r7, #2]
 8008982:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	887a      	ldrh	r2, [r7, #2]
 8008988:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800899e:	d802      	bhi.n	80089a6 <HAL_SPI_TransmitReceive+0xe6>
 80089a0:	8a3b      	ldrh	r3, [r7, #16]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d908      	bls.n	80089b8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089b4:	605a      	str	r2, [r3, #4]
 80089b6:	e007      	b.n	80089c8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d2:	2b40      	cmp	r3, #64	; 0x40
 80089d4:	d007      	beq.n	80089e6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089ee:	d97c      	bls.n	8008aea <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_SPI_TransmitReceive+0x13e>
 80089f8:	8a7b      	ldrh	r3, [r7, #18]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d169      	bne.n	8008ad2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	881a      	ldrh	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0e:	1c9a      	adds	r2, r3, #2
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a22:	e056      	b.n	8008ad2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d11b      	bne.n	8008a6a <HAL_SPI_TransmitReceive+0x1aa>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d016      	beq.n	8008a6a <HAL_SPI_TransmitReceive+0x1aa>
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d113      	bne.n	8008a6a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	881a      	ldrh	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	1c9a      	adds	r2, r3, #2
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d11c      	bne.n	8008ab2 <HAL_SPI_TransmitReceive+0x1f2>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d016      	beq.n	8008ab2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68da      	ldr	r2, [r3, #12]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	b292      	uxth	r2, r2
 8008a90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a96:	1c9a      	adds	r2, r3, #2
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ab2:	f7fb fa01 	bl	8003eb8 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d807      	bhi.n	8008ad2 <HAL_SPI_TransmitReceive+0x212>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ac8:	d003      	beq.n	8008ad2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008ad0:	e0fb      	b.n	8008cca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1a3      	bne.n	8008a24 <HAL_SPI_TransmitReceive+0x164>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d19d      	bne.n	8008a24 <HAL_SPI_TransmitReceive+0x164>
 8008ae8:	e0df      	b.n	8008caa <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <HAL_SPI_TransmitReceive+0x23a>
 8008af2:	8a7b      	ldrh	r3, [r7, #18]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	f040 80cb 	bne.w	8008c90 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d912      	bls.n	8008b2a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b08:	881a      	ldrh	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	1c9a      	adds	r2, r3, #2
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	3b02      	subs	r3, #2
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b28:	e0b2      	b.n	8008c90 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	330c      	adds	r3, #12
 8008b34:	7812      	ldrb	r2, [r2, #0]
 8008b36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b50:	e09e      	b.n	8008c90 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f003 0302 	and.w	r3, r3, #2
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d134      	bne.n	8008bca <HAL_SPI_TransmitReceive+0x30a>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d02f      	beq.n	8008bca <HAL_SPI_TransmitReceive+0x30a>
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d12c      	bne.n	8008bca <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d912      	bls.n	8008ba0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7e:	881a      	ldrh	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	1c9a      	adds	r2, r3, #2
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	3b02      	subs	r3, #2
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b9e:	e012      	b.n	8008bc6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	330c      	adds	r3, #12
 8008baa:	7812      	ldrb	r2, [r2, #0]
 8008bac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	1c5a      	adds	r2, r3, #1
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d148      	bne.n	8008c6a <HAL_SPI_TransmitReceive+0x3aa>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d042      	beq.n	8008c6a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d923      	bls.n	8008c38 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	b292      	uxth	r2, r2
 8008bfc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c02:	1c9a      	adds	r2, r3, #2
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	3b02      	subs	r3, #2
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d81f      	bhi.n	8008c66 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c34:	605a      	str	r2, [r3, #4]
 8008c36:	e016      	b.n	8008c66 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f103 020c 	add.w	r2, r3, #12
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c44:	7812      	ldrb	r2, [r2, #0]
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c66:	2301      	movs	r3, #1
 8008c68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c6a:	f7fb f925 	bl	8003eb8 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d803      	bhi.n	8008c82 <HAL_SPI_TransmitReceive+0x3c2>
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c80:	d102      	bne.n	8008c88 <HAL_SPI_TransmitReceive+0x3c8>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d103      	bne.n	8008c90 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008c8e:	e01c      	b.n	8008cca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f47f af5b 	bne.w	8008b52 <HAL_SPI_TransmitReceive+0x292>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f47f af54 	bne.w	8008b52 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008caa:	69fa      	ldr	r2, [r7, #28]
 8008cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 f8f0 	bl	8008e94 <SPI_EndRxTxTransaction>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d006      	beq.n	8008cc8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	661a      	str	r2, [r3, #96]	; 0x60
 8008cc6:	e000      	b.n	8008cca <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008cc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008cda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3728      	adds	r7, #40	; 0x28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	603b      	str	r3, [r7, #0]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cf6:	e04c      	b.n	8008d92 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cfe:	d048      	beq.n	8008d92 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008d00:	f7fb f8da 	bl	8003eb8 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d902      	bls.n	8008d16 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d13d      	bne.n	8008d92 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d2e:	d111      	bne.n	8008d54 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d38:	d004      	beq.n	8008d44 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d42:	d107      	bne.n	8008d54 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d5c:	d10f      	bne.n	8008d7e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e00f      	b.n	8008db2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	bf0c      	ite	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	2300      	movne	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d1a3      	bne.n	8008cf8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	607a      	str	r2, [r7, #4]
 8008dc6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008dc8:	e057      	b.n	8008e7a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008dd0:	d106      	bne.n	8008de0 <SPI_WaitFifoStateUntilTimeout+0x26>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	330c      	adds	r3, #12
 8008dde:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008de6:	d048      	beq.n	8008e7a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008de8:	f7fb f866 	bl	8003eb8 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d902      	bls.n	8008dfe <SPI_WaitFifoStateUntilTimeout+0x44>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d13d      	bne.n	8008e7a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e16:	d111      	bne.n	8008e3c <SPI_WaitFifoStateUntilTimeout+0x82>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e20:	d004      	beq.n	8008e2c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e2a:	d107      	bne.n	8008e3c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e44:	d10f      	bne.n	8008e66 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e008      	b.n	8008e8c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4013      	ands	r3, r2
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d19f      	bne.n	8008dca <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af02      	add	r7, sp, #8
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f7ff ff84 	bl	8008dba <SPI_WaitFifoStateUntilTimeout>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d007      	beq.n	8008ec8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ebc:	f043 0220 	orr.w	r2, r3, #32
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e027      	b.n	8008f18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2180      	movs	r1, #128	; 0x80
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f7ff ff07 	bl	8008ce6 <SPI_WaitFlagStateUntilTimeout>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d007      	beq.n	8008eee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ee2:	f043 0220 	orr.w	r2, r3, #32
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e014      	b.n	8008f18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f7ff ff5d 	bl	8008dba <SPI_WaitFifoStateUntilTimeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d007      	beq.n	8008f16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f0a:	f043 0220 	orr.w	r2, r3, #32
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e000      	b.n	8008f18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e01d      	b.n	8008f6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7fa fd7c 	bl	8003a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	f000 fb0a 	bl	8009578 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0201 	bic.w	r2, r2, #1
 8008f8c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6a1a      	ldr	r2, [r3, #32]
 8008f94:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f98:	4013      	ands	r3, r2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10f      	bne.n	8008fbe <HAL_TIM_Base_Stop_IT+0x48>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6a1a      	ldr	r2, [r3, #32]
 8008fa4:	f240 4344 	movw	r3, #1092	; 0x444
 8008fa8:	4013      	ands	r3, r2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d107      	bne.n	8008fbe <HAL_TIM_Base_Stop_IT+0x48>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0201 	bic.w	r2, r2, #1
 8008fbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e01d      	b.n	800901a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d106      	bne.n	8008ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7fa fcee 	bl	80039d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3304      	adds	r3, #4
 8009008:	4619      	mov	r1, r3
 800900a:	4610      	mov	r0, r2
 800900c:	f000 fab4 	bl	8009578 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2201      	movs	r2, #1
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fd80 	bl	8009b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a19      	ldr	r2, [pc, #100]	; (80090a8 <HAL_TIM_PWM_Start+0x84>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d009      	beq.n	800905a <HAL_TIM_PWM_Start+0x36>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a18      	ldr	r2, [pc, #96]	; (80090ac <HAL_TIM_PWM_Start+0x88>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d004      	beq.n	800905a <HAL_TIM_PWM_Start+0x36>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a16      	ldr	r2, [pc, #88]	; (80090b0 <HAL_TIM_PWM_Start+0x8c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d101      	bne.n	800905e <HAL_TIM_PWM_Start+0x3a>
 800905a:	2301      	movs	r3, #1
 800905c:	e000      	b.n	8009060 <HAL_TIM_PWM_Start+0x3c>
 800905e:	2300      	movs	r3, #0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d007      	beq.n	8009074 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009072:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <HAL_TIM_PWM_Start+0x90>)
 800907c:	4013      	ands	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b06      	cmp	r3, #6
 8009084:	d00b      	beq.n	800909e <HAL_TIM_PWM_Start+0x7a>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800908c:	d007      	beq.n	800909e <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0201 	orr.w	r2, r2, #1
 800909c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	40012c00 	.word	0x40012c00
 80090ac:	40014000 	.word	0x40014000
 80090b0:	40014400 	.word	0x40014400
 80090b4:	00010007 	.word	0x00010007

080090b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d122      	bne.n	8009114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d11b      	bne.n	8009114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f06f 0202 	mvn.w	r2, #2
 80090e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa1e 	bl	800953c <HAL_TIM_IC_CaptureCallback>
 8009100:	e005      	b.n	800910e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa10 	bl	8009528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fa21 	bl	8009550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	f003 0304 	and.w	r3, r3, #4
 800911e:	2b04      	cmp	r3, #4
 8009120:	d122      	bne.n	8009168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b04      	cmp	r3, #4
 800912e:	d11b      	bne.n	8009168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f06f 0204 	mvn.w	r2, #4
 8009138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2202      	movs	r2, #2
 800913e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9f4 	bl	800953c <HAL_TIM_IC_CaptureCallback>
 8009154:	e005      	b.n	8009162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f9e6 	bl	8009528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f9f7 	bl	8009550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b08      	cmp	r3, #8
 8009174:	d122      	bne.n	80091bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b08      	cmp	r3, #8
 8009182:	d11b      	bne.n	80091bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f06f 0208 	mvn.w	r2, #8
 800918c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2204      	movs	r2, #4
 8009192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	f003 0303 	and.w	r3, r3, #3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d003      	beq.n	80091aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f9ca 	bl	800953c <HAL_TIM_IC_CaptureCallback>
 80091a8:	e005      	b.n	80091b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f9bc 	bl	8009528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f9cd 	bl	8009550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	f003 0310 	and.w	r3, r3, #16
 80091c6:	2b10      	cmp	r3, #16
 80091c8:	d122      	bne.n	8009210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f003 0310 	and.w	r3, r3, #16
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d11b      	bne.n	8009210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f06f 0210 	mvn.w	r2, #16
 80091e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2208      	movs	r2, #8
 80091e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f9a0 	bl	800953c <HAL_TIM_IC_CaptureCallback>
 80091fc:	e005      	b.n	800920a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f992 	bl	8009528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f9a3 	bl	8009550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10e      	bne.n	800923c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b01      	cmp	r3, #1
 800922a:	d107      	bne.n	800923c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f06f 0201 	mvn.w	r2, #1
 8009234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7f9 fbb6 	bl	80029a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009246:	2b80      	cmp	r3, #128	; 0x80
 8009248:	d10e      	bne.n	8009268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009254:	2b80      	cmp	r3, #128	; 0x80
 8009256:	d107      	bne.n	8009268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fd78 	bl	8009d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009276:	d10e      	bne.n	8009296 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009282:	2b80      	cmp	r3, #128	; 0x80
 8009284:	d107      	bne.n	8009296 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800928e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fd6b 	bl	8009d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a0:	2b40      	cmp	r3, #64	; 0x40
 80092a2:	d10e      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ae:	2b40      	cmp	r3, #64	; 0x40
 80092b0:	d107      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f951 	bl	8009564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d10e      	bne.n	80092ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b20      	cmp	r3, #32
 80092dc:	d107      	bne.n	80092ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f06f 0220 	mvn.w	r2, #32
 80092e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fd2b 	bl	8009d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800930a:	2b01      	cmp	r3, #1
 800930c:	d101      	bne.n	8009312 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800930e:	2302      	movs	r3, #2
 8009310:	e105      	b.n	800951e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2202      	movs	r2, #2
 800931e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b14      	cmp	r3, #20
 8009326:	f200 80f0 	bhi.w	800950a <HAL_TIM_PWM_ConfigChannel+0x212>
 800932a:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	08009385 	.word	0x08009385
 8009334:	0800950b 	.word	0x0800950b
 8009338:	0800950b 	.word	0x0800950b
 800933c:	0800950b 	.word	0x0800950b
 8009340:	080093c5 	.word	0x080093c5
 8009344:	0800950b 	.word	0x0800950b
 8009348:	0800950b 	.word	0x0800950b
 800934c:	0800950b 	.word	0x0800950b
 8009350:	08009407 	.word	0x08009407
 8009354:	0800950b 	.word	0x0800950b
 8009358:	0800950b 	.word	0x0800950b
 800935c:	0800950b 	.word	0x0800950b
 8009360:	08009447 	.word	0x08009447
 8009364:	0800950b 	.word	0x0800950b
 8009368:	0800950b 	.word	0x0800950b
 800936c:	0800950b 	.word	0x0800950b
 8009370:	08009489 	.word	0x08009489
 8009374:	0800950b 	.word	0x0800950b
 8009378:	0800950b 	.word	0x0800950b
 800937c:	0800950b 	.word	0x0800950b
 8009380:	080094c9 	.word	0x080094c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68b9      	ldr	r1, [r7, #8]
 800938a:	4618      	mov	r0, r3
 800938c:	f000 f958 	bl	8009640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	699a      	ldr	r2, [r3, #24]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0208 	orr.w	r2, r2, #8
 800939e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 0204 	bic.w	r2, r2, #4
 80093ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6999      	ldr	r1, [r3, #24]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	691a      	ldr	r2, [r3, #16]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	619a      	str	r2, [r3, #24]
      break;
 80093c2:	e0a3      	b.n	800950c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 f9b4 	bl	8009738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699a      	ldr	r2, [r3, #24]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6999      	ldr	r1, [r3, #24]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	021a      	lsls	r2, r3, #8
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	619a      	str	r2, [r3, #24]
      break;
 8009404:	e082      	b.n	800950c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68b9      	ldr	r1, [r7, #8]
 800940c:	4618      	mov	r0, r3
 800940e:	f000 fa0d 	bl	800982c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	69da      	ldr	r2, [r3, #28]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f042 0208 	orr.w	r2, r2, #8
 8009420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69da      	ldr	r2, [r3, #28]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0204 	bic.w	r2, r2, #4
 8009430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	69d9      	ldr	r1, [r3, #28]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	61da      	str	r2, [r3, #28]
      break;
 8009444:	e062      	b.n	800950c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fa65 	bl	800991c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69da      	ldr	r2, [r3, #28]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69da      	ldr	r2, [r3, #28]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69d9      	ldr	r1, [r3, #28]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	021a      	lsls	r2, r3, #8
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	61da      	str	r2, [r3, #28]
      break;
 8009486:	e041      	b.n	800950c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68b9      	ldr	r1, [r7, #8]
 800948e:	4618      	mov	r0, r3
 8009490:	f000 faa2 	bl	80099d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0208 	orr.w	r2, r2, #8
 80094a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 0204 	bic.w	r2, r2, #4
 80094b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	691a      	ldr	r2, [r3, #16]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094c6:	e021      	b.n	800950c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68b9      	ldr	r1, [r7, #8]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fada 	bl	8009a88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	021a      	lsls	r2, r3, #8
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009508:	e000      	b.n	800950c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800950a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop

08009528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a2a      	ldr	r2, [pc, #168]	; (8009634 <TIM_Base_SetConfig+0xbc>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_Base_SetConfig+0x20>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009596:	d108      	bne.n	80095aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800959e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a21      	ldr	r2, [pc, #132]	; (8009634 <TIM_Base_SetConfig+0xbc>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00b      	beq.n	80095ca <TIM_Base_SetConfig+0x52>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b8:	d007      	beq.n	80095ca <TIM_Base_SetConfig+0x52>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a1e      	ldr	r2, [pc, #120]	; (8009638 <TIM_Base_SetConfig+0xc0>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d003      	beq.n	80095ca <TIM_Base_SetConfig+0x52>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a1d      	ldr	r2, [pc, #116]	; (800963c <TIM_Base_SetConfig+0xc4>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d108      	bne.n	80095dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a0c      	ldr	r2, [pc, #48]	; (8009634 <TIM_Base_SetConfig+0xbc>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d007      	beq.n	8009618 <TIM_Base_SetConfig+0xa0>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a0b      	ldr	r2, [pc, #44]	; (8009638 <TIM_Base_SetConfig+0xc0>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d003      	beq.n	8009618 <TIM_Base_SetConfig+0xa0>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a0a      	ldr	r2, [pc, #40]	; (800963c <TIM_Base_SetConfig+0xc4>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d103      	bne.n	8009620 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	691a      	ldr	r2, [r3, #16]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	615a      	str	r2, [r3, #20]
}
 8009626:	bf00      	nop
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	40012c00 	.word	0x40012c00
 8009638:	40014000 	.word	0x40014000
 800963c:	40014400 	.word	0x40014400

08009640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	f023 0201 	bic.w	r2, r3, #1
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800966e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f023 0303 	bic.w	r3, r3, #3
 800967a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4313      	orrs	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f023 0302 	bic.w	r3, r3, #2
 800968c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	4313      	orrs	r3, r2
 8009696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a24      	ldr	r2, [pc, #144]	; (800972c <TIM_OC1_SetConfig+0xec>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d007      	beq.n	80096b0 <TIM_OC1_SetConfig+0x70>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a23      	ldr	r2, [pc, #140]	; (8009730 <TIM_OC1_SetConfig+0xf0>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d003      	beq.n	80096b0 <TIM_OC1_SetConfig+0x70>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a22      	ldr	r2, [pc, #136]	; (8009734 <TIM_OC1_SetConfig+0xf4>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d10c      	bne.n	80096ca <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f023 0308 	bic.w	r3, r3, #8
 80096b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	4313      	orrs	r3, r2
 80096c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f023 0304 	bic.w	r3, r3, #4
 80096c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a17      	ldr	r2, [pc, #92]	; (800972c <TIM_OC1_SetConfig+0xec>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d007      	beq.n	80096e2 <TIM_OC1_SetConfig+0xa2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a16      	ldr	r2, [pc, #88]	; (8009730 <TIM_OC1_SetConfig+0xf0>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d003      	beq.n	80096e2 <TIM_OC1_SetConfig+0xa2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a15      	ldr	r2, [pc, #84]	; (8009734 <TIM_OC1_SetConfig+0xf4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d111      	bne.n	8009706 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	4313      	orrs	r3, r2
 8009704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	621a      	str	r2, [r3, #32]
}
 8009720:	bf00      	nop
 8009722:	371c      	adds	r7, #28
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	40012c00 	.word	0x40012c00
 8009730:	40014000 	.word	0x40014000
 8009734:	40014400 	.word	0x40014400

08009738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	f023 0210 	bic.w	r2, r3, #16
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800976a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	021b      	lsls	r3, r3, #8
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	4313      	orrs	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f023 0320 	bic.w	r3, r3, #32
 8009786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	011b      	lsls	r3, r3, #4
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	4313      	orrs	r3, r2
 8009792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a22      	ldr	r2, [pc, #136]	; (8009820 <TIM_OC2_SetConfig+0xe8>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d10d      	bne.n	80097b8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	011b      	lsls	r3, r3, #4
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a19      	ldr	r2, [pc, #100]	; (8009820 <TIM_OC2_SetConfig+0xe8>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d007      	beq.n	80097d0 <TIM_OC2_SetConfig+0x98>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a18      	ldr	r2, [pc, #96]	; (8009824 <TIM_OC2_SetConfig+0xec>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d003      	beq.n	80097d0 <TIM_OC2_SetConfig+0x98>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a17      	ldr	r2, [pc, #92]	; (8009828 <TIM_OC2_SetConfig+0xf0>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d113      	bne.n	80097f8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	621a      	str	r2, [r3, #32]
}
 8009812:	bf00      	nop
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	40012c00 	.word	0x40012c00
 8009824:	40014000 	.word	0x40014000
 8009828:	40014400 	.word	0x40014400

0800982c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800985a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f023 0303 	bic.w	r3, r3, #3
 8009866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4313      	orrs	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	021b      	lsls	r3, r3, #8
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	4313      	orrs	r3, r2
 8009884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a21      	ldr	r2, [pc, #132]	; (8009910 <TIM_OC3_SetConfig+0xe4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d10d      	bne.n	80098aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	021b      	lsls	r3, r3, #8
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	4313      	orrs	r3, r2
 80098a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a18      	ldr	r2, [pc, #96]	; (8009910 <TIM_OC3_SetConfig+0xe4>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d007      	beq.n	80098c2 <TIM_OC3_SetConfig+0x96>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a17      	ldr	r2, [pc, #92]	; (8009914 <TIM_OC3_SetConfig+0xe8>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d003      	beq.n	80098c2 <TIM_OC3_SetConfig+0x96>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a16      	ldr	r2, [pc, #88]	; (8009918 <TIM_OC3_SetConfig+0xec>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d113      	bne.n	80098ea <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	4313      	orrs	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	011b      	lsls	r3, r3, #4
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	621a      	str	r2, [r3, #32]
}
 8009904:	bf00      	nop
 8009906:	371c      	adds	r7, #28
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	40012c00 	.word	0x40012c00
 8009914:	40014000 	.word	0x40014000
 8009918:	40014400 	.word	0x40014400

0800991c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800994a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800994e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	021b      	lsls	r3, r3, #8
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800996a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	031b      	lsls	r3, r3, #12
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a14      	ldr	r2, [pc, #80]	; (80099cc <TIM_OC4_SetConfig+0xb0>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d007      	beq.n	8009990 <TIM_OC4_SetConfig+0x74>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a13      	ldr	r2, [pc, #76]	; (80099d0 <TIM_OC4_SetConfig+0xb4>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d003      	beq.n	8009990 <TIM_OC4_SetConfig+0x74>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a12      	ldr	r2, [pc, #72]	; (80099d4 <TIM_OC4_SetConfig+0xb8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d109      	bne.n	80099a4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	019b      	lsls	r3, r3, #6
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	621a      	str	r2, [r3, #32]
}
 80099be:	bf00      	nop
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	40012c00 	.word	0x40012c00
 80099d0:	40014000 	.word	0x40014000
 80099d4:	40014400 	.word	0x40014400

080099d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	041b      	lsls	r3, r3, #16
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a13      	ldr	r2, [pc, #76]	; (8009a7c <TIM_OC5_SetConfig+0xa4>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d007      	beq.n	8009a42 <TIM_OC5_SetConfig+0x6a>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a12      	ldr	r2, [pc, #72]	; (8009a80 <TIM_OC5_SetConfig+0xa8>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d003      	beq.n	8009a42 <TIM_OC5_SetConfig+0x6a>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a11      	ldr	r2, [pc, #68]	; (8009a84 <TIM_OC5_SetConfig+0xac>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d109      	bne.n	8009a56 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	021b      	lsls	r3, r3, #8
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	621a      	str	r2, [r3, #32]
}
 8009a70:	bf00      	nop
 8009a72:	371c      	adds	r7, #28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	40012c00 	.word	0x40012c00
 8009a80:	40014000 	.word	0x40014000
 8009a84:	40014400 	.word	0x40014400

08009a88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	021b      	lsls	r3, r3, #8
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	051b      	lsls	r3, r3, #20
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a14      	ldr	r2, [pc, #80]	; (8009b30 <TIM_OC6_SetConfig+0xa8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d007      	beq.n	8009af4 <TIM_OC6_SetConfig+0x6c>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a13      	ldr	r2, [pc, #76]	; (8009b34 <TIM_OC6_SetConfig+0xac>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d003      	beq.n	8009af4 <TIM_OC6_SetConfig+0x6c>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a12      	ldr	r2, [pc, #72]	; (8009b38 <TIM_OC6_SetConfig+0xb0>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d109      	bne.n	8009b08 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009afa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	029b      	lsls	r3, r3, #10
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	621a      	str	r2, [r3, #32]
}
 8009b22:	bf00      	nop
 8009b24:	371c      	adds	r7, #28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	40012c00 	.word	0x40012c00
 8009b34:	40014000 	.word	0x40014000
 8009b38:	40014400 	.word	0x40014400

08009b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f003 031f 	and.w	r3, r3, #31
 8009b4e:	2201      	movs	r2, #1
 8009b50:	fa02 f303 	lsl.w	r3, r2, r3
 8009b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a1a      	ldr	r2, [r3, #32]
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	43db      	mvns	r3, r3
 8009b5e:	401a      	ands	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6a1a      	ldr	r2, [r3, #32]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f003 031f 	and.w	r3, r3, #31
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	fa01 f303 	lsl.w	r3, r1, r3
 8009b74:	431a      	orrs	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	621a      	str	r2, [r3, #32]
}
 8009b7a:	bf00      	nop
 8009b7c:	371c      	adds	r7, #28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
	...

08009b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d101      	bne.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	e04f      	b.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a21      	ldr	r2, [pc, #132]	; (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d108      	bne.n	8009bdc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009bd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a14      	ldr	r2, [pc, #80]	; (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d009      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c08:	d004      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a10      	ldr	r2, [pc, #64]	; (8009c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d10c      	bne.n	8009c2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40012c00 	.word	0x40012c00
 8009c50:	40014000 	.word	0x40014000

08009c54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d101      	bne.n	8009c70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e060      	b.n	8009d32 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	041b      	lsls	r3, r3, #16
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a14      	ldr	r2, [pc, #80]	; (8009d40 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d115      	bne.n	8009d20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	051b      	lsls	r3, r3, #20
 8009d00:	4313      	orrs	r3, r2
 8009d02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	6a1b      	ldr	r3, [r3, #32]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	40012c00 	.word	0x40012c00

08009d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e040      	b.n	8009e14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7f9 ff4e 	bl	8003c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2224      	movs	r2, #36	; 0x24
 8009dac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f022 0201 	bic.w	r2, r2, #1
 8009dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f9fa 	bl	800a1b8 <UART_SetConfig>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e022      	b.n	8009e14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fcd4 	bl	800a784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689a      	ldr	r2, [r3, #8]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0201 	orr.w	r2, r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fd5b 	bl	800a8c8 <UART_CheckIdleState>
 8009e12:	4603      	mov	r3, r0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08a      	sub	sp, #40	; 0x28
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	603b      	str	r3, [r7, #0]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e30:	2b20      	cmp	r3, #32
 8009e32:	f040 8081 	bne.w	8009f38 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <HAL_UART_Transmit+0x26>
 8009e3c:	88fb      	ldrh	r3, [r7, #6]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e079      	b.n	8009f3a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d101      	bne.n	8009e54 <HAL_UART_Transmit+0x38>
 8009e50:	2302      	movs	r3, #2
 8009e52:	e072      	b.n	8009f3a <HAL_UART_Transmit+0x11e>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2221      	movs	r2, #33	; 0x21
 8009e66:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009e68:	f7fa f826 	bl	8003eb8 <HAL_GetTick>
 8009e6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	88fa      	ldrh	r2, [r7, #6]
 8009e72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	88fa      	ldrh	r2, [r7, #6]
 8009e7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e86:	d108      	bne.n	8009e9a <HAL_UART_Transmit+0x7e>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8009e90:	2300      	movs	r3, #0
 8009e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	61bb      	str	r3, [r7, #24]
 8009e98:	e003      	b.n	8009ea2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009eaa:	e02d      	b.n	8009f08 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2180      	movs	r1, #128	; 0x80
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 fd4b 	bl	800a952 <UART_WaitOnFlagUntilTimeout>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e039      	b.n	8009f3a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10b      	bne.n	8009ee4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	881a      	ldrh	r2, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ed8:	b292      	uxth	r2, r2
 8009eda:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	3302      	adds	r3, #2
 8009ee0:	61bb      	str	r3, [r7, #24]
 8009ee2:	e008      	b.n	8009ef6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	781a      	ldrb	r2, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	b292      	uxth	r2, r2
 8009eee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	3b01      	subs	r3, #1
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1cb      	bne.n	8009eac <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	2140      	movs	r1, #64	; 0x40
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 fd17 	bl	800a952 <UART_WaitOnFlagUntilTimeout>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e005      	b.n	8009f3a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2220      	movs	r2, #32
 8009f32:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	e000      	b.n	8009f3a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009f38:	2302      	movs	r3, #2
  }
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3720      	adds	r7, #32
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f56:	2b20      	cmp	r3, #32
 8009f58:	f040 808a 	bne.w	800a070 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <HAL_UART_Receive_IT+0x24>
 8009f62:	88fb      	ldrh	r3, [r7, #6]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e082      	b.n	800a072 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d101      	bne.n	8009f7a <HAL_UART_Receive_IT+0x36>
 8009f76:	2302      	movs	r3, #2
 8009f78:	e07b      	b.n	800a072 <HAL_UART_Receive_IT+0x12e>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	88fa      	ldrh	r2, [r7, #6]
 8009f8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	88fa      	ldrh	r2, [r7, #6]
 8009f94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fa6:	d10e      	bne.n	8009fc6 <HAL_UART_Receive_IT+0x82>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d105      	bne.n	8009fbc <HAL_UART_Receive_IT+0x78>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009fb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009fba:	e02d      	b.n	800a018 <HAL_UART_Receive_IT+0xd4>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	22ff      	movs	r2, #255	; 0xff
 8009fc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009fc4:	e028      	b.n	800a018 <HAL_UART_Receive_IT+0xd4>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10d      	bne.n	8009fea <HAL_UART_Receive_IT+0xa6>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d104      	bne.n	8009fe0 <HAL_UART_Receive_IT+0x9c>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	22ff      	movs	r2, #255	; 0xff
 8009fda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009fde:	e01b      	b.n	800a018 <HAL_UART_Receive_IT+0xd4>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	227f      	movs	r2, #127	; 0x7f
 8009fe4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009fe8:	e016      	b.n	800a018 <HAL_UART_Receive_IT+0xd4>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ff2:	d10d      	bne.n	800a010 <HAL_UART_Receive_IT+0xcc>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d104      	bne.n	800a006 <HAL_UART_Receive_IT+0xc2>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	227f      	movs	r2, #127	; 0x7f
 800a000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a004:	e008      	b.n	800a018 <HAL_UART_Receive_IT+0xd4>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	223f      	movs	r2, #63	; 0x3f
 800a00a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a00e:	e003      	b.n	800a018 <HAL_UART_Receive_IT+0xd4>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2222      	movs	r2, #34	; 0x22
 800a022:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f042 0201 	orr.w	r2, r2, #1
 800a032:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a03c:	d107      	bne.n	800a04e <HAL_UART_Receive_IT+0x10a>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d103      	bne.n	800a04e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4a0d      	ldr	r2, [pc, #52]	; (800a080 <HAL_UART_Receive_IT+0x13c>)
 800a04a:	661a      	str	r2, [r3, #96]	; 0x60
 800a04c:	e002      	b.n	800a054 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4a0c      	ldr	r2, [pc, #48]	; (800a084 <HAL_UART_Receive_IT+0x140>)
 800a052:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a06a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	e000      	b.n	800a072 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a070:	2302      	movs	r3, #2
  }
}
 800a072:	4618      	mov	r0, r3
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	0800ac59 	.word	0x0800ac59
 800a084:	0800abaf 	.word	0x0800abaf

0800a088 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	4613      	mov	r3, r2
 800a094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a09a:	2b20      	cmp	r3, #32
 800a09c:	d16c      	bne.n	800a178 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <HAL_UART_Receive_DMA+0x22>
 800a0a4:	88fb      	ldrh	r3, [r7, #6]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e065      	b.n	800a17a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d101      	bne.n	800a0bc <HAL_UART_Receive_DMA+0x34>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e05e      	b.n	800a17a <HAL_UART_Receive_DMA+0xf2>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	88fa      	ldrh	r2, [r7, #6]
 800a0ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2222      	movs	r2, #34	; 0x22
 800a0dc:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d02a      	beq.n	800a13c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ea:	4a26      	ldr	r2, [pc, #152]	; (800a184 <HAL_UART_Receive_DMA+0xfc>)
 800a0ec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f2:	4a25      	ldr	r2, [pc, #148]	; (800a188 <HAL_UART_Receive_DMA+0x100>)
 800a0f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0fa:	4a24      	ldr	r2, [pc, #144]	; (800a18c <HAL_UART_Receive_DMA+0x104>)
 800a0fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a102:	2200      	movs	r2, #0
 800a104:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3324      	adds	r3, #36	; 0x24
 800a110:	4619      	mov	r1, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a116:	461a      	mov	r2, r3
 800a118:	88fb      	ldrh	r3, [r7, #6]
 800a11a:	f7fa ffc9 	bl	80050b0 <HAL_DMA_Start_IT>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00b      	beq.n	800a13c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2210      	movs	r2, #16
 800a128:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2220      	movs	r2, #32
 800a136:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e01e      	b.n	800a17a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a152:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689a      	ldr	r2, [r3, #8]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f042 0201 	orr.w	r2, r2, #1
 800a162:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a172:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	e000      	b.n	800a17a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800a178:	2302      	movs	r3, #2
  }
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	0800aab3 	.word	0x0800aab3
 800a188:	0800ab1b 	.word	0x0800ab1b
 800a18c:	0800ab37 	.word	0x0800ab37

0800a190 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a1bc:	b08a      	sub	sp, #40	; 0x28
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689a      	ldr	r2, [r3, #8]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	4bb3      	ldr	r3, [pc, #716]	; (800a4bc <UART_SetConfig+0x304>)
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	6812      	ldr	r2, [r2, #0]
 800a1f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1f6:	430b      	orrs	r3, r1
 800a1f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	68da      	ldr	r2, [r3, #12]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	430a      	orrs	r2, r1
 800a20e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4aa9      	ldr	r2, [pc, #676]	; (800a4c0 <UART_SetConfig+0x308>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d004      	beq.n	800a22a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a226:	4313      	orrs	r3, r2
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23a:	430a      	orrs	r2, r1
 800a23c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4aa0      	ldr	r2, [pc, #640]	; (800a4c4 <UART_SetConfig+0x30c>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d126      	bne.n	800a296 <UART_SetConfig+0xde>
 800a248:	4b9f      	ldr	r3, [pc, #636]	; (800a4c8 <UART_SetConfig+0x310>)
 800a24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a24e:	f003 0303 	and.w	r3, r3, #3
 800a252:	2b03      	cmp	r3, #3
 800a254:	d81a      	bhi.n	800a28c <UART_SetConfig+0xd4>
 800a256:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <UART_SetConfig+0xa4>)
 800a258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25c:	0800a26d 	.word	0x0800a26d
 800a260:	0800a27d 	.word	0x0800a27d
 800a264:	0800a275 	.word	0x0800a275
 800a268:	0800a285 	.word	0x0800a285
 800a26c:	2301      	movs	r3, #1
 800a26e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a272:	e080      	b.n	800a376 <UART_SetConfig+0x1be>
 800a274:	2302      	movs	r3, #2
 800a276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a27a:	e07c      	b.n	800a376 <UART_SetConfig+0x1be>
 800a27c:	2304      	movs	r3, #4
 800a27e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a282:	e078      	b.n	800a376 <UART_SetConfig+0x1be>
 800a284:	2308      	movs	r3, #8
 800a286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a28a:	e074      	b.n	800a376 <UART_SetConfig+0x1be>
 800a28c:	2310      	movs	r3, #16
 800a28e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a292:	bf00      	nop
 800a294:	e06f      	b.n	800a376 <UART_SetConfig+0x1be>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a8c      	ldr	r2, [pc, #560]	; (800a4cc <UART_SetConfig+0x314>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d138      	bne.n	800a312 <UART_SetConfig+0x15a>
 800a2a0:	4b89      	ldr	r3, [pc, #548]	; (800a4c8 <UART_SetConfig+0x310>)
 800a2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a6:	f003 030c 	and.w	r3, r3, #12
 800a2aa:	2b0c      	cmp	r3, #12
 800a2ac:	d82c      	bhi.n	800a308 <UART_SetConfig+0x150>
 800a2ae:	a201      	add	r2, pc, #4	; (adr r2, 800a2b4 <UART_SetConfig+0xfc>)
 800a2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b4:	0800a2e9 	.word	0x0800a2e9
 800a2b8:	0800a309 	.word	0x0800a309
 800a2bc:	0800a309 	.word	0x0800a309
 800a2c0:	0800a309 	.word	0x0800a309
 800a2c4:	0800a2f9 	.word	0x0800a2f9
 800a2c8:	0800a309 	.word	0x0800a309
 800a2cc:	0800a309 	.word	0x0800a309
 800a2d0:	0800a309 	.word	0x0800a309
 800a2d4:	0800a2f1 	.word	0x0800a2f1
 800a2d8:	0800a309 	.word	0x0800a309
 800a2dc:	0800a309 	.word	0x0800a309
 800a2e0:	0800a309 	.word	0x0800a309
 800a2e4:	0800a301 	.word	0x0800a301
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2ee:	e042      	b.n	800a376 <UART_SetConfig+0x1be>
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2f6:	e03e      	b.n	800a376 <UART_SetConfig+0x1be>
 800a2f8:	2304      	movs	r3, #4
 800a2fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2fe:	e03a      	b.n	800a376 <UART_SetConfig+0x1be>
 800a300:	2308      	movs	r3, #8
 800a302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a306:	e036      	b.n	800a376 <UART_SetConfig+0x1be>
 800a308:	2310      	movs	r3, #16
 800a30a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a30e:	bf00      	nop
 800a310:	e031      	b.n	800a376 <UART_SetConfig+0x1be>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a6a      	ldr	r2, [pc, #424]	; (800a4c0 <UART_SetConfig+0x308>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d129      	bne.n	800a370 <UART_SetConfig+0x1b8>
 800a31c:	4b6a      	ldr	r3, [pc, #424]	; (800a4c8 <UART_SetConfig+0x310>)
 800a31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a322:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a32a:	d014      	beq.n	800a356 <UART_SetConfig+0x19e>
 800a32c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a330:	d802      	bhi.n	800a338 <UART_SetConfig+0x180>
 800a332:	2b00      	cmp	r3, #0
 800a334:	d007      	beq.n	800a346 <UART_SetConfig+0x18e>
 800a336:	e016      	b.n	800a366 <UART_SetConfig+0x1ae>
 800a338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a33c:	d007      	beq.n	800a34e <UART_SetConfig+0x196>
 800a33e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a342:	d00c      	beq.n	800a35e <UART_SetConfig+0x1a6>
 800a344:	e00f      	b.n	800a366 <UART_SetConfig+0x1ae>
 800a346:	2300      	movs	r3, #0
 800a348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a34c:	e013      	b.n	800a376 <UART_SetConfig+0x1be>
 800a34e:	2302      	movs	r3, #2
 800a350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a354:	e00f      	b.n	800a376 <UART_SetConfig+0x1be>
 800a356:	2304      	movs	r3, #4
 800a358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a35c:	e00b      	b.n	800a376 <UART_SetConfig+0x1be>
 800a35e:	2308      	movs	r3, #8
 800a360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a364:	e007      	b.n	800a376 <UART_SetConfig+0x1be>
 800a366:	2310      	movs	r3, #16
 800a368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a36c:	bf00      	nop
 800a36e:	e002      	b.n	800a376 <UART_SetConfig+0x1be>
 800a370:	2310      	movs	r3, #16
 800a372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a51      	ldr	r2, [pc, #324]	; (800a4c0 <UART_SetConfig+0x308>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	f040 80fa 	bne.w	800a576 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a386:	2b08      	cmp	r3, #8
 800a388:	d823      	bhi.n	800a3d2 <UART_SetConfig+0x21a>
 800a38a:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <UART_SetConfig+0x1d8>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3b5 	.word	0x0800a3b5
 800a394:	0800a3d3 	.word	0x0800a3d3
 800a398:	0800a3bd 	.word	0x0800a3bd
 800a39c:	0800a3d3 	.word	0x0800a3d3
 800a3a0:	0800a3c3 	.word	0x0800a3c3
 800a3a4:	0800a3d3 	.word	0x0800a3d3
 800a3a8:	0800a3d3 	.word	0x0800a3d3
 800a3ac:	0800a3d3 	.word	0x0800a3d3
 800a3b0:	0800a3cb 	.word	0x0800a3cb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800a3b4:	f7fd fe7c 	bl	80080b0 <HAL_RCC_GetPCLK1Freq>
 800a3b8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3ba:	e00d      	b.n	800a3d8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a3bc:	4b44      	ldr	r3, [pc, #272]	; (800a4d0 <UART_SetConfig+0x318>)
 800a3be:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3c0:	e00a      	b.n	800a3d8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a3c2:	f7fd fddf 	bl	8007f84 <HAL_RCC_GetSysClockFreq>
 800a3c6:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3c8:	e006      	b.n	800a3d8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a3ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ce:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3d0:	e002      	b.n	800a3d8 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	76fb      	strb	r3, [r7, #27]
        break;
 800a3d6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 81c6 	beq.w	800a76c <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	005b      	lsls	r3, r3, #1
 800a3e8:	4413      	add	r3, r2
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d305      	bcc.n	800a3fc <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d902      	bls.n	800a402 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	76fb      	strb	r3, [r7, #27]
 800a400:	e1b4      	b.n	800a76c <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 800a402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a406:	2b08      	cmp	r3, #8
 800a408:	f200 80a2 	bhi.w	800a550 <UART_SetConfig+0x398>
 800a40c:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <UART_SetConfig+0x25c>)
 800a40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a412:	bf00      	nop
 800a414:	0800a439 	.word	0x0800a439
 800a418:	0800a551 	.word	0x0800a551
 800a41c:	0800a487 	.word	0x0800a487
 800a420:	0800a551 	.word	0x0800a551
 800a424:	0800a4d9 	.word	0x0800a4d9
 800a428:	0800a551 	.word	0x0800a551
 800a42c:	0800a551 	.word	0x0800a551
 800a430:	0800a551 	.word	0x0800a551
 800a434:	0800a527 	.word	0x0800a527
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800a438:	f7fd fe3a 	bl	80080b0 <HAL_RCC_GetPCLK1Freq>
 800a43c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	4619      	mov	r1, r3
 800a442:	f04f 0200 	mov.w	r2, #0
 800a446:	f04f 0300 	mov.w	r3, #0
 800a44a:	f04f 0400 	mov.w	r4, #0
 800a44e:	0214      	lsls	r4, r2, #8
 800a450:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a454:	020b      	lsls	r3, r1, #8
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	6852      	ldr	r2, [r2, #4]
 800a45a:	0852      	lsrs	r2, r2, #1
 800a45c:	4611      	mov	r1, r2
 800a45e:	f04f 0200 	mov.w	r2, #0
 800a462:	eb13 0b01 	adds.w	fp, r3, r1
 800a466:	eb44 0c02 	adc.w	ip, r4, r2
 800a46a:	4658      	mov	r0, fp
 800a46c:	4661      	mov	r1, ip
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f04f 0400 	mov.w	r4, #0
 800a476:	461a      	mov	r2, r3
 800a478:	4623      	mov	r3, r4
 800a47a:	f7f6 fc65 	bl	8000d48 <__aeabi_uldivmod>
 800a47e:	4603      	mov	r3, r0
 800a480:	460c      	mov	r4, r1
 800a482:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a484:	e067      	b.n	800a556 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	085b      	lsrs	r3, r3, #1
 800a48c:	f04f 0400 	mov.w	r4, #0
 800a490:	4910      	ldr	r1, [pc, #64]	; (800a4d4 <UART_SetConfig+0x31c>)
 800a492:	f04f 0200 	mov.w	r2, #0
 800a496:	eb13 0b01 	adds.w	fp, r3, r1
 800a49a:	eb44 0c02 	adc.w	ip, r4, r2
 800a49e:	4658      	mov	r0, fp
 800a4a0:	4661      	mov	r1, ip
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f04f 0400 	mov.w	r4, #0
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	f7f6 fc4b 	bl	8000d48 <__aeabi_uldivmod>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a4b8:	e04d      	b.n	800a556 <UART_SetConfig+0x39e>
 800a4ba:	bf00      	nop
 800a4bc:	efff69f3 	.word	0xefff69f3
 800a4c0:	40008000 	.word	0x40008000
 800a4c4:	40013800 	.word	0x40013800
 800a4c8:	40021000 	.word	0x40021000
 800a4cc:	40004400 	.word	0x40004400
 800a4d0:	00f42400 	.word	0x00f42400
 800a4d4:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800a4d8:	f7fd fd54 	bl	8007f84 <HAL_RCC_GetSysClockFreq>
 800a4dc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	f04f 0200 	mov.w	r2, #0
 800a4e6:	f04f 0300 	mov.w	r3, #0
 800a4ea:	f04f 0400 	mov.w	r4, #0
 800a4ee:	0214      	lsls	r4, r2, #8
 800a4f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a4f4:	020b      	lsls	r3, r1, #8
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	6852      	ldr	r2, [r2, #4]
 800a4fa:	0852      	lsrs	r2, r2, #1
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	f04f 0200 	mov.w	r2, #0
 800a502:	eb13 0b01 	adds.w	fp, r3, r1
 800a506:	eb44 0c02 	adc.w	ip, r4, r2
 800a50a:	4658      	mov	r0, fp
 800a50c:	4661      	mov	r1, ip
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f04f 0400 	mov.w	r4, #0
 800a516:	461a      	mov	r2, r3
 800a518:	4623      	mov	r3, r4
 800a51a:	f7f6 fc15 	bl	8000d48 <__aeabi_uldivmod>
 800a51e:	4603      	mov	r3, r0
 800a520:	460c      	mov	r4, r1
 800a522:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a524:	e017      	b.n	800a556 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	085b      	lsrs	r3, r3, #1
 800a52c:	f04f 0400 	mov.w	r4, #0
 800a530:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800a534:	f144 0100 	adc.w	r1, r4, #0
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f04f 0400 	mov.w	r4, #0
 800a540:	461a      	mov	r2, r3
 800a542:	4623      	mov	r3, r4
 800a544:	f7f6 fc00 	bl	8000d48 <__aeabi_uldivmod>
 800a548:	4603      	mov	r3, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a54e:	e002      	b.n	800a556 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	76fb      	strb	r3, [r7, #27]
            break;
 800a554:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a55c:	d308      	bcc.n	800a570 <UART_SetConfig+0x3b8>
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a564:	d204      	bcs.n	800a570 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69fa      	ldr	r2, [r7, #28]
 800a56c:	60da      	str	r2, [r3, #12]
 800a56e:	e0fd      	b.n	800a76c <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	76fb      	strb	r3, [r7, #27]
 800a574:	e0fa      	b.n	800a76c <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	69db      	ldr	r3, [r3, #28]
 800a57a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a57e:	f040 8083 	bne.w	800a688 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 800a582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a586:	2b08      	cmp	r3, #8
 800a588:	d85e      	bhi.n	800a648 <UART_SetConfig+0x490>
 800a58a:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <UART_SetConfig+0x3d8>)
 800a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a590:	0800a5b5 	.word	0x0800a5b5
 800a594:	0800a5d5 	.word	0x0800a5d5
 800a598:	0800a5f5 	.word	0x0800a5f5
 800a59c:	0800a649 	.word	0x0800a649
 800a5a0:	0800a611 	.word	0x0800a611
 800a5a4:	0800a649 	.word	0x0800a649
 800a5a8:	0800a649 	.word	0x0800a649
 800a5ac:	0800a649 	.word	0x0800a649
 800a5b0:	0800a631 	.word	0x0800a631
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5b4:	f7fd fd7c 	bl	80080b0 <HAL_RCC_GetPCLK1Freq>
 800a5b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	005a      	lsls	r2, r3, #1
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	085b      	lsrs	r3, r3, #1
 800a5c4:	441a      	add	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a5d2:	e03c      	b.n	800a64e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5d4:	f7fd fd82 	bl	80080dc <HAL_RCC_GetPCLK2Freq>
 800a5d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	005a      	lsls	r2, r3, #1
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	085b      	lsrs	r3, r3, #1
 800a5e4:	441a      	add	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a5f2:	e02c      	b.n	800a64e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	085b      	lsrs	r3, r3, #1
 800a5fa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800a5fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6852      	ldr	r2, [r2, #4]
 800a606:	fbb3 f3f2 	udiv	r3, r3, r2
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a60e:	e01e      	b.n	800a64e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a610:	f7fd fcb8 	bl	8007f84 <HAL_RCC_GetSysClockFreq>
 800a614:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	005a      	lsls	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	085b      	lsrs	r3, r3, #1
 800a620:	441a      	add	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	fbb2 f3f3 	udiv	r3, r2, r3
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a62e:	e00e      	b.n	800a64e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	085b      	lsrs	r3, r3, #1
 800a636:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a642:	b29b      	uxth	r3, r3
 800a644:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a646:	e002      	b.n	800a64e <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	76fb      	strb	r3, [r7, #27]
        break;
 800a64c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	2b0f      	cmp	r3, #15
 800a652:	d916      	bls.n	800a682 <UART_SetConfig+0x4ca>
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a65a:	d212      	bcs.n	800a682 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	b29b      	uxth	r3, r3
 800a660:	f023 030f 	bic.w	r3, r3, #15
 800a664:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	085b      	lsrs	r3, r3, #1
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	f003 0307 	and.w	r3, r3, #7
 800a670:	b29a      	uxth	r2, r3
 800a672:	89fb      	ldrh	r3, [r7, #14]
 800a674:	4313      	orrs	r3, r2
 800a676:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	89fa      	ldrh	r2, [r7, #14]
 800a67e:	60da      	str	r2, [r3, #12]
 800a680:	e074      	b.n	800a76c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	76fb      	strb	r3, [r7, #27]
 800a686:	e071      	b.n	800a76c <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 800a688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a68c:	2b08      	cmp	r3, #8
 800a68e:	d85c      	bhi.n	800a74a <UART_SetConfig+0x592>
 800a690:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <UART_SetConfig+0x4e0>)
 800a692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a696:	bf00      	nop
 800a698:	0800a6bd 	.word	0x0800a6bd
 800a69c:	0800a6db 	.word	0x0800a6db
 800a6a0:	0800a6f9 	.word	0x0800a6f9
 800a6a4:	0800a74b 	.word	0x0800a74b
 800a6a8:	0800a715 	.word	0x0800a715
 800a6ac:	0800a74b 	.word	0x0800a74b
 800a6b0:	0800a74b 	.word	0x0800a74b
 800a6b4:	0800a74b 	.word	0x0800a74b
 800a6b8:	0800a733 	.word	0x0800a733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6bc:	f7fd fcf8 	bl	80080b0 <HAL_RCC_GetPCLK1Freq>
 800a6c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	085a      	lsrs	r2, r3, #1
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	441a      	add	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a6d8:	e03a      	b.n	800a750 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6da:	f7fd fcff 	bl	80080dc <HAL_RCC_GetPCLK2Freq>
 800a6de:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	085a      	lsrs	r2, r3, #1
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	441a      	add	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a6f6:	e02b      	b.n	800a750 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	085b      	lsrs	r3, r3, #1
 800a6fe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a702:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6852      	ldr	r2, [r2, #4]
 800a70a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a70e:	b29b      	uxth	r3, r3
 800a710:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a712:	e01d      	b.n	800a750 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a714:	f7fd fc36 	bl	8007f84 <HAL_RCC_GetSysClockFreq>
 800a718:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	085a      	lsrs	r2, r3, #1
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	441a      	add	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a730:	e00e      	b.n	800a750 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	085b      	lsrs	r3, r3, #1
 800a738:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	fbb2 f3f3 	udiv	r3, r2, r3
 800a744:	b29b      	uxth	r3, r3
 800a746:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a748:	e002      	b.n	800a750 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	76fb      	strb	r3, [r7, #27]
        break;
 800a74e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	2b0f      	cmp	r3, #15
 800a754:	d908      	bls.n	800a768 <UART_SetConfig+0x5b0>
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a75c:	d204      	bcs.n	800a768 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	69fa      	ldr	r2, [r7, #28]
 800a764:	60da      	str	r2, [r3, #12]
 800a766:	e001      	b.n	800a76c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a778:	7efb      	ldrb	r3, [r7, #27]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3728      	adds	r7, #40	; 0x28
 800a77e:	46bd      	mov	sp, r7
 800a780:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00a      	beq.n	800a7ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b2:	f003 0302 	and.w	r3, r3, #2
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00a      	beq.n	800a7f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	f003 0308 	and.w	r3, r3, #8
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00a      	beq.n	800a814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	430a      	orrs	r2, r1
 800a812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	f003 0310 	and.w	r3, r3, #16
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00a      	beq.n	800a836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83a:	f003 0320 	and.w	r3, r3, #32
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00a      	beq.n	800a858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	430a      	orrs	r2, r1
 800a856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a860:	2b00      	cmp	r3, #0
 800a862:	d01a      	beq.n	800a89a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	430a      	orrs	r2, r1
 800a878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a882:	d10a      	bne.n	800a89a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00a      	beq.n	800a8bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	605a      	str	r2, [r3, #4]
  }
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af02      	add	r7, sp, #8
 800a8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a8d6:	f7f9 faef 	bl	8003eb8 <HAL_GetTick>
 800a8da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0308 	and.w	r3, r3, #8
 800a8e6:	2b08      	cmp	r3, #8
 800a8e8:	d10e      	bne.n	800a908 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f82a 	bl	800a952 <UART_WaitOnFlagUntilTimeout>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e020      	b.n	800a94a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0304 	and.w	r3, r3, #4
 800a912:	2b04      	cmp	r3, #4
 800a914:	d10e      	bne.n	800a934 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a916:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f814 	bl	800a952 <UART_WaitOnFlagUntilTimeout>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d001      	beq.n	800a934 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a930:	2303      	movs	r3, #3
 800a932:	e00a      	b.n	800a94a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2220      	movs	r2, #32
 800a938:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2220      	movs	r2, #32
 800a93e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b084      	sub	sp, #16
 800a956:	af00      	add	r7, sp, #0
 800a958:	60f8      	str	r0, [r7, #12]
 800a95a:	60b9      	str	r1, [r7, #8]
 800a95c:	603b      	str	r3, [r7, #0]
 800a95e:	4613      	mov	r3, r2
 800a960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a962:	e05d      	b.n	800aa20 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a96a:	d059      	beq.n	800aa20 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a96c:	f7f9 faa4 	bl	8003eb8 <HAL_GetTick>
 800a970:	4602      	mov	r2, r0
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d302      	bcc.n	800a982 <UART_WaitOnFlagUntilTimeout+0x30>
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d11b      	bne.n	800a9ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a990:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0201 	bic.w	r2, r2, #1
 800a9a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2220      	movs	r2, #32
 800a9a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2220      	movs	r2, #32
 800a9ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a9b6:	2303      	movs	r3, #3
 800a9b8:	e042      	b.n	800aa40 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d02b      	beq.n	800aa20 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	69db      	ldr	r3, [r3, #28]
 800a9ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9d6:	d123      	bne.n	800aa20 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9e0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9f0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f022 0201 	bic.w	r2, r2, #1
 800aa00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2220      	movs	r2, #32
 800aa06:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2220      	movs	r2, #32
 800aa12:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e00f      	b.n	800aa40 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	69da      	ldr	r2, [r3, #28]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	bf0c      	ite	eq
 800aa30:	2301      	moveq	r3, #1
 800aa32:	2300      	movne	r3, #0
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	461a      	mov	r2, r3
 800aa38:	79fb      	ldrb	r3, [r7, #7]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d092      	beq.n	800a964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aa5e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2220      	movs	r2, #32
 800aa64:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa72:	b480      	push	{r7}
 800aa74:	b083      	sub	sp, #12
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa88:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	689a      	ldr	r2, [r3, #8]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f022 0201 	bic.w	r2, r2, #1
 800aa98:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2220      	movs	r2, #32
 800aa9e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	661a      	str	r2, [r3, #96]	; 0x60
}
 800aaa6:	bf00      	nop
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b084      	sub	sp, #16
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aabe:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d11e      	bne.n	800ab0c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aae4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	689a      	ldr	r2, [r3, #8]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f022 0201 	bic.w	r2, r2, #1
 800aaf4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	689a      	ldr	r2, [r3, #8]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab04:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2220      	movs	r2, #32
 800ab0a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f7f6 fbd1 	bl	80012b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab26:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f7ff fb31 	bl	800a190 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab2e:	bf00      	nop
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b086      	sub	sp, #24
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab42:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab48:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab5a:	2b80      	cmp	r3, #128	; 0x80
 800ab5c:	d109      	bne.n	800ab72 <UART_DMAError+0x3c>
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	2b21      	cmp	r3, #33	; 0x21
 800ab62:	d106      	bne.n	800ab72 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ab6c:	6978      	ldr	r0, [r7, #20]
 800ab6e:	f7ff ff6b 	bl	800aa48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab7c:	2b40      	cmp	r3, #64	; 0x40
 800ab7e:	d109      	bne.n	800ab94 <UART_DMAError+0x5e>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2b22      	cmp	r3, #34	; 0x22
 800ab84:	d106      	bne.n	800ab94 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ab8e:	6978      	ldr	r0, [r7, #20]
 800ab90:	f7ff ff6f 	bl	800aa72 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab98:	f043 0210 	orr.w	r2, r3, #16
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aba0:	6978      	ldr	r0, [r7, #20]
 800aba2:	f7ff faff 	bl	800a1a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aba6:	bf00      	nop
 800aba8:	3718      	adds	r7, #24
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b084      	sub	sp, #16
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800abbc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abc2:	2b22      	cmp	r3, #34	; 0x22
 800abc4:	d13a      	bne.n	800ac3c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800abcc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abce:	89bb      	ldrh	r3, [r7, #12]
 800abd0:	b2d9      	uxtb	r1, r3
 800abd2:	89fb      	ldrh	r3, [r7, #14]
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abda:	400a      	ands	r2, r1
 800abdc:	b2d2      	uxtb	r2, r2
 800abde:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	3b01      	subs	r3, #1
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d123      	bne.n	800ac50 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac16:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	689a      	ldr	r2, [r3, #8]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f022 0201 	bic.w	r2, r2, #1
 800ac26:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7f6 fb3d 	bl	80012b4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac3a:	e009      	b.n	800ac50 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	8b1b      	ldrh	r3, [r3, #24]
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f042 0208 	orr.w	r2, r2, #8
 800ac4c:	b292      	uxth	r2, r2
 800ac4e:	831a      	strh	r2, [r3, #24]
}
 800ac50:	bf00      	nop
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac66:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac6c:	2b22      	cmp	r3, #34	; 0x22
 800ac6e:	d13a      	bne.n	800ace6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ac76:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac7c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ac7e:	89ba      	ldrh	r2, [r7, #12]
 800ac80:	89fb      	ldrh	r3, [r7, #14]
 800ac82:	4013      	ands	r3, r2
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac8e:	1c9a      	adds	r2, r3, #2
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800acac:	b29b      	uxth	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d123      	bne.n	800acfa <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800acc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 0201 	bic.w	r2, r2, #1
 800acd0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2220      	movs	r2, #32
 800acd6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7f6 fae8 	bl	80012b4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ace4:	e009      	b.n	800acfa <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	8b1b      	ldrh	r3, [r3, #24]
 800acec:	b29a      	uxth	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0208 	orr.w	r2, r2, #8
 800acf6:	b292      	uxth	r2, r2
 800acf8:	831a      	strh	r2, [r3, #24]
}
 800acfa:	bf00      	nop
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ad02:	b084      	sub	sp, #16
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	f107 0014 	add.w	r0, r7, #20
 800ad10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	b004      	add	sp, #16
 800ad22:	4770      	bx	lr

0800ad24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ad2c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ad30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr

0800ad56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ad56:	b480      	push	{r7}
 800ad58:	b085      	sub	sp, #20
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ad5e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ad62:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	43db      	mvns	r3, r3
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	4013      	ands	r3, r2
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ada6:	b084      	sub	sp, #16
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	f107 0014 	add.w	r0, r7, #20
 800adb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7ff ffa3 	bl	800ad24 <USB_EnableGlobalInt>

  return HAL_OK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800adea:	b004      	add	sp, #16
 800adec:	4770      	bx	lr
	...

0800adf0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800adf0:	b490      	push	{r4, r7}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ae10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae14:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	78db      	ldrb	r3, [r3, #3]
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d819      	bhi.n	800ae52 <USB_ActivateEndpoint+0x62>
 800ae1e:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <USB_ActivateEndpoint+0x34>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae35 	.word	0x0800ae35
 800ae28:	0800ae49 	.word	0x0800ae49
 800ae2c:	0800ae59 	.word	0x0800ae59
 800ae30:	0800ae3f 	.word	0x0800ae3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ae34:	89bb      	ldrh	r3, [r7, #12]
 800ae36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae3a:	81bb      	strh	r3, [r7, #12]
      break;
 800ae3c:	e00d      	b.n	800ae5a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ae3e:	89bb      	ldrh	r3, [r7, #12]
 800ae40:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ae44:	81bb      	strh	r3, [r7, #12]
      break;
 800ae46:	e008      	b.n	800ae5a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ae48:	89bb      	ldrh	r3, [r7, #12]
 800ae4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae4e:	81bb      	strh	r3, [r7, #12]
      break;
 800ae50:	e003      	b.n	800ae5a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	73fb      	strb	r3, [r7, #15]
      break;
 800ae56:	e000      	b.n	800ae5a <USB_ActivateEndpoint+0x6a>
      break;
 800ae58:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	441a      	add	r2, r3
 800ae64:	89bb      	ldrh	r3, [r7, #12]
 800ae66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	b21b      	sxth	r3, r3
 800ae8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae92:	b21a      	sxth	r2, r3
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	b21b      	sxth	r3, r3
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	b21b      	sxth	r3, r3
 800ae9e:	b29c      	uxth	r4, r3
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	441a      	add	r2, r3
 800aeaa:	4b8a      	ldr	r3, [pc, #552]	; (800b0d4 <USB_ActivateEndpoint+0x2e4>)
 800aeac:	4323      	orrs	r3, r4
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	7b1b      	ldrb	r3, [r3, #12]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f040 8112 	bne.w	800b0e0 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	785b      	ldrb	r3, [r3, #1]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d067      	beq.n	800af94 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aec4:	687c      	ldr	r4, [r7, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aecc:	b29b      	uxth	r3, r3
 800aece:	441c      	add	r4, r3
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	00db      	lsls	r3, r3, #3
 800aed6:	4423      	add	r3, r4
 800aed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aedc:	461c      	mov	r4, r3
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	88db      	ldrh	r3, [r3, #6]
 800aee2:	085b      	lsrs	r3, r3, #1
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	005b      	lsls	r3, r3, #1
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	b29c      	uxth	r4, r3
 800aefa:	4623      	mov	r3, r4
 800aefc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af00:	2b00      	cmp	r3, #0
 800af02:	d014      	beq.n	800af2e <USB_ActivateEndpoint+0x13e>
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	b29b      	uxth	r3, r3
 800af12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1a:	b29c      	uxth	r4, r3
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	441a      	add	r2, r3
 800af26:	4b6c      	ldr	r3, [pc, #432]	; (800b0d8 <USB_ActivateEndpoint+0x2e8>)
 800af28:	4323      	orrs	r3, r4
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	78db      	ldrb	r3, [r3, #3]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d018      	beq.n	800af68 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	881b      	ldrh	r3, [r3, #0]
 800af42:	b29b      	uxth	r3, r3
 800af44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af4c:	b29c      	uxth	r4, r3
 800af4e:	f084 0320 	eor.w	r3, r4, #32
 800af52:	b29c      	uxth	r4, r3
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	441a      	add	r2, r3
 800af5e:	4b5d      	ldr	r3, [pc, #372]	; (800b0d4 <USB_ActivateEndpoint+0x2e4>)
 800af60:	4323      	orrs	r3, r4
 800af62:	b29b      	uxth	r3, r3
 800af64:	8013      	strh	r3, [r2, #0]
 800af66:	e22b      	b.n	800b3c0 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	b29b      	uxth	r3, r3
 800af76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af7e:	b29c      	uxth	r4, r3
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	441a      	add	r2, r3
 800af8a:	4b52      	ldr	r3, [pc, #328]	; (800b0d4 <USB_ActivateEndpoint+0x2e4>)
 800af8c:	4323      	orrs	r3, r4
 800af8e:	b29b      	uxth	r3, r3
 800af90:	8013      	strh	r3, [r2, #0]
 800af92:	e215      	b.n	800b3c0 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800af94:	687c      	ldr	r4, [r7, #4]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	441c      	add	r4, r3
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	4423      	add	r3, r4
 800afa8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800afac:	461c      	mov	r4, r3
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	88db      	ldrh	r3, [r3, #6]
 800afb2:	085b      	lsrs	r3, r3, #1
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	b29b      	uxth	r3, r3
 800afba:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800afbc:	687c      	ldr	r4, [r7, #4]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	441c      	add	r4, r3
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	00db      	lsls	r3, r3, #3
 800afce:	4423      	add	r3, r4
 800afd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800afd4:	461c      	mov	r4, r3
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10e      	bne.n	800affc <USB_ActivateEndpoint+0x20c>
 800afde:	8823      	ldrh	r3, [r4, #0]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	8023      	strh	r3, [r4, #0]
 800afea:	8823      	ldrh	r3, [r4, #0]
 800afec:	b29b      	uxth	r3, r3
 800afee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	8023      	strh	r3, [r4, #0]
 800affa:	e02d      	b.n	800b058 <USB_ActivateEndpoint+0x268>
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	2b3e      	cmp	r3, #62	; 0x3e
 800b002:	d812      	bhi.n	800b02a <USB_ActivateEndpoint+0x23a>
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	085b      	lsrs	r3, r3, #1
 800b00a:	60bb      	str	r3, [r7, #8]
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <USB_ActivateEndpoint+0x22e>
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	3301      	adds	r3, #1
 800b01c:	60bb      	str	r3, [r7, #8]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	b29b      	uxth	r3, r3
 800b022:	029b      	lsls	r3, r3, #10
 800b024:	b29b      	uxth	r3, r3
 800b026:	8023      	strh	r3, [r4, #0]
 800b028:	e016      	b.n	800b058 <USB_ActivateEndpoint+0x268>
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	095b      	lsrs	r3, r3, #5
 800b030:	60bb      	str	r3, [r7, #8]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	f003 031f 	and.w	r3, r3, #31
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d102      	bne.n	800b044 <USB_ActivateEndpoint+0x254>
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	3b01      	subs	r3, #1
 800b042:	60bb      	str	r3, [r7, #8]
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	b29b      	uxth	r3, r3
 800b048:	029b      	lsls	r3, r3, #10
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b054:	b29b      	uxth	r3, r3
 800b056:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	b29c      	uxth	r4, r3
 800b066:	4623      	mov	r3, r4
 800b068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d014      	beq.n	800b09a <USB_ActivateEndpoint+0x2aa>
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	881b      	ldrh	r3, [r3, #0]
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b086:	b29c      	uxth	r4, r3
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	441a      	add	r2, r3
 800b092:	4b12      	ldr	r3, [pc, #72]	; (800b0dc <USB_ActivateEndpoint+0x2ec>)
 800b094:	4323      	orrs	r3, r4
 800b096:	b29b      	uxth	r3, r3
 800b098:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	881b      	ldrh	r3, [r3, #0]
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0b0:	b29c      	uxth	r4, r3
 800b0b2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b0b6:	b29c      	uxth	r4, r3
 800b0b8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800b0bc:	b29c      	uxth	r4, r3
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	441a      	add	r2, r3
 800b0c8:	4b02      	ldr	r3, [pc, #8]	; (800b0d4 <USB_ActivateEndpoint+0x2e4>)
 800b0ca:	4323      	orrs	r3, r4
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	8013      	strh	r3, [r2, #0]
 800b0d0:	e176      	b.n	800b3c0 <USB_ActivateEndpoint+0x5d0>
 800b0d2:	bf00      	nop
 800b0d4:	ffff8080 	.word	0xffff8080
 800b0d8:	ffff80c0 	.word	0xffff80c0
 800b0dc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0f6:	b29c      	uxth	r4, r3
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	441a      	add	r2, r3
 800b102:	4b96      	ldr	r3, [pc, #600]	; (800b35c <USB_ActivateEndpoint+0x56c>)
 800b104:	4323      	orrs	r3, r4
 800b106:	b29b      	uxth	r3, r3
 800b108:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b10a:	687c      	ldr	r4, [r7, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b112:	b29b      	uxth	r3, r3
 800b114:	441c      	add	r4, r3
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	00db      	lsls	r3, r3, #3
 800b11c:	4423      	add	r3, r4
 800b11e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b122:	461c      	mov	r4, r3
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	891b      	ldrh	r3, [r3, #8]
 800b128:	085b      	lsrs	r3, r3, #1
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	005b      	lsls	r3, r3, #1
 800b12e:	b29b      	uxth	r3, r3
 800b130:	8023      	strh	r3, [r4, #0]
 800b132:	687c      	ldr	r4, [r7, #4]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	441c      	add	r4, r3
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	4423      	add	r3, r4
 800b146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b14a:	461c      	mov	r4, r3
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	895b      	ldrh	r3, [r3, #10]
 800b150:	085b      	lsrs	r3, r3, #1
 800b152:	b29b      	uxth	r3, r3
 800b154:	005b      	lsls	r3, r3, #1
 800b156:	b29b      	uxth	r3, r3
 800b158:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	785b      	ldrb	r3, [r3, #1]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f040 8088 	bne.w	800b274 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	b29c      	uxth	r4, r3
 800b172:	4623      	mov	r3, r4
 800b174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d014      	beq.n	800b1a6 <USB_ActivateEndpoint+0x3b6>
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	881b      	ldrh	r3, [r3, #0]
 800b188:	b29b      	uxth	r3, r3
 800b18a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b18e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b192:	b29c      	uxth	r4, r3
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	441a      	add	r2, r3
 800b19e:	4b70      	ldr	r3, [pc, #448]	; (800b360 <USB_ActivateEndpoint+0x570>)
 800b1a0:	4323      	orrs	r3, r4
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	b29c      	uxth	r4, r3
 800b1b4:	4623      	mov	r3, r4
 800b1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d014      	beq.n	800b1e8 <USB_ActivateEndpoint+0x3f8>
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1d4:	b29c      	uxth	r4, r3
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	441a      	add	r2, r3
 800b1e0:	4b60      	ldr	r3, [pc, #384]	; (800b364 <USB_ActivateEndpoint+0x574>)
 800b1e2:	4323      	orrs	r3, r4
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1fe:	b29c      	uxth	r4, r3
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	441a      	add	r2, r3
 800b20a:	4b56      	ldr	r3, [pc, #344]	; (800b364 <USB_ActivateEndpoint+0x574>)
 800b20c:	4323      	orrs	r3, r4
 800b20e:	b29b      	uxth	r3, r3
 800b210:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4413      	add	r3, r2
 800b21c:	881b      	ldrh	r3, [r3, #0]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b228:	b29c      	uxth	r4, r3
 800b22a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b22e:	b29c      	uxth	r4, r3
 800b230:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800b234:	b29c      	uxth	r4, r3
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	441a      	add	r2, r3
 800b240:	4b49      	ldr	r3, [pc, #292]	; (800b368 <USB_ActivateEndpoint+0x578>)
 800b242:	4323      	orrs	r3, r4
 800b244:	b29b      	uxth	r3, r3
 800b246:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	881b      	ldrh	r3, [r3, #0]
 800b254:	b29b      	uxth	r3, r3
 800b256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b25a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b25e:	b29c      	uxth	r4, r3
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	441a      	add	r2, r3
 800b26a:	4b3f      	ldr	r3, [pc, #252]	; (800b368 <USB_ActivateEndpoint+0x578>)
 800b26c:	4323      	orrs	r3, r4
 800b26e:	b29b      	uxth	r3, r3
 800b270:	8013      	strh	r3, [r2, #0]
 800b272:	e0a5      	b.n	800b3c0 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	b29c      	uxth	r4, r3
 800b282:	4623      	mov	r3, r4
 800b284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d014      	beq.n	800b2b6 <USB_ActivateEndpoint+0x4c6>
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2a2:	b29c      	uxth	r4, r3
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	441a      	add	r2, r3
 800b2ae:	4b2c      	ldr	r3, [pc, #176]	; (800b360 <USB_ActivateEndpoint+0x570>)
 800b2b0:	4323      	orrs	r3, r4
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	b29c      	uxth	r4, r3
 800b2c4:	4623      	mov	r3, r4
 800b2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d014      	beq.n	800b2f8 <USB_ActivateEndpoint+0x508>
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2e4:	b29c      	uxth	r4, r3
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	441a      	add	r2, r3
 800b2f0:	4b1c      	ldr	r3, [pc, #112]	; (800b364 <USB_ActivateEndpoint+0x574>)
 800b2f2:	4323      	orrs	r3, r4
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	881b      	ldrh	r3, [r3, #0]
 800b304:	b29b      	uxth	r3, r3
 800b306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b30a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b30e:	b29c      	uxth	r4, r3
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	441a      	add	r2, r3
 800b31a:	4b11      	ldr	r3, [pc, #68]	; (800b360 <USB_ActivateEndpoint+0x570>)
 800b31c:	4323      	orrs	r3, r4
 800b31e:	b29b      	uxth	r3, r3
 800b320:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	78db      	ldrb	r3, [r3, #3]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d020      	beq.n	800b36c <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	881b      	ldrh	r3, [r3, #0]
 800b336:	b29b      	uxth	r3, r3
 800b338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b33c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b340:	b29c      	uxth	r4, r3
 800b342:	f084 0320 	eor.w	r3, r4, #32
 800b346:	b29c      	uxth	r4, r3
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	441a      	add	r2, r3
 800b352:	4b05      	ldr	r3, [pc, #20]	; (800b368 <USB_ActivateEndpoint+0x578>)
 800b354:	4323      	orrs	r3, r4
 800b356:	b29b      	uxth	r3, r3
 800b358:	8013      	strh	r3, [r2, #0]
 800b35a:	e01c      	b.n	800b396 <USB_ActivateEndpoint+0x5a6>
 800b35c:	ffff8180 	.word	0xffff8180
 800b360:	ffffc080 	.word	0xffffc080
 800b364:	ffff80c0 	.word	0xffff80c0
 800b368:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	881b      	ldrh	r3, [r3, #0]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b37e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b382:	b29c      	uxth	r4, r3
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	441a      	add	r2, r3
 800b38e:	4b0f      	ldr	r3, [pc, #60]	; (800b3cc <USB_ActivateEndpoint+0x5dc>)
 800b390:	4323      	orrs	r3, r4
 800b392:	b29b      	uxth	r3, r3
 800b394:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4413      	add	r3, r2
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ac:	b29c      	uxth	r4, r3
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	441a      	add	r2, r3
 800b3b8:	4b04      	ldr	r3, [pc, #16]	; (800b3cc <USB_ActivateEndpoint+0x5dc>)
 800b3ba:	4323      	orrs	r3, r4
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bc90      	pop	{r4, r7}
 800b3ca:	4770      	bx	lr
 800b3cc:	ffff8080 	.word	0xffff8080

0800b3d0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b3d0:	b490      	push	{r4, r7}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	7b1b      	ldrb	r3, [r3, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d171      	bne.n	800b4c6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	785b      	ldrb	r3, [r3, #1]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d036      	beq.n	800b458 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	881b      	ldrh	r3, [r3, #0]
 800b3f6:	b29c      	uxth	r4, r3
 800b3f8:	4623      	mov	r3, r4
 800b3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d014      	beq.n	800b42c <USB_DeactivateEndpoint+0x5c>
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b418:	b29c      	uxth	r4, r3
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	441a      	add	r2, r3
 800b424:	4b6b      	ldr	r3, [pc, #428]	; (800b5d4 <USB_DeactivateEndpoint+0x204>)
 800b426:	4323      	orrs	r3, r4
 800b428:	b29b      	uxth	r3, r3
 800b42a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4413      	add	r3, r2
 800b436:	881b      	ldrh	r3, [r3, #0]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b43e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b442:	b29c      	uxth	r4, r3
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	441a      	add	r2, r3
 800b44e:	4b62      	ldr	r3, [pc, #392]	; (800b5d8 <USB_DeactivateEndpoint+0x208>)
 800b450:	4323      	orrs	r3, r4
 800b452:	b29b      	uxth	r3, r3
 800b454:	8013      	strh	r3, [r2, #0]
 800b456:	e144      	b.n	800b6e2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	b29c      	uxth	r4, r3
 800b466:	4623      	mov	r3, r4
 800b468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d014      	beq.n	800b49a <USB_DeactivateEndpoint+0xca>
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b486:	b29c      	uxth	r4, r3
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	441a      	add	r2, r3
 800b492:	4b52      	ldr	r3, [pc, #328]	; (800b5dc <USB_DeactivateEndpoint+0x20c>)
 800b494:	4323      	orrs	r3, r4
 800b496:	b29b      	uxth	r3, r3
 800b498:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	4413      	add	r3, r2
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4b0:	b29c      	uxth	r4, r3
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	441a      	add	r2, r3
 800b4bc:	4b46      	ldr	r3, [pc, #280]	; (800b5d8 <USB_DeactivateEndpoint+0x208>)
 800b4be:	4323      	orrs	r3, r4
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	8013      	strh	r3, [r2, #0]
 800b4c4:	e10d      	b.n	800b6e2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	785b      	ldrb	r3, [r3, #1]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f040 8088 	bne.w	800b5e0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4413      	add	r3, r2
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	b29c      	uxth	r4, r3
 800b4de:	4623      	mov	r3, r4
 800b4e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d014      	beq.n	800b512 <USB_DeactivateEndpoint+0x142>
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4fe:	b29c      	uxth	r4, r3
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	441a      	add	r2, r3
 800b50a:	4b34      	ldr	r3, [pc, #208]	; (800b5dc <USB_DeactivateEndpoint+0x20c>)
 800b50c:	4323      	orrs	r3, r4
 800b50e:	b29b      	uxth	r3, r3
 800b510:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4413      	add	r3, r2
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	b29c      	uxth	r4, r3
 800b520:	4623      	mov	r3, r4
 800b522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b526:	2b00      	cmp	r3, #0
 800b528:	d014      	beq.n	800b554 <USB_DeactivateEndpoint+0x184>
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	b29b      	uxth	r3, r3
 800b538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b53c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b540:	b29c      	uxth	r4, r3
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	441a      	add	r2, r3
 800b54c:	4b21      	ldr	r3, [pc, #132]	; (800b5d4 <USB_DeactivateEndpoint+0x204>)
 800b54e:	4323      	orrs	r3, r4
 800b550:	b29b      	uxth	r3, r3
 800b552:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	881b      	ldrh	r3, [r3, #0]
 800b560:	b29b      	uxth	r3, r3
 800b562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b56a:	b29c      	uxth	r4, r3
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	441a      	add	r2, r3
 800b576:	4b17      	ldr	r3, [pc, #92]	; (800b5d4 <USB_DeactivateEndpoint+0x204>)
 800b578:	4323      	orrs	r3, r4
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b594:	b29c      	uxth	r4, r3
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	441a      	add	r2, r3
 800b5a0:	4b0d      	ldr	r3, [pc, #52]	; (800b5d8 <USB_DeactivateEndpoint+0x208>)
 800b5a2:	4323      	orrs	r3, r4
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5be:	b29c      	uxth	r4, r3
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	441a      	add	r2, r3
 800b5ca:	4b03      	ldr	r3, [pc, #12]	; (800b5d8 <USB_DeactivateEndpoint+0x208>)
 800b5cc:	4323      	orrs	r3, r4
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	8013      	strh	r3, [r2, #0]
 800b5d2:	e086      	b.n	800b6e2 <USB_DeactivateEndpoint+0x312>
 800b5d4:	ffff80c0 	.word	0xffff80c0
 800b5d8:	ffff8080 	.word	0xffff8080
 800b5dc:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	b29c      	uxth	r4, r3
 800b5ee:	4623      	mov	r3, r4
 800b5f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d014      	beq.n	800b622 <USB_DeactivateEndpoint+0x252>
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4413      	add	r3, r2
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	b29b      	uxth	r3, r3
 800b606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b60e:	b29c      	uxth	r4, r3
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	441a      	add	r2, r3
 800b61a:	4b35      	ldr	r3, [pc, #212]	; (800b6f0 <USB_DeactivateEndpoint+0x320>)
 800b61c:	4323      	orrs	r3, r4
 800b61e:	b29b      	uxth	r3, r3
 800b620:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	881b      	ldrh	r3, [r3, #0]
 800b62e:	b29c      	uxth	r4, r3
 800b630:	4623      	mov	r3, r4
 800b632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b636:	2b00      	cmp	r3, #0
 800b638:	d014      	beq.n	800b664 <USB_DeactivateEndpoint+0x294>
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	881b      	ldrh	r3, [r3, #0]
 800b646:	b29b      	uxth	r3, r3
 800b648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b64c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b650:	b29c      	uxth	r4, r3
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	441a      	add	r2, r3
 800b65c:	4b25      	ldr	r3, [pc, #148]	; (800b6f4 <USB_DeactivateEndpoint+0x324>)
 800b65e:	4323      	orrs	r3, r4
 800b660:	b29b      	uxth	r3, r3
 800b662:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	4413      	add	r3, r2
 800b66e:	881b      	ldrh	r3, [r3, #0]
 800b670:	b29b      	uxth	r3, r3
 800b672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b67a:	b29c      	uxth	r4, r3
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	441a      	add	r2, r3
 800b686:	4b1a      	ldr	r3, [pc, #104]	; (800b6f0 <USB_DeactivateEndpoint+0x320>)
 800b688:	4323      	orrs	r3, r4
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4413      	add	r3, r2
 800b698:	881b      	ldrh	r3, [r3, #0]
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6a4:	b29c      	uxth	r4, r3
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	441a      	add	r2, r3
 800b6b0:	4b11      	ldr	r3, [pc, #68]	; (800b6f8 <USB_DeactivateEndpoint+0x328>)
 800b6b2:	4323      	orrs	r3, r4
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ce:	b29c      	uxth	r4, r3
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	441a      	add	r2, r3
 800b6da:	4b07      	ldr	r3, [pc, #28]	; (800b6f8 <USB_DeactivateEndpoint+0x328>)
 800b6dc:	4323      	orrs	r3, r4
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bc90      	pop	{r4, r7}
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	ffffc080 	.word	0xffffc080
 800b6f4:	ffff80c0 	.word	0xffff80c0
 800b6f8:	ffff8080 	.word	0xffff8080

0800b6fc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b6fc:	b590      	push	{r4, r7, lr}
 800b6fe:	b08d      	sub	sp, #52	; 0x34
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	785b      	ldrb	r3, [r3, #1]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	f040 8160 	bne.w	800b9d0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	699a      	ldr	r2, [r3, #24]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d909      	bls.n	800b730 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	699a      	ldr	r2, [r3, #24]
 800b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b728:	1ad2      	subs	r2, r2, r3
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	619a      	str	r2, [r3, #24]
 800b72e:	e005      	b.n	800b73c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	2200      	movs	r2, #0
 800b73a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	7b1b      	ldrb	r3, [r3, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d119      	bne.n	800b778 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	6959      	ldr	r1, [r3, #20]
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	88da      	ldrh	r2, [r3, #6]
 800b74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74e:	b29b      	uxth	r3, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fbbd 	bl	800bed0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b756:	687c      	ldr	r4, [r7, #4]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b75e:	b29b      	uxth	r3, r3
 800b760:	441c      	add	r4, r3
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	4423      	add	r3, r4
 800b76a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b76e:	461c      	mov	r4, r3
 800b770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b772:	b29b      	uxth	r3, r3
 800b774:	8023      	strh	r3, [r4, #0]
 800b776:	e10f      	b.n	800b998 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	b29b      	uxth	r3, r3
 800b786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d065      	beq.n	800b85a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b78e:	687c      	ldr	r4, [r7, #4]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	785b      	ldrb	r3, [r3, #1]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d148      	bne.n	800b82a <USB_EPStartXfer+0x12e>
 800b798:	687c      	ldr	r4, [r7, #4]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	441c      	add	r4, r3
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	00db      	lsls	r3, r3, #3
 800b7aa:	4423      	add	r3, r4
 800b7ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7b0:	461c      	mov	r4, r3
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10e      	bne.n	800b7d6 <USB_EPStartXfer+0xda>
 800b7b8:	8823      	ldrh	r3, [r4, #0]
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	8023      	strh	r3, [r4, #0]
 800b7c4:	8823      	ldrh	r3, [r4, #0]
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	8023      	strh	r3, [r4, #0]
 800b7d4:	e03d      	b.n	800b852 <USB_EPStartXfer+0x156>
 800b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d8:	2b3e      	cmp	r3, #62	; 0x3e
 800b7da:	d810      	bhi.n	800b7fe <USB_EPStartXfer+0x102>
 800b7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7de:	085b      	lsrs	r3, r3, #1
 800b7e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	f003 0301 	and.w	r3, r3, #1
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <USB_EPStartXfer+0xf6>
 800b7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	029b      	lsls	r3, r3, #10
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	8023      	strh	r3, [r4, #0]
 800b7fc:	e029      	b.n	800b852 <USB_EPStartXfer+0x156>
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	095b      	lsrs	r3, r3, #5
 800b802:	627b      	str	r3, [r7, #36]	; 0x24
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	f003 031f 	and.w	r3, r3, #31
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d102      	bne.n	800b814 <USB_EPStartXfer+0x118>
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	3b01      	subs	r3, #1
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	b29b      	uxth	r3, r3
 800b818:	029b      	lsls	r3, r3, #10
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b824:	b29b      	uxth	r3, r3
 800b826:	8023      	strh	r3, [r4, #0]
 800b828:	e013      	b.n	800b852 <USB_EPStartXfer+0x156>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	785b      	ldrb	r3, [r3, #1]
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d10f      	bne.n	800b852 <USB_EPStartXfer+0x156>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b838:	b29b      	uxth	r3, r3
 800b83a:	441c      	add	r4, r3
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	4423      	add	r3, r4
 800b844:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	895b      	ldrh	r3, [r3, #10]
 800b856:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b858:	e063      	b.n	800b922 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	785b      	ldrb	r3, [r3, #1]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d148      	bne.n	800b8f4 <USB_EPStartXfer+0x1f8>
 800b862:	687c      	ldr	r4, [r7, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	441c      	add	r4, r3
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	00db      	lsls	r3, r3, #3
 800b874:	4423      	add	r3, r4
 800b876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b87a:	461c      	mov	r4, r3
 800b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10e      	bne.n	800b8a0 <USB_EPStartXfer+0x1a4>
 800b882:	8823      	ldrh	r3, [r4, #0]
 800b884:	b29b      	uxth	r3, r3
 800b886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	8023      	strh	r3, [r4, #0]
 800b88e:	8823      	ldrh	r3, [r4, #0]
 800b890:	b29b      	uxth	r3, r3
 800b892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	8023      	strh	r3, [r4, #0]
 800b89e:	e03d      	b.n	800b91c <USB_EPStartXfer+0x220>
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	2b3e      	cmp	r3, #62	; 0x3e
 800b8a4:	d810      	bhi.n	800b8c8 <USB_EPStartXfer+0x1cc>
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	085b      	lsrs	r3, r3, #1
 800b8aa:	623b      	str	r3, [r7, #32]
 800b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ae:	f003 0301 	and.w	r3, r3, #1
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <USB_EPStartXfer+0x1c0>
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	623b      	str	r3, [r7, #32]
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	029b      	lsls	r3, r3, #10
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	8023      	strh	r3, [r4, #0]
 800b8c6:	e029      	b.n	800b91c <USB_EPStartXfer+0x220>
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	095b      	lsrs	r3, r3, #5
 800b8cc:	623b      	str	r3, [r7, #32]
 800b8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d0:	f003 031f 	and.w	r3, r3, #31
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <USB_EPStartXfer+0x1e2>
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	623b      	str	r3, [r7, #32]
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	029b      	lsls	r3, r3, #10
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	8023      	strh	r3, [r4, #0]
 800b8f2:	e013      	b.n	800b91c <USB_EPStartXfer+0x220>
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	785b      	ldrb	r3, [r3, #1]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d10f      	bne.n	800b91c <USB_EPStartXfer+0x220>
 800b8fc:	687c      	ldr	r4, [r7, #4]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b904:	b29b      	uxth	r3, r3
 800b906:	441c      	add	r4, r3
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	00db      	lsls	r3, r3, #3
 800b90e:	4423      	add	r3, r4
 800b910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b914:	461c      	mov	r4, r3
 800b916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b918:	b29b      	uxth	r3, r3
 800b91a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	891b      	ldrh	r3, [r3, #8]
 800b920:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	6959      	ldr	r1, [r3, #20]
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	b29b      	uxth	r3, r3
 800b92a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 facf 	bl	800bed0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d115      	bne.n	800b966 <USB_EPStartXfer+0x26a>
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	881b      	ldrh	r3, [r3, #0]
 800b946:	b29b      	uxth	r3, r3
 800b948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b94c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b950:	b29c      	uxth	r4, r3
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	441a      	add	r2, r3
 800b95c:	4b9a      	ldr	r3, [pc, #616]	; (800bbc8 <USB_EPStartXfer+0x4cc>)
 800b95e:	4323      	orrs	r3, r4
 800b960:	b29b      	uxth	r3, r3
 800b962:	8013      	strh	r3, [r2, #0]
 800b964:	e018      	b.n	800b998 <USB_EPStartXfer+0x29c>
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	785b      	ldrb	r3, [r3, #1]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d114      	bne.n	800b998 <USB_EPStartXfer+0x29c>
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b984:	b29c      	uxth	r4, r3
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	441a      	add	r2, r3
 800b990:	4b8e      	ldr	r3, [pc, #568]	; (800bbcc <USB_EPStartXfer+0x4d0>)
 800b992:	4323      	orrs	r3, r4
 800b994:	b29b      	uxth	r3, r3
 800b996:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	4413      	add	r3, r2
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9ae:	b29c      	uxth	r4, r3
 800b9b0:	f084 0310 	eor.w	r3, r4, #16
 800b9b4:	b29c      	uxth	r4, r3
 800b9b6:	f084 0320 	eor.w	r3, r4, #32
 800b9ba:	b29c      	uxth	r4, r3
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	441a      	add	r2, r3
 800b9c6:	4b82      	ldr	r3, [pc, #520]	; (800bbd0 <USB_EPStartXfer+0x4d4>)
 800b9c8:	4323      	orrs	r3, r4
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	8013      	strh	r3, [r2, #0]
 800b9ce:	e146      	b.n	800bc5e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	699a      	ldr	r2, [r3, #24]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d909      	bls.n	800b9f0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	699a      	ldr	r2, [r3, #24]
 800b9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e8:	1ad2      	subs	r2, r2, r3
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	619a      	str	r2, [r3, #24]
 800b9ee:	e005      	b.n	800b9fc <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	7b1b      	ldrb	r3, [r3, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d148      	bne.n	800ba96 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ba04:	687c      	ldr	r4, [r7, #4]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	441c      	add	r4, r3
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	00db      	lsls	r3, r3, #3
 800ba16:	4423      	add	r3, r4
 800ba18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba1c:	461c      	mov	r4, r3
 800ba1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10e      	bne.n	800ba42 <USB_EPStartXfer+0x346>
 800ba24:	8823      	ldrh	r3, [r4, #0]
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	8023      	strh	r3, [r4, #0]
 800ba30:	8823      	ldrh	r3, [r4, #0]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	8023      	strh	r3, [r4, #0]
 800ba40:	e0f2      	b.n	800bc28 <USB_EPStartXfer+0x52c>
 800ba42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba44:	2b3e      	cmp	r3, #62	; 0x3e
 800ba46:	d810      	bhi.n	800ba6a <USB_EPStartXfer+0x36e>
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	085b      	lsrs	r3, r3, #1
 800ba4c:	61fb      	str	r3, [r7, #28]
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <USB_EPStartXfer+0x362>
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	61fb      	str	r3, [r7, #28]
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	029b      	lsls	r3, r3, #10
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	8023      	strh	r3, [r4, #0]
 800ba68:	e0de      	b.n	800bc28 <USB_EPStartXfer+0x52c>
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	095b      	lsrs	r3, r3, #5
 800ba6e:	61fb      	str	r3, [r7, #28]
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	f003 031f 	and.w	r3, r3, #31
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d102      	bne.n	800ba80 <USB_EPStartXfer+0x384>
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	61fb      	str	r3, [r7, #28]
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	029b      	lsls	r3, r3, #10
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	8023      	strh	r3, [r4, #0]
 800ba94:	e0c8      	b.n	800bc28 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	785b      	ldrb	r3, [r3, #1]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d148      	bne.n	800bb30 <USB_EPStartXfer+0x434>
 800ba9e:	687c      	ldr	r4, [r7, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	441c      	add	r4, r3
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	00db      	lsls	r3, r3, #3
 800bab0:	4423      	add	r3, r4
 800bab2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bab6:	461c      	mov	r4, r3
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10e      	bne.n	800badc <USB_EPStartXfer+0x3e0>
 800babe:	8823      	ldrh	r3, [r4, #0]
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	8023      	strh	r3, [r4, #0]
 800baca:	8823      	ldrh	r3, [r4, #0]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	8023      	strh	r3, [r4, #0]
 800bada:	e03d      	b.n	800bb58 <USB_EPStartXfer+0x45c>
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	2b3e      	cmp	r3, #62	; 0x3e
 800bae0:	d810      	bhi.n	800bb04 <USB_EPStartXfer+0x408>
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	085b      	lsrs	r3, r3, #1
 800bae6:	61bb      	str	r3, [r7, #24]
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	f003 0301 	and.w	r3, r3, #1
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d002      	beq.n	800baf8 <USB_EPStartXfer+0x3fc>
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	3301      	adds	r3, #1
 800baf6:	61bb      	str	r3, [r7, #24]
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	029b      	lsls	r3, r3, #10
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	8023      	strh	r3, [r4, #0]
 800bb02:	e029      	b.n	800bb58 <USB_EPStartXfer+0x45c>
 800bb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb06:	095b      	lsrs	r3, r3, #5
 800bb08:	61bb      	str	r3, [r7, #24]
 800bb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0c:	f003 031f 	and.w	r3, r3, #31
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d102      	bne.n	800bb1a <USB_EPStartXfer+0x41e>
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	3b01      	subs	r3, #1
 800bb18:	61bb      	str	r3, [r7, #24]
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	029b      	lsls	r3, r3, #10
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	8023      	strh	r3, [r4, #0]
 800bb2e:	e013      	b.n	800bb58 <USB_EPStartXfer+0x45c>
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	785b      	ldrb	r3, [r3, #1]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d10f      	bne.n	800bb58 <USB_EPStartXfer+0x45c>
 800bb38:	687c      	ldr	r4, [r7, #4]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	441c      	add	r4, r3
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	00db      	lsls	r3, r3, #3
 800bb4a:	4423      	add	r3, r4
 800bb4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb50:	461c      	mov	r4, r3
 800bb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	8023      	strh	r3, [r4, #0]
 800bb58:	687c      	ldr	r4, [r7, #4]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	785b      	ldrb	r3, [r3, #1]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d14e      	bne.n	800bc00 <USB_EPStartXfer+0x504>
 800bb62:	687c      	ldr	r4, [r7, #4]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	441c      	add	r4, r3
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	4423      	add	r3, r4
 800bb76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb7a:	461c      	mov	r4, r3
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10e      	bne.n	800bba0 <USB_EPStartXfer+0x4a4>
 800bb82:	8823      	ldrh	r3, [r4, #0]
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	8023      	strh	r3, [r4, #0]
 800bb8e:	8823      	ldrh	r3, [r4, #0]
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	8023      	strh	r3, [r4, #0]
 800bb9e:	e043      	b.n	800bc28 <USB_EPStartXfer+0x52c>
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	2b3e      	cmp	r3, #62	; 0x3e
 800bba4:	d816      	bhi.n	800bbd4 <USB_EPStartXfer+0x4d8>
 800bba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba8:	085b      	lsrs	r3, r3, #1
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d002      	beq.n	800bbbc <USB_EPStartXfer+0x4c0>
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	617b      	str	r3, [r7, #20]
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	029b      	lsls	r3, r3, #10
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	8023      	strh	r3, [r4, #0]
 800bbc6:	e02f      	b.n	800bc28 <USB_EPStartXfer+0x52c>
 800bbc8:	ffff80c0 	.word	0xffff80c0
 800bbcc:	ffffc080 	.word	0xffffc080
 800bbd0:	ffff8080 	.word	0xffff8080
 800bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd6:	095b      	lsrs	r3, r3, #5
 800bbd8:	617b      	str	r3, [r7, #20]
 800bbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbdc:	f003 031f 	and.w	r3, r3, #31
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d102      	bne.n	800bbea <USB_EPStartXfer+0x4ee>
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	029b      	lsls	r3, r3, #10
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	8023      	strh	r3, [r4, #0]
 800bbfe:	e013      	b.n	800bc28 <USB_EPStartXfer+0x52c>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	785b      	ldrb	r3, [r3, #1]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d10f      	bne.n	800bc28 <USB_EPStartXfer+0x52c>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	441c      	add	r4, r3
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	00db      	lsls	r3, r3, #3
 800bc18:	4423      	add	r3, r4
 800bc1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc1e:	613b      	str	r3, [r7, #16]
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	881b      	ldrh	r3, [r3, #0]
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc3e:	b29c      	uxth	r4, r3
 800bc40:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800bc44:	b29c      	uxth	r4, r3
 800bc46:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800bc4a:	b29c      	uxth	r4, r3
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	441a      	add	r2, r3
 800bc56:	4b04      	ldr	r3, [pc, #16]	; (800bc68 <USB_EPStartXfer+0x56c>)
 800bc58:	4323      	orrs	r3, r4
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3734      	adds	r7, #52	; 0x34
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd90      	pop	{r4, r7, pc}
 800bc68:	ffff8080 	.word	0xffff8080

0800bc6c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc6c:	b490      	push	{r4, r7}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	785b      	ldrb	r3, [r3, #1]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d018      	beq.n	800bcb0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4413      	add	r3, r2
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc94:	b29c      	uxth	r4, r3
 800bc96:	f084 0310 	eor.w	r3, r4, #16
 800bc9a:	b29c      	uxth	r4, r3
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	441a      	add	r2, r3
 800bca6:	4b11      	ldr	r3, [pc, #68]	; (800bcec <USB_EPSetStall+0x80>)
 800bca8:	4323      	orrs	r3, r4
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	8013      	strh	r3, [r2, #0]
 800bcae:	e017      	b.n	800bce0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	881b      	ldrh	r3, [r3, #0]
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcc6:	b29c      	uxth	r4, r3
 800bcc8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800bccc:	b29c      	uxth	r4, r3
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	441a      	add	r2, r3
 800bcd8:	4b04      	ldr	r3, [pc, #16]	; (800bcec <USB_EPSetStall+0x80>)
 800bcda:	4323      	orrs	r3, r4
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bc90      	pop	{r4, r7}
 800bcea:	4770      	bx	lr
 800bcec:	ffff8080 	.word	0xffff8080

0800bcf0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bcf0:	b490      	push	{r4, r7}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	7b1b      	ldrb	r3, [r3, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d17d      	bne.n	800bdfe <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	785b      	ldrb	r3, [r3, #1]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d03d      	beq.n	800bd86 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	b29c      	uxth	r4, r3
 800bd18:	4623      	mov	r3, r4
 800bd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d014      	beq.n	800bd4c <USB_EPClearStall+0x5c>
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4413      	add	r3, r2
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd38:	b29c      	uxth	r4, r3
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	441a      	add	r2, r3
 800bd44:	4b31      	ldr	r3, [pc, #196]	; (800be0c <USB_EPClearStall+0x11c>)
 800bd46:	4323      	orrs	r3, r4
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	78db      	ldrb	r3, [r3, #3]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d054      	beq.n	800bdfe <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd6a:	b29c      	uxth	r4, r3
 800bd6c:	f084 0320 	eor.w	r3, r4, #32
 800bd70:	b29c      	uxth	r4, r3
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	441a      	add	r2, r3
 800bd7c:	4b24      	ldr	r3, [pc, #144]	; (800be10 <USB_EPClearStall+0x120>)
 800bd7e:	4323      	orrs	r3, r4
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	8013      	strh	r3, [r2, #0]
 800bd84:	e03b      	b.n	800bdfe <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	b29c      	uxth	r4, r3
 800bd94:	4623      	mov	r3, r4
 800bd96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d014      	beq.n	800bdc8 <USB_EPClearStall+0xd8>
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4413      	add	r3, r2
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdb4:	b29c      	uxth	r4, r3
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	441a      	add	r2, r3
 800bdc0:	4b14      	ldr	r3, [pc, #80]	; (800be14 <USB_EPClearStall+0x124>)
 800bdc2:	4323      	orrs	r3, r4
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4413      	add	r3, r2
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdde:	b29c      	uxth	r4, r3
 800bde0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800bde4:	b29c      	uxth	r4, r3
 800bde6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800bdea:	b29c      	uxth	r4, r3
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	441a      	add	r2, r3
 800bdf6:	4b06      	ldr	r3, [pc, #24]	; (800be10 <USB_EPClearStall+0x120>)
 800bdf8:	4323      	orrs	r3, r4
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bc90      	pop	{r4, r7}
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	ffff80c0 	.word	0xffff80c0
 800be10:	ffff8080 	.word	0xffff8080
 800be14:	ffffc080 	.word	0xffffc080

0800be18 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	460b      	mov	r3, r1
 800be22:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800be24:	78fb      	ldrb	r3, [r7, #3]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d103      	bne.n	800be32 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2280      	movs	r2, #128	; 0x80
 800be2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800be4e:	b29b      	uxth	r3, r3
 800be50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be58:	b29a      	uxth	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	370c      	adds	r7, #12
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr

0800be6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800be6e:	b480      	push	{r7}
 800be70:	b083      	sub	sp, #12
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800be82:	b29a      	uxth	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800beaa:	68fb      	ldr	r3, [r7, #12]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b08d      	sub	sp, #52	; 0x34
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	4611      	mov	r1, r2
 800bedc:	461a      	mov	r2, r3
 800bede:	460b      	mov	r3, r1
 800bee0:	80fb      	strh	r3, [r7, #6]
 800bee2:	4613      	mov	r3, r2
 800bee4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bee6:	88bb      	ldrh	r3, [r7, #4]
 800bee8:	3301      	adds	r3, #1
 800beea:	085b      	lsrs	r3, r3, #1
 800beec:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bef6:	88fa      	ldrh	r2, [r7, #6]
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	4413      	add	r3, r2
 800befc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf00:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf06:	e01b      	b.n	800bf40 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	3301      	adds	r3, #1
 800bf12:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800bf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	021b      	lsls	r3, r3, #8
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	461a      	mov	r2, r3
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	b29a      	uxth	r2, r3
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf30:	3302      	adds	r3, #2
 800bf32:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	3301      	adds	r3, #1
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1e0      	bne.n	800bf08 <USB_WritePMA+0x38>
  }
}
 800bf46:	bf00      	nop
 800bf48:	3734      	adds	r7, #52	; 0x34
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bf52:	b480      	push	{r7}
 800bf54:	b08b      	sub	sp, #44	; 0x2c
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	4611      	mov	r1, r2
 800bf5e:	461a      	mov	r2, r3
 800bf60:	460b      	mov	r3, r1
 800bf62:	80fb      	strh	r3, [r7, #6]
 800bf64:	4613      	mov	r3, r2
 800bf66:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bf68:	88bb      	ldrh	r3, [r7, #4]
 800bf6a:	085b      	lsrs	r3, r3, #1
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf78:	88fa      	ldrh	r2, [r7, #6]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf82:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	627b      	str	r3, [r7, #36]	; 0x24
 800bf88:	e018      	b.n	800bfbc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	881b      	ldrh	r3, [r3, #0]
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	3302      	adds	r3, #2
 800bf96:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	0a1b      	lsrs	r3, r3, #8
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	627b      	str	r3, [r7, #36]	; 0x24
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1e3      	bne.n	800bf8a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800bfc2:	88bb      	ldrh	r3, [r7, #4]
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d007      	beq.n	800bfde <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	701a      	strb	r2, [r3, #0]
  }
}
 800bfde:	bf00      	nop
 800bfe0:	372c      	adds	r7, #44	; 0x2c
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
	...

0800bfec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800bff0:	4904      	ldr	r1, [pc, #16]	; (800c004 <MX_FATFS_Init+0x18>)
 800bff2:	4805      	ldr	r0, [pc, #20]	; (800c008 <MX_FATFS_Init+0x1c>)
 800bff4:	f004 fc46 	bl	8010884 <FATFS_LinkDriver>
 800bff8:	4603      	mov	r3, r0
 800bffa:	461a      	mov	r2, r3
 800bffc:	4b03      	ldr	r3, [pc, #12]	; (800c00c <MX_FATFS_Init+0x20>)
 800bffe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c000:	bf00      	nop
 800c002:	bd80      	pop	{r7, pc}
 800c004:	200012a0 	.word	0x200012a0
 800c008:	20000018 	.word	0x20000018
 800c00c:	200012a4 	.word	0x200012a4

0800c010 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c010:	b480      	push	{r7}
 800c012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c014:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c016:	4618      	mov	r0, r3
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	4603      	mov	r3, r0
 800c028:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f000 f9d7 	bl	800c3e0 <USER_SPI_initialize>
 800c032:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	4603      	mov	r3, r0
 800c044:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800c046:	79fb      	ldrb	r3, [r7, #7]
 800c048:	4618      	mov	r0, r3
 800c04a:	f000 fa9f 	bl	800c58c <USER_SPI_status>
 800c04e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c050:	4618      	mov	r0, r3
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60b9      	str	r1, [r7, #8]
 800c060:	607a      	str	r2, [r7, #4]
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800c068:	7bf8      	ldrb	r0, [r7, #15]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	68b9      	ldr	r1, [r7, #8]
 800c070:	f000 faa2 	bl	800c5b8 <USER_SPI_read>
 800c074:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800c07e:	b580      	push	{r7, lr}
 800c080:	b084      	sub	sp, #16
 800c082:	af00      	add	r7, sp, #0
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	603b      	str	r3, [r7, #0]
 800c08a:	4603      	mov	r3, r0
 800c08c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800c08e:	7bf8      	ldrb	r0, [r7, #15]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	68b9      	ldr	r1, [r7, #8]
 800c096:	f000 faf5 	bl	800c684 <USER_SPI_write>
 800c09a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	603a      	str	r2, [r7, #0]
 800c0ae:	71fb      	strb	r3, [r7, #7]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800c0b4:	79b9      	ldrb	r1, [r7, #6]
 800c0b6:	79fb      	ldrb	r3, [r7, #7]
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 fb5e 	bl	800c77c <USER_SPI_ioctl>
 800c0c0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800c0d4:	f7f7 fef0 	bl	8003eb8 <HAL_GetTick>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	4b04      	ldr	r3, [pc, #16]	; (800c0ec <SPI_Timer_On+0x20>)
 800c0dc:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800c0de:	4a04      	ldr	r2, [pc, #16]	; (800c0f0 <SPI_Timer_On+0x24>)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6013      	str	r3, [r2, #0]
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	20001708 	.word	0x20001708
 800c0f0:	2000170c 	.word	0x2000170c

0800c0f4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800c0f8:	f7f7 fede 	bl	8003eb8 <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	4b06      	ldr	r3, [pc, #24]	; (800c118 <SPI_Timer_Status+0x24>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	1ad2      	subs	r2, r2, r3
 800c104:	4b05      	ldr	r3, [pc, #20]	; (800c11c <SPI_Timer_Status+0x28>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	429a      	cmp	r2, r3
 800c10a:	bf34      	ite	cc
 800c10c:	2301      	movcc	r3, #1
 800c10e:	2300      	movcs	r3, #0
 800c110:	b2db      	uxtb	r3, r3
}
 800c112:	4618      	mov	r0, r3
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20001708 	.word	0x20001708
 800c11c:	2000170c 	.word	0x2000170c

0800c120 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af02      	add	r7, sp, #8
 800c126:	4603      	mov	r3, r0
 800c128:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi1, &dat, &rxDat, 1, 50);
 800c12a:	f107 020f 	add.w	r2, r7, #15
 800c12e:	1df9      	adds	r1, r7, #7
 800c130:	2332      	movs	r3, #50	; 0x32
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	2301      	movs	r3, #1
 800c136:	4804      	ldr	r0, [pc, #16]	; (800c148 <xchg_spi+0x28>)
 800c138:	f7fc fbc2 	bl	80088c0 <HAL_SPI_TransmitReceive>
    return rxDat;
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	20001030 	.word	0x20001030

0800c14c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800c14c:	b590      	push	{r4, r7, lr}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800c156:	2300      	movs	r3, #0
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	e00a      	b.n	800c172 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	18d4      	adds	r4, r2, r3
 800c162:	20ff      	movs	r0, #255	; 0xff
 800c164:	f7ff ffdc 	bl	800c120 <xchg_spi>
 800c168:	4603      	mov	r3, r0
 800c16a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	3301      	adds	r3, #1
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	429a      	cmp	r2, r3
 800c178:	d3f0      	bcc.n	800c15c <rcvr_spi_multi+0x10>
	}
}
 800c17a:	bf00      	nop
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd90      	pop	{r4, r7, pc}

0800c182 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b084      	sub	sp, #16
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800c18c:	2300      	movs	r3, #0
 800c18e:	60fb      	str	r3, [r7, #12]
 800c190:	e009      	b.n	800c1a6 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	4413      	add	r3, r2
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff ffc0 	bl	800c120 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d3f1      	bcc.n	800c192 <xmit_spi_multi+0x10>
	}
}
 800c1ae:	bf00      	nop
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b086      	sub	sp, #24
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800c1be:	f7f7 fe7b 	bl	8003eb8 <HAL_GetTick>
 800c1c2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800c1c8:	20ff      	movs	r0, #255	; 0xff
 800c1ca:	f7ff ffa9 	bl	800c120 <xchg_spi>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
 800c1d4:	2bff      	cmp	r3, #255	; 0xff
 800c1d6:	d007      	beq.n	800c1e8 <wait_ready+0x32>
 800c1d8:	f7f7 fe6e 	bl	8003eb8 <HAL_GetTick>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d8ef      	bhi.n	800c1c8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ea:	2bff      	cmp	r3, #255	; 0xff
 800c1ec:	bf0c      	ite	eq
 800c1ee:	2301      	moveq	r3, #1
 800c1f0:	2300      	movne	r3, #0
 800c1f2:	b2db      	uxtb	r3, r3
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3718      	adds	r7, #24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800c200:	2201      	movs	r2, #1
 800c202:	2102      	movs	r1, #2
 800c204:	4803      	ldr	r0, [pc, #12]	; (800c214 <despiselect+0x18>)
 800c206:	f7f9 f9fd 	bl	8005604 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c20a:	20ff      	movs	r0, #255	; 0xff
 800c20c:	f7ff ff88 	bl	800c120 <xchg_spi>

}
 800c210:	bf00      	nop
 800c212:	bd80      	pop	{r7, pc}
 800c214:	48000400 	.word	0x48000400

0800c218 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800c21c:	2200      	movs	r2, #0
 800c21e:	2102      	movs	r1, #2
 800c220:	4809      	ldr	r0, [pc, #36]	; (800c248 <spiselect+0x30>)
 800c222:	f7f9 f9ef 	bl	8005604 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800c226:	20ff      	movs	r0, #255	; 0xff
 800c228:	f7ff ff7a 	bl	800c120 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800c22c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c230:	f7ff ffc1 	bl	800c1b6 <wait_ready>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <spiselect+0x26>
 800c23a:	2301      	movs	r3, #1
 800c23c:	e002      	b.n	800c244 <spiselect+0x2c>

	despiselect();
 800c23e:	f7ff ffdd 	bl	800c1fc <despiselect>
	return 0;	/* Timeout */
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	bd80      	pop	{r7, pc}
 800c248:	48000400 	.word	0x48000400

0800c24c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800c256:	20c8      	movs	r0, #200	; 0xc8
 800c258:	f7ff ff38 	bl	800c0cc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800c25c:	20ff      	movs	r0, #255	; 0xff
 800c25e:	f7ff ff5f 	bl	800c120 <xchg_spi>
 800c262:	4603      	mov	r3, r0
 800c264:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800c266:	7bfb      	ldrb	r3, [r7, #15]
 800c268:	2bff      	cmp	r3, #255	; 0xff
 800c26a:	d104      	bne.n	800c276 <rcvr_datablock+0x2a>
 800c26c:	f7ff ff42 	bl	800c0f4 <SPI_Timer_Status>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1f2      	bne.n	800c25c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	2bfe      	cmp	r3, #254	; 0xfe
 800c27a:	d001      	beq.n	800c280 <rcvr_datablock+0x34>
 800c27c:	2300      	movs	r3, #0
 800c27e:	e00a      	b.n	800c296 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff ff62 	bl	800c14c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800c288:	20ff      	movs	r0, #255	; 0xff
 800c28a:	f7ff ff49 	bl	800c120 <xchg_spi>
 800c28e:	20ff      	movs	r0, #255	; 0xff
 800c290:	f7ff ff46 	bl	800c120 <xchg_spi>

	return 1;						/* Function succeeded */
 800c294:	2301      	movs	r3, #1
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800c2aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c2ae:	f7ff ff82 	bl	800c1b6 <wait_ready>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d101      	bne.n	800c2bc <xmit_datablock+0x1e>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	e01e      	b.n	800c2fa <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7ff ff2e 	bl	800c120 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800c2c4:	78fb      	ldrb	r3, [r7, #3]
 800c2c6:	2bfd      	cmp	r3, #253	; 0xfd
 800c2c8:	d016      	beq.n	800c2f8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800c2ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff ff57 	bl	800c182 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800c2d4:	20ff      	movs	r0, #255	; 0xff
 800c2d6:	f7ff ff23 	bl	800c120 <xchg_spi>
 800c2da:	20ff      	movs	r0, #255	; 0xff
 800c2dc:	f7ff ff20 	bl	800c120 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800c2e0:	20ff      	movs	r0, #255	; 0xff
 800c2e2:	f7ff ff1d 	bl	800c120 <xchg_spi>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800c2ea:	7bfb      	ldrb	r3, [r7, #15]
 800c2ec:	f003 031f 	and.w	r3, r3, #31
 800c2f0:	2b05      	cmp	r3, #5
 800c2f2:	d001      	beq.n	800c2f8 <xmit_datablock+0x5a>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	e000      	b.n	800c2fa <xmit_datablock+0x5c>
	}
	return 1;
 800c2f8:	2301      	movs	r3, #1
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b084      	sub	sp, #16
 800c306:	af00      	add	r7, sp, #0
 800c308:	4603      	mov	r3, r0
 800c30a:	6039      	str	r1, [r7, #0]
 800c30c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800c30e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c312:	2b00      	cmp	r3, #0
 800c314:	da0e      	bge.n	800c334 <send_cmd+0x32>
		cmd &= 0x7F;
 800c316:	79fb      	ldrb	r3, [r7, #7]
 800c318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c31c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800c31e:	2100      	movs	r1, #0
 800c320:	2037      	movs	r0, #55	; 0x37
 800c322:	f7ff ffee 	bl	800c302 <send_cmd>
 800c326:	4603      	mov	r3, r0
 800c328:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d901      	bls.n	800c334 <send_cmd+0x32>
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	e051      	b.n	800c3d8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800c334:	79fb      	ldrb	r3, [r7, #7]
 800c336:	2b0c      	cmp	r3, #12
 800c338:	d008      	beq.n	800c34c <send_cmd+0x4a>
		despiselect();
 800c33a:	f7ff ff5f 	bl	800c1fc <despiselect>
		if (!spiselect()) return 0xFF;
 800c33e:	f7ff ff6b 	bl	800c218 <spiselect>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d101      	bne.n	800c34c <send_cmd+0x4a>
 800c348:	23ff      	movs	r3, #255	; 0xff
 800c34a:	e045      	b.n	800c3d8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c352:	b2db      	uxtb	r3, r3
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff fee3 	bl	800c120 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	0e1b      	lsrs	r3, r3, #24
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff fedd 	bl	800c120 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	0c1b      	lsrs	r3, r3, #16
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7ff fed7 	bl	800c120 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	0a1b      	lsrs	r3, r3, #8
 800c376:	b2db      	uxtb	r3, r3
 800c378:	4618      	mov	r0, r3
 800c37a:	f7ff fed1 	bl	800c120 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	b2db      	uxtb	r3, r3
 800c382:	4618      	mov	r0, r3
 800c384:	f7ff fecc 	bl	800c120 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800c388:	2301      	movs	r3, #1
 800c38a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800c38c:	79fb      	ldrb	r3, [r7, #7]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <send_cmd+0x94>
 800c392:	2395      	movs	r3, #149	; 0x95
 800c394:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	2b08      	cmp	r3, #8
 800c39a:	d101      	bne.n	800c3a0 <send_cmd+0x9e>
 800c39c:	2387      	movs	r3, #135	; 0x87
 800c39e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7ff febc 	bl	800c120 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800c3a8:	79fb      	ldrb	r3, [r7, #7]
 800c3aa:	2b0c      	cmp	r3, #12
 800c3ac:	d102      	bne.n	800c3b4 <send_cmd+0xb2>
 800c3ae:	20ff      	movs	r0, #255	; 0xff
 800c3b0:	f7ff feb6 	bl	800c120 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800c3b4:	230a      	movs	r3, #10
 800c3b6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800c3b8:	20ff      	movs	r0, #255	; 0xff
 800c3ba:	f7ff feb1 	bl	800c120 <xchg_spi>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800c3c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	da05      	bge.n	800c3d6 <send_cmd+0xd4>
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	73fb      	strb	r3, [r7, #15]
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1f0      	bne.n	800c3b8 <send_cmd+0xb6>

	return res;							/* Return received response */
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c3e0:	b590      	push	{r4, r7, lr}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800c3ea:	79fb      	ldrb	r3, [r7, #7]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <USER_SPI_initialize+0x14>
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e0c2      	b.n	800c57a <USER_SPI_initialize+0x19a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800c3f4:	4b63      	ldr	r3, [pc, #396]	; (800c584 <USER_SPI_initialize+0x1a4>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	f003 0302 	and.w	r3, r3, #2
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d003      	beq.n	800c40a <USER_SPI_initialize+0x2a>
 800c402:	4b60      	ldr	r3, [pc, #384]	; (800c584 <USER_SPI_initialize+0x1a4>)
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	b2db      	uxtb	r3, r3
 800c408:	e0b7      	b.n	800c57a <USER_SPI_initialize+0x19a>

	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800c40a:	230a      	movs	r3, #10
 800c40c:	73fb      	strb	r3, [r7, #15]
 800c40e:	e005      	b.n	800c41c <USER_SPI_initialize+0x3c>
 800c410:	20ff      	movs	r0, #255	; 0xff
 800c412:	f7ff fe85 	bl	800c120 <xchg_spi>
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	3b01      	subs	r3, #1
 800c41a:	73fb      	strb	r3, [r7, #15]
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1f6      	bne.n	800c410 <USER_SPI_initialize+0x30>

	ty = 0;
 800c422:	2300      	movs	r3, #0
 800c424:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800c426:	2100      	movs	r1, #0
 800c428:	2000      	movs	r0, #0
 800c42a:	f7ff ff6a 	bl	800c302 <send_cmd>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b01      	cmp	r3, #1
 800c432:	f040 808b 	bne.w	800c54c <USER_SPI_initialize+0x16c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800c436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c43a:	f7ff fe47 	bl	800c0cc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800c43e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c442:	2008      	movs	r0, #8
 800c444:	f7ff ff5d 	bl	800c302 <send_cmd>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d151      	bne.n	800c4f2 <USER_SPI_initialize+0x112>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800c44e:	2300      	movs	r3, #0
 800c450:	73fb      	strb	r3, [r7, #15]
 800c452:	e00d      	b.n	800c470 <USER_SPI_initialize+0x90>
 800c454:	7bfc      	ldrb	r4, [r7, #15]
 800c456:	20ff      	movs	r0, #255	; 0xff
 800c458:	f7ff fe62 	bl	800c120 <xchg_spi>
 800c45c:	4603      	mov	r3, r0
 800c45e:	461a      	mov	r2, r3
 800c460:	f107 0310 	add.w	r3, r7, #16
 800c464:	4423      	add	r3, r4
 800c466:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c46a:	7bfb      	ldrb	r3, [r7, #15]
 800c46c:	3301      	adds	r3, #1
 800c46e:	73fb      	strb	r3, [r7, #15]
 800c470:	7bfb      	ldrb	r3, [r7, #15]
 800c472:	2b03      	cmp	r3, #3
 800c474:	d9ee      	bls.n	800c454 <USER_SPI_initialize+0x74>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800c476:	7abb      	ldrb	r3, [r7, #10]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d167      	bne.n	800c54c <USER_SPI_initialize+0x16c>
 800c47c:	7afb      	ldrb	r3, [r7, #11]
 800c47e:	2baa      	cmp	r3, #170	; 0xaa
 800c480:	d164      	bne.n	800c54c <USER_SPI_initialize+0x16c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800c482:	bf00      	nop
 800c484:	f7ff fe36 	bl	800c0f4 <SPI_Timer_Status>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d007      	beq.n	800c49e <USER_SPI_initialize+0xbe>
 800c48e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c492:	20a9      	movs	r0, #169	; 0xa9
 800c494:	f7ff ff35 	bl	800c302 <send_cmd>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1f2      	bne.n	800c484 <USER_SPI_initialize+0xa4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800c49e:	f7ff fe29 	bl	800c0f4 <SPI_Timer_Status>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d051      	beq.n	800c54c <USER_SPI_initialize+0x16c>
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	203a      	movs	r0, #58	; 0x3a
 800c4ac:	f7ff ff29 	bl	800c302 <send_cmd>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d14a      	bne.n	800c54c <USER_SPI_initialize+0x16c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	73fb      	strb	r3, [r7, #15]
 800c4ba:	e00d      	b.n	800c4d8 <USER_SPI_initialize+0xf8>
 800c4bc:	7bfc      	ldrb	r4, [r7, #15]
 800c4be:	20ff      	movs	r0, #255	; 0xff
 800c4c0:	f7ff fe2e 	bl	800c120 <xchg_spi>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f107 0310 	add.w	r3, r7, #16
 800c4cc:	4423      	add	r3, r4
 800c4ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	73fb      	strb	r3, [r7, #15]
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
 800c4da:	2b03      	cmp	r3, #3
 800c4dc:	d9ee      	bls.n	800c4bc <USER_SPI_initialize+0xdc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800c4de:	7a3b      	ldrb	r3, [r7, #8]
 800c4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d001      	beq.n	800c4ec <USER_SPI_initialize+0x10c>
 800c4e8:	230c      	movs	r3, #12
 800c4ea:	e000      	b.n	800c4ee <USER_SPI_initialize+0x10e>
 800c4ec:	2304      	movs	r3, #4
 800c4ee:	737b      	strb	r3, [r7, #13]
 800c4f0:	e02c      	b.n	800c54c <USER_SPI_initialize+0x16c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	20a9      	movs	r0, #169	; 0xa9
 800c4f6:	f7ff ff04 	bl	800c302 <send_cmd>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d804      	bhi.n	800c50a <USER_SPI_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800c500:	2302      	movs	r3, #2
 800c502:	737b      	strb	r3, [r7, #13]
 800c504:	23a9      	movs	r3, #169	; 0xa9
 800c506:	73bb      	strb	r3, [r7, #14]
 800c508:	e003      	b.n	800c512 <USER_SPI_initialize+0x132>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800c50a:	2301      	movs	r3, #1
 800c50c:	737b      	strb	r3, [r7, #13]
 800c50e:	2301      	movs	r3, #1
 800c510:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800c512:	bf00      	nop
 800c514:	f7ff fdee 	bl	800c0f4 <SPI_Timer_Status>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d007      	beq.n	800c52e <USER_SPI_initialize+0x14e>
 800c51e:	7bbb      	ldrb	r3, [r7, #14]
 800c520:	2100      	movs	r1, #0
 800c522:	4618      	mov	r0, r3
 800c524:	f7ff feed 	bl	800c302 <send_cmd>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1f2      	bne.n	800c514 <USER_SPI_initialize+0x134>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800c52e:	f7ff fde1 	bl	800c0f4 <SPI_Timer_Status>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d007      	beq.n	800c548 <USER_SPI_initialize+0x168>
 800c538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c53c:	2010      	movs	r0, #16
 800c53e:	f7ff fee0 	bl	800c302 <send_cmd>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d001      	beq.n	800c54c <USER_SPI_initialize+0x16c>
				ty = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800c54c:	4a0e      	ldr	r2, [pc, #56]	; (800c588 <USER_SPI_initialize+0x1a8>)
 800c54e:	7b7b      	ldrb	r3, [r7, #13]
 800c550:	7013      	strb	r3, [r2, #0]
	despiselect();
 800c552:	f7ff fe53 	bl	800c1fc <despiselect>

	if (ty) {			/* OK */
 800c556:	7b7b      	ldrb	r3, [r7, #13]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d008      	beq.n	800c56e <USER_SPI_initialize+0x18e>
		FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800c55c:	4b09      	ldr	r3, [pc, #36]	; (800c584 <USER_SPI_initialize+0x1a4>)
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	b2db      	uxtb	r3, r3
 800c562:	f023 0301 	bic.w	r3, r3, #1
 800c566:	b2da      	uxtb	r2, r3
 800c568:	4b06      	ldr	r3, [pc, #24]	; (800c584 <USER_SPI_initialize+0x1a4>)
 800c56a:	701a      	strb	r2, [r3, #0]
 800c56c:	e002      	b.n	800c574 <USER_SPI_initialize+0x194>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800c56e:	4b05      	ldr	r3, [pc, #20]	; (800c584 <USER_SPI_initialize+0x1a4>)
 800c570:	2201      	movs	r2, #1
 800c572:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800c574:	4b03      	ldr	r3, [pc, #12]	; (800c584 <USER_SPI_initialize+0x1a4>)
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	b2db      	uxtb	r3, r3
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd90      	pop	{r4, r7, pc}
 800c582:	bf00      	nop
 800c584:	2000002c 	.word	0x2000002c
 800c588:	200003a4 	.word	0x200003a4

0800c58c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	4603      	mov	r3, r0
 800c594:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d001      	beq.n	800c5a0 <USER_SPI_status+0x14>
 800c59c:	2301      	movs	r3, #1
 800c59e:	e002      	b.n	800c5a6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800c5a0:	4b04      	ldr	r3, [pc, #16]	; (800c5b4 <USER_SPI_status+0x28>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	b2db      	uxtb	r3, r3
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	2000002c 	.word	0x2000002c

0800c5b8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60b9      	str	r1, [r7, #8]
 800c5c0:	607a      	str	r2, [r7, #4]
 800c5c2:	603b      	str	r3, [r7, #0]
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d102      	bne.n	800c5d4 <USER_SPI_read+0x1c>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d101      	bne.n	800c5d8 <USER_SPI_read+0x20>
 800c5d4:	2304      	movs	r3, #4
 800c5d6:	e04d      	b.n	800c674 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c5d8:	4b28      	ldr	r3, [pc, #160]	; (800c67c <USER_SPI_read+0xc4>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	f003 0301 	and.w	r3, r3, #1
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d001      	beq.n	800c5ea <USER_SPI_read+0x32>
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	e044      	b.n	800c674 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800c5ea:	4b25      	ldr	r3, [pc, #148]	; (800c680 <USER_SPI_read+0xc8>)
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	f003 0308 	and.w	r3, r3, #8
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d102      	bne.n	800c5fc <USER_SPI_read+0x44>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	025b      	lsls	r3, r3, #9
 800c5fa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d111      	bne.n	800c626 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800c602:	6879      	ldr	r1, [r7, #4]
 800c604:	2011      	movs	r0, #17
 800c606:	f7ff fe7c 	bl	800c302 <send_cmd>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d129      	bne.n	800c664 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800c610:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c614:	68b8      	ldr	r0, [r7, #8]
 800c616:	f7ff fe19 	bl	800c24c <rcvr_datablock>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d021      	beq.n	800c664 <USER_SPI_read+0xac>
			count = 0;
 800c620:	2300      	movs	r3, #0
 800c622:	603b      	str	r3, [r7, #0]
 800c624:	e01e      	b.n	800c664 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	2012      	movs	r0, #18
 800c62a:	f7ff fe6a 	bl	800c302 <send_cmd>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d117      	bne.n	800c664 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800c634:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c638:	68b8      	ldr	r0, [r7, #8]
 800c63a:	f7ff fe07 	bl	800c24c <rcvr_datablock>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00a      	beq.n	800c65a <USER_SPI_read+0xa2>
				buff += 512;
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c64a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	3b01      	subs	r3, #1
 800c650:	603b      	str	r3, [r7, #0]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1ed      	bne.n	800c634 <USER_SPI_read+0x7c>
 800c658:	e000      	b.n	800c65c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800c65a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800c65c:	2100      	movs	r1, #0
 800c65e:	200c      	movs	r0, #12
 800c660:	f7ff fe4f 	bl	800c302 <send_cmd>
		}
	}
	despiselect();
 800c664:	f7ff fdca 	bl	800c1fc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	bf14      	ite	ne
 800c66e:	2301      	movne	r3, #1
 800c670:	2300      	moveq	r3, #0
 800c672:	b2db      	uxtb	r3, r3
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	2000002c 	.word	0x2000002c
 800c680:	200003a4 	.word	0x200003a4

0800c684 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60b9      	str	r1, [r7, #8]
 800c68c:	607a      	str	r2, [r7, #4]
 800c68e:	603b      	str	r3, [r7, #0]
 800c690:	4603      	mov	r3, r0
 800c692:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c694:	7bfb      	ldrb	r3, [r7, #15]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d102      	bne.n	800c6a0 <USER_SPI_write+0x1c>
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <USER_SPI_write+0x20>
 800c6a0:	2304      	movs	r3, #4
 800c6a2:	e063      	b.n	800c76c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800c6a4:	4b33      	ldr	r3, [pc, #204]	; (800c774 <USER_SPI_write+0xf0>)
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <USER_SPI_write+0x32>
 800c6b2:	2303      	movs	r3, #3
 800c6b4:	e05a      	b.n	800c76c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800c6b6:	4b2f      	ldr	r3, [pc, #188]	; (800c774 <USER_SPI_write+0xf0>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	f003 0304 	and.w	r3, r3, #4
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <USER_SPI_write+0x44>
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	e051      	b.n	800c76c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800c6c8:	4b2b      	ldr	r3, [pc, #172]	; (800c778 <USER_SPI_write+0xf4>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	f003 0308 	and.w	r3, r3, #8
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d102      	bne.n	800c6da <USER_SPI_write+0x56>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	025b      	lsls	r3, r3, #9
 800c6d8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d110      	bne.n	800c702 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800c6e0:	6879      	ldr	r1, [r7, #4]
 800c6e2:	2018      	movs	r0, #24
 800c6e4:	f7ff fe0d 	bl	800c302 <send_cmd>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d136      	bne.n	800c75c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800c6ee:	21fe      	movs	r1, #254	; 0xfe
 800c6f0:	68b8      	ldr	r0, [r7, #8]
 800c6f2:	f7ff fdd4 	bl	800c29e <xmit_datablock>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d02f      	beq.n	800c75c <USER_SPI_write+0xd8>
			count = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	603b      	str	r3, [r7, #0]
 800c700:	e02c      	b.n	800c75c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800c702:	4b1d      	ldr	r3, [pc, #116]	; (800c778 <USER_SPI_write+0xf4>)
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	f003 0306 	and.w	r3, r3, #6
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d003      	beq.n	800c716 <USER_SPI_write+0x92>
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	2097      	movs	r0, #151	; 0x97
 800c712:	f7ff fdf6 	bl	800c302 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	2019      	movs	r0, #25
 800c71a:	f7ff fdf2 	bl	800c302 <send_cmd>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d11b      	bne.n	800c75c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800c724:	21fc      	movs	r1, #252	; 0xfc
 800c726:	68b8      	ldr	r0, [r7, #8]
 800c728:	f7ff fdb9 	bl	800c29e <xmit_datablock>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00a      	beq.n	800c748 <USER_SPI_write+0xc4>
				buff += 512;
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c738:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	603b      	str	r3, [r7, #0]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1ee      	bne.n	800c724 <USER_SPI_write+0xa0>
 800c746:	e000      	b.n	800c74a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800c748:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800c74a:	21fd      	movs	r1, #253	; 0xfd
 800c74c:	2000      	movs	r0, #0
 800c74e:	f7ff fda6 	bl	800c29e <xmit_datablock>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <USER_SPI_write+0xd8>
 800c758:	2301      	movs	r3, #1
 800c75a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800c75c:	f7ff fd4e 	bl	800c1fc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	bf14      	ite	ne
 800c766:	2301      	movne	r3, #1
 800c768:	2300      	moveq	r3, #0
 800c76a:	b2db      	uxtb	r3, r3
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	2000002c 	.word	0x2000002c
 800c778:	200003a4 	.word	0x200003a4

0800c77c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08c      	sub	sp, #48	; 0x30
 800c780:	af00      	add	r7, sp, #0
 800c782:	4603      	mov	r3, r0
 800c784:	603a      	str	r2, [r7, #0]
 800c786:	71fb      	strb	r3, [r7, #7]
 800c788:	460b      	mov	r3, r1
 800c78a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800c78c:	79fb      	ldrb	r3, [r7, #7]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d001      	beq.n	800c796 <USER_SPI_ioctl+0x1a>
 800c792:	2304      	movs	r3, #4
 800c794:	e15a      	b.n	800ca4c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c796:	4baf      	ldr	r3, [pc, #700]	; (800ca54 <USER_SPI_ioctl+0x2d8>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <USER_SPI_ioctl+0x2c>
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e151      	b.n	800ca4c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800c7ae:	79bb      	ldrb	r3, [r7, #6]
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	f200 8136 	bhi.w	800ca22 <USER_SPI_ioctl+0x2a6>
 800c7b6:	a201      	add	r2, pc, #4	; (adr r2, 800c7bc <USER_SPI_ioctl+0x40>)
 800c7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7bc:	0800c7d1 	.word	0x0800c7d1
 800c7c0:	0800c7e5 	.word	0x0800c7e5
 800c7c4:	0800ca23 	.word	0x0800ca23
 800c7c8:	0800c891 	.word	0x0800c891
 800c7cc:	0800c987 	.word	0x0800c987
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800c7d0:	f7ff fd22 	bl	800c218 <spiselect>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 8127 	beq.w	800ca2a <USER_SPI_ioctl+0x2ae>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800c7e2:	e122      	b.n	800ca2a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	2009      	movs	r0, #9
 800c7e8:	f7ff fd8b 	bl	800c302 <send_cmd>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f040 811d 	bne.w	800ca2e <USER_SPI_ioctl+0x2b2>
 800c7f4:	f107 030c 	add.w	r3, r7, #12
 800c7f8:	2110      	movs	r1, #16
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7ff fd26 	bl	800c24c <rcvr_datablock>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	f000 8113 	beq.w	800ca2e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800c808:	7b3b      	ldrb	r3, [r7, #12]
 800c80a:	099b      	lsrs	r3, r3, #6
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d111      	bne.n	800c836 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800c812:	7d7b      	ldrb	r3, [r7, #21]
 800c814:	461a      	mov	r2, r3
 800c816:	7d3b      	ldrb	r3, [r7, #20]
 800c818:	021b      	lsls	r3, r3, #8
 800c81a:	4413      	add	r3, r2
 800c81c:	461a      	mov	r2, r3
 800c81e:	7cfb      	ldrb	r3, [r7, #19]
 800c820:	041b      	lsls	r3, r3, #16
 800c822:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800c826:	4413      	add	r3, r2
 800c828:	3301      	adds	r3, #1
 800c82a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	029a      	lsls	r2, r3, #10
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	e028      	b.n	800c888 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800c836:	7c7b      	ldrb	r3, [r7, #17]
 800c838:	f003 030f 	and.w	r3, r3, #15
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	7dbb      	ldrb	r3, [r7, #22]
 800c840:	09db      	lsrs	r3, r3, #7
 800c842:	b2db      	uxtb	r3, r3
 800c844:	4413      	add	r3, r2
 800c846:	b2da      	uxtb	r2, r3
 800c848:	7d7b      	ldrb	r3, [r7, #21]
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	f003 0306 	and.w	r3, r3, #6
 800c852:	b2db      	uxtb	r3, r3
 800c854:	4413      	add	r3, r2
 800c856:	b2db      	uxtb	r3, r3
 800c858:	3302      	adds	r3, #2
 800c85a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800c85e:	7d3b      	ldrb	r3, [r7, #20]
 800c860:	099b      	lsrs	r3, r3, #6
 800c862:	b2db      	uxtb	r3, r3
 800c864:	461a      	mov	r2, r3
 800c866:	7cfb      	ldrb	r3, [r7, #19]
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	441a      	add	r2, r3
 800c86c:	7cbb      	ldrb	r3, [r7, #18]
 800c86e:	029b      	lsls	r3, r3, #10
 800c870:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c874:	4413      	add	r3, r2
 800c876:	3301      	adds	r3, #1
 800c878:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800c87a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c87e:	3b09      	subs	r3, #9
 800c880:	69fa      	ldr	r2, [r7, #28]
 800c882:	409a      	lsls	r2, r3
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800c888:	2300      	movs	r3, #0
 800c88a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800c88e:	e0ce      	b.n	800ca2e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800c890:	4b71      	ldr	r3, [pc, #452]	; (800ca58 <USER_SPI_ioctl+0x2dc>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	f003 0304 	and.w	r3, r3, #4
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d031      	beq.n	800c900 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800c89c:	2100      	movs	r1, #0
 800c89e:	208d      	movs	r0, #141	; 0x8d
 800c8a0:	f7ff fd2f 	bl	800c302 <send_cmd>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f040 80c3 	bne.w	800ca32 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800c8ac:	20ff      	movs	r0, #255	; 0xff
 800c8ae:	f7ff fc37 	bl	800c120 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800c8b2:	f107 030c 	add.w	r3, r7, #12
 800c8b6:	2110      	movs	r1, #16
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7ff fcc7 	bl	800c24c <rcvr_datablock>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 80b6 	beq.w	800ca32 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800c8c6:	2330      	movs	r3, #48	; 0x30
 800c8c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c8cc:	e007      	b.n	800c8de <USER_SPI_ioctl+0x162>
 800c8ce:	20ff      	movs	r0, #255	; 0xff
 800c8d0:	f7ff fc26 	bl	800c120 <xchg_spi>
 800c8d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c8de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1f3      	bne.n	800c8ce <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800c8e6:	7dbb      	ldrb	r3, [r7, #22]
 800c8e8:	091b      	lsrs	r3, r3, #4
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	2310      	movs	r3, #16
 800c8f0:	fa03 f202 	lsl.w	r2, r3, r2
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800c8fe:	e098      	b.n	800ca32 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800c900:	2100      	movs	r1, #0
 800c902:	2009      	movs	r0, #9
 800c904:	f7ff fcfd 	bl	800c302 <send_cmd>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f040 8091 	bne.w	800ca32 <USER_SPI_ioctl+0x2b6>
 800c910:	f107 030c 	add.w	r3, r7, #12
 800c914:	2110      	movs	r1, #16
 800c916:	4618      	mov	r0, r3
 800c918:	f7ff fc98 	bl	800c24c <rcvr_datablock>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 8087 	beq.w	800ca32 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c924:	4b4c      	ldr	r3, [pc, #304]	; (800ca58 <USER_SPI_ioctl+0x2dc>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	f003 0302 	and.w	r3, r3, #2
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d012      	beq.n	800c956 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c930:	7dbb      	ldrb	r3, [r7, #22]
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800c938:	7dfa      	ldrb	r2, [r7, #23]
 800c93a:	09d2      	lsrs	r2, r2, #7
 800c93c:	b2d2      	uxtb	r2, r2
 800c93e:	4413      	add	r3, r2
 800c940:	1c5a      	adds	r2, r3, #1
 800c942:	7e7b      	ldrb	r3, [r7, #25]
 800c944:	099b      	lsrs	r3, r3, #6
 800c946:	b2db      	uxtb	r3, r3
 800c948:	3b01      	subs	r3, #1
 800c94a:	fa02 f303 	lsl.w	r3, r2, r3
 800c94e:	461a      	mov	r2, r3
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	e013      	b.n	800c97e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c956:	7dbb      	ldrb	r3, [r7, #22]
 800c958:	109b      	asrs	r3, r3, #2
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	f003 031f 	and.w	r3, r3, #31
 800c960:	3301      	adds	r3, #1
 800c962:	7dfa      	ldrb	r2, [r7, #23]
 800c964:	00d2      	lsls	r2, r2, #3
 800c966:	f002 0218 	and.w	r2, r2, #24
 800c96a:	7df9      	ldrb	r1, [r7, #23]
 800c96c:	0949      	lsrs	r1, r1, #5
 800c96e:	b2c9      	uxtb	r1, r1
 800c970:	440a      	add	r2, r1
 800c972:	3201      	adds	r2, #1
 800c974:	fb02 f303 	mul.w	r3, r2, r3
 800c978:	461a      	mov	r2, r3
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c97e:	2300      	movs	r3, #0
 800c980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800c984:	e055      	b.n	800ca32 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c986:	4b34      	ldr	r3, [pc, #208]	; (800ca58 <USER_SPI_ioctl+0x2dc>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	f003 0306 	and.w	r3, r3, #6
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d051      	beq.n	800ca36 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c992:	f107 020c 	add.w	r2, r7, #12
 800c996:	79fb      	ldrb	r3, [r7, #7]
 800c998:	210b      	movs	r1, #11
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff feee 	bl	800c77c <USER_SPI_ioctl>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d149      	bne.n	800ca3a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c9a6:	7b3b      	ldrb	r3, [r7, #12]
 800c9a8:	099b      	lsrs	r3, r3, #6
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d104      	bne.n	800c9ba <USER_SPI_ioctl+0x23e>
 800c9b0:	7dbb      	ldrb	r3, [r7, #22]
 800c9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d041      	beq.n	800ca3e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	623b      	str	r3, [r7, #32]
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9c4:	6a3b      	ldr	r3, [r7, #32]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800c9ca:	4b23      	ldr	r3, [pc, #140]	; (800ca58 <USER_SPI_ioctl+0x2dc>)
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	f003 0308 	and.w	r3, r3, #8
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d105      	bne.n	800c9e2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d8:	025b      	lsls	r3, r3, #9
 800c9da:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	025b      	lsls	r3, r3, #9
 800c9e0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c9e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9e4:	2020      	movs	r0, #32
 800c9e6:	f7ff fc8c 	bl	800c302 <send_cmd>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d128      	bne.n	800ca42 <USER_SPI_ioctl+0x2c6>
 800c9f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9f2:	2021      	movs	r0, #33	; 0x21
 800c9f4:	f7ff fc85 	bl	800c302 <send_cmd>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d121      	bne.n	800ca42 <USER_SPI_ioctl+0x2c6>
 800c9fe:	2100      	movs	r1, #0
 800ca00:	2026      	movs	r0, #38	; 0x26
 800ca02:	f7ff fc7e 	bl	800c302 <send_cmd>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d11a      	bne.n	800ca42 <USER_SPI_ioctl+0x2c6>
 800ca0c:	f247 5030 	movw	r0, #30000	; 0x7530
 800ca10:	f7ff fbd1 	bl	800c1b6 <wait_ready>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d013      	beq.n	800ca42 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800ca20:	e00f      	b.n	800ca42 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800ca22:	2304      	movs	r3, #4
 800ca24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ca28:	e00c      	b.n	800ca44 <USER_SPI_ioctl+0x2c8>
		break;
 800ca2a:	bf00      	nop
 800ca2c:	e00a      	b.n	800ca44 <USER_SPI_ioctl+0x2c8>
		break;
 800ca2e:	bf00      	nop
 800ca30:	e008      	b.n	800ca44 <USER_SPI_ioctl+0x2c8>
		break;
 800ca32:	bf00      	nop
 800ca34:	e006      	b.n	800ca44 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ca36:	bf00      	nop
 800ca38:	e004      	b.n	800ca44 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ca3a:	bf00      	nop
 800ca3c:	e002      	b.n	800ca44 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ca3e:	bf00      	nop
 800ca40:	e000      	b.n	800ca44 <USER_SPI_ioctl+0x2c8>
		break;
 800ca42:	bf00      	nop
	}

	despiselect();
 800ca44:	f7ff fbda 	bl	800c1fc <despiselect>

	return res;
 800ca48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3730      	adds	r7, #48	; 0x30
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	2000002c 	.word	0x2000002c
 800ca58:	200003a4 	.word	0x200003a4

0800ca5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	460b      	mov	r3, r1
 800ca66:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7c1b      	ldrb	r3, [r3, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d115      	bne.n	800caa0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ca74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca78:	2202      	movs	r2, #2
 800ca7a:	2181      	movs	r1, #129	; 0x81
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f004 fa4d 	bl	8010f1c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2201      	movs	r2, #1
 800ca86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ca88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca8c:	2202      	movs	r2, #2
 800ca8e:	2101      	movs	r1, #1
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f004 fa43 	bl	8010f1c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2201      	movs	r2, #1
 800ca9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ca9e:	e012      	b.n	800cac6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800caa0:	2340      	movs	r3, #64	; 0x40
 800caa2:	2202      	movs	r2, #2
 800caa4:	2181      	movs	r1, #129	; 0x81
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f004 fa38 	bl	8010f1c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cab2:	2340      	movs	r3, #64	; 0x40
 800cab4:	2202      	movs	r2, #2
 800cab6:	2101      	movs	r1, #1
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f004 fa2f 	bl	8010f1c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2201      	movs	r2, #1
 800cac2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cac6:	2308      	movs	r3, #8
 800cac8:	2203      	movs	r2, #3
 800caca:	2182      	movs	r1, #130	; 0x82
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f004 fa25 	bl	8010f1c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2201      	movs	r2, #1
 800cad6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cad8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cadc:	f004 fc18 	bl	8011310 <USBD_static_malloc>
 800cae0:	4602      	mov	r2, r0
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d102      	bne.n	800caf8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800caf2:	2301      	movs	r3, #1
 800caf4:	73fb      	strb	r3, [r7, #15]
 800caf6:	e026      	b.n	800cb46 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cafe:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	7c1b      	ldrb	r3, [r3, #16]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d109      	bne.n	800cb36 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb2c:	2101      	movs	r1, #1
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f004 fb6a 	bl	8011208 <USBD_LL_PrepareReceive>
 800cb34:	e007      	b.n	800cb46 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb3c:	2340      	movs	r3, #64	; 0x40
 800cb3e:	2101      	movs	r1, #1
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f004 fb61 	bl	8011208 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cb60:	2181      	movs	r1, #129	; 0x81
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f004 fa18 	bl	8010f98 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cb6e:	2101      	movs	r1, #1
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f004 fa11 	bl	8010f98 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cb7e:	2182      	movs	r1, #130	; 0x82
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f004 fa09 	bl	8010f98 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00e      	beq.n	800cbb4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cba6:	4618      	mov	r0, r3
 800cba8:	f004 fbc0 	bl	801132c <USBD_static_free>
    pdev->pClassData = NULL;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800cbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b086      	sub	sp, #24
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbce:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d039      	beq.n	800cc5c <USBD_CDC_Setup+0x9e>
 800cbe8:	2b20      	cmp	r3, #32
 800cbea:	d17c      	bne.n	800cce6 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	88db      	ldrh	r3, [r3, #6]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d029      	beq.n	800cc48 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	b25b      	sxtb	r3, r3
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	da11      	bge.n	800cc22 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800cc0a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	88d2      	ldrh	r2, [r2, #6]
 800cc10:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cc12:	6939      	ldr	r1, [r7, #16]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	88db      	ldrh	r3, [r3, #6]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 f9fa 	bl	800e014 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800cc20:	e068      	b.n	800ccf4 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	785a      	ldrb	r2, [r3, #1]
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	88db      	ldrh	r3, [r3, #6]
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cc38:	6939      	ldr	r1, [r7, #16]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	88db      	ldrh	r3, [r3, #6]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f001 fa15 	bl	800e070 <USBD_CtlPrepareRx>
      break;
 800cc46:	e055      	b.n	800ccf4 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	7850      	ldrb	r0, [r2, #1]
 800cc54:	2200      	movs	r2, #0
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	4798      	blx	r3
      break;
 800cc5a:	e04b      	b.n	800ccf4 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	785b      	ldrb	r3, [r3, #1]
 800cc60:	2b0a      	cmp	r3, #10
 800cc62:	d017      	beq.n	800cc94 <USBD_CDC_Setup+0xd6>
 800cc64:	2b0b      	cmp	r3, #11
 800cc66:	d029      	beq.n	800ccbc <USBD_CDC_Setup+0xfe>
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d133      	bne.n	800ccd4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc72:	2b03      	cmp	r3, #3
 800cc74:	d107      	bne.n	800cc86 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800cc76:	f107 030c 	add.w	r3, r7, #12
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f001 f9c8 	bl	800e014 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc84:	e02e      	b.n	800cce4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f001 f958 	bl	800df3e <USBD_CtlError>
            ret = USBD_FAIL;
 800cc8e:	2302      	movs	r3, #2
 800cc90:	75fb      	strb	r3, [r7, #23]
          break;
 800cc92:	e027      	b.n	800cce4 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d107      	bne.n	800ccae <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800cc9e:	f107 030f 	add.w	r3, r7, #15
 800cca2:	2201      	movs	r2, #1
 800cca4:	4619      	mov	r1, r3
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f001 f9b4 	bl	800e014 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccac:	e01a      	b.n	800cce4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800ccae:	6839      	ldr	r1, [r7, #0]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f001 f944 	bl	800df3e <USBD_CtlError>
            ret = USBD_FAIL;
 800ccb6:	2302      	movs	r3, #2
 800ccb8:	75fb      	strb	r3, [r7, #23]
          break;
 800ccba:	e013      	b.n	800cce4 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d00d      	beq.n	800cce2 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f001 f938 	bl	800df3e <USBD_CtlError>
            ret = USBD_FAIL;
 800ccce:	2302      	movs	r3, #2
 800ccd0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ccd2:	e006      	b.n	800cce2 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f001 f931 	bl	800df3e <USBD_CtlError>
          ret = USBD_FAIL;
 800ccdc:	2302      	movs	r3, #2
 800ccde:	75fb      	strb	r3, [r7, #23]
          break;
 800cce0:	e000      	b.n	800cce4 <USBD_CDC_Setup+0x126>
          break;
 800cce2:	bf00      	nop
      }
      break;
 800cce4:	e006      	b.n	800ccf4 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800cce6:	6839      	ldr	r1, [r7, #0]
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f001 f928 	bl	800df3e <USBD_CtlError>
      ret = USBD_FAIL;
 800ccee:	2302      	movs	r3, #2
 800ccf0:	75fb      	strb	r3, [r7, #23]
      break;
 800ccf2:	bf00      	nop
  }

  return ret;
 800ccf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b084      	sub	sp, #16
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	460b      	mov	r3, r1
 800cd08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd10:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd18:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d037      	beq.n	800cd94 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cd24:	78fa      	ldrb	r2, [r7, #3]
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	4613      	mov	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	440b      	add	r3, r1
 800cd32:	331c      	adds	r3, #28
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d026      	beq.n	800cd88 <USBD_CDC_DataIn+0x8a>
 800cd3a:	78fa      	ldrb	r2, [r7, #3]
 800cd3c:	6879      	ldr	r1, [r7, #4]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	440b      	add	r3, r1
 800cd48:	331c      	adds	r3, #28
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	78fa      	ldrb	r2, [r7, #3]
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	0152      	lsls	r2, r2, #5
 800cd52:	440a      	add	r2, r1
 800cd54:	3238      	adds	r2, #56	; 0x38
 800cd56:	6812      	ldr	r2, [r2, #0]
 800cd58:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd5c:	fb02 f201 	mul.w	r2, r2, r1
 800cd60:	1a9b      	subs	r3, r3, r2
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d110      	bne.n	800cd88 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800cd66:	78fa      	ldrb	r2, [r7, #3]
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	440b      	add	r3, r1
 800cd74:	331c      	adds	r3, #28
 800cd76:	2200      	movs	r2, #0
 800cd78:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cd7a:	78f9      	ldrb	r1, [r7, #3]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	2200      	movs	r2, #0
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f004 fa07 	bl	8011194 <USBD_LL_Transmit>
 800cd86:	e003      	b.n	800cd90 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	e000      	b.n	800cd96 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800cd94:	2302      	movs	r3, #2
  }
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b084      	sub	sp, #16
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	460b      	mov	r3, r1
 800cda8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdb0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cdb2:	78fb      	ldrb	r3, [r7, #3]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f004 fa60 	bl	801127c <USBD_LL_GetRxDataSize>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00d      	beq.n	800cdea <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cde2:	4611      	mov	r1, r2
 800cde4:	4798      	blx	r3

    return USBD_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	e000      	b.n	800cdec <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800cdea:	2302      	movs	r3, #2
  }
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce02:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d015      	beq.n	800ce3a <USBD_CDC_EP0_RxReady+0x46>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ce14:	2bff      	cmp	r3, #255	; 0xff
 800ce16:	d010      	beq.n	800ce3a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ce26:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ce2e:	b292      	uxth	r2, r2
 800ce30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	22ff      	movs	r2, #255	; 0xff
 800ce36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2243      	movs	r2, #67	; 0x43
 800ce50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ce52:	4b03      	ldr	r3, [pc, #12]	; (800ce60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr
 800ce60:	200000b8 	.word	0x200000b8

0800ce64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2243      	movs	r2, #67	; 0x43
 800ce70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ce72:	4b03      	ldr	r3, [pc, #12]	; (800ce80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	370c      	adds	r7, #12
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr
 800ce80:	20000074 	.word	0x20000074

0800ce84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2243      	movs	r2, #67	; 0x43
 800ce90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ce92:	4b03      	ldr	r3, [pc, #12]	; (800cea0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	200000fc 	.word	0x200000fc

0800cea4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	220a      	movs	r2, #10
 800ceb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ceb2:	4b03      	ldr	r3, [pc, #12]	; (800cec0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr
 800cec0:	20000030 	.word	0x20000030

0800cec4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800cece:	2302      	movs	r3, #2
 800ced0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d005      	beq.n	800cee4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800cef2:	b480      	push	{r7}
 800cef4:	b087      	sub	sp, #28
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	60b9      	str	r1, [r7, #8]
 800cefc:	4613      	mov	r3, r2
 800cefe:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf06:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cf10:	88fa      	ldrh	r2, [r7, #6]
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800cf26:	b480      	push	{r7}
 800cf28:	b085      	sub	sp, #20
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf36:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	683a      	ldr	r2, [r7, #0]
 800cf3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf5c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d017      	beq.n	800cf98 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	7c1b      	ldrb	r3, [r3, #16]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d109      	bne.n	800cf84 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf7a:	2101      	movs	r1, #1
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f004 f943 	bl	8011208 <USBD_LL_PrepareReceive>
 800cf82:	e007      	b.n	800cf94 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf8a:	2340      	movs	r3, #64	; 0x40
 800cf8c:	2101      	movs	r1, #1
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f004 f93a 	bl	8011208 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800cf94:	2300      	movs	r3, #0
 800cf96:	e000      	b.n	800cf9a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800cf98:	2302      	movs	r3, #2
  }
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b084      	sub	sp, #16
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	60f8      	str	r0, [r7, #12]
 800cfaa:	60b9      	str	r1, [r7, #8]
 800cfac:	4613      	mov	r3, r2
 800cfae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d101      	bne.n	800cfba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	e01a      	b.n	800cff0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d003      	beq.n	800cfda <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	79fa      	ldrb	r2, [r7, #7]
 800cfe6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f003 ff03 	bl	8010df4 <USBD_LL_Init>

  return USBD_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d006      	beq.n	800d01a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	73fb      	strb	r3, [r7, #15]
 800d018:	e001      	b.n	800d01e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d01a:	2302      	movs	r3, #2
 800d01c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d020:	4618      	mov	r0, r3
 800d022:	3714      	adds	r7, #20
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f003 ff3f 	bl	8010eb8 <USBD_LL_Start>

  return USBD_OK;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3708      	adds	r7, #8
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	370c      	adds	r7, #12
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b084      	sub	sp, #16
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	460b      	mov	r3, r1
 800d064:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d066:	2302      	movs	r3, #2
 800d068:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00c      	beq.n	800d08e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	78fa      	ldrb	r2, [r7, #3]
 800d07e:	4611      	mov	r1, r2
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	4798      	blx	r3
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d101      	bne.n	800d08e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	78fa      	ldrb	r2, [r7, #3]
 800d0ae:	4611      	mov	r1, r2
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	4798      	blx	r3

  return USBD_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f000 fef7 	bl	800dec4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d0f2:	f003 031f 	and.w	r3, r3, #31
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d00c      	beq.n	800d114 <USBD_LL_SetupStage+0x56>
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d302      	bcc.n	800d104 <USBD_LL_SetupStage+0x46>
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	d010      	beq.n	800d124 <USBD_LL_SetupStage+0x66>
 800d102:	e017      	b.n	800d134 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 f9cd 	bl	800d4ac <USBD_StdDevReq>
      break;
 800d112:	e01a      	b.n	800d14a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d11a:	4619      	mov	r1, r3
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fa2f 	bl	800d580 <USBD_StdItfReq>
      break;
 800d122:	e012      	b.n	800d14a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d12a:	4619      	mov	r1, r3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fa6d 	bl	800d60c <USBD_StdEPReq>
      break;
 800d132:	e00a      	b.n	800d14a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d13a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	4619      	mov	r1, r3
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f003 ff5e 	bl	8011004 <USBD_LL_StallEP>
      break;
 800d148:	bf00      	nop
  }

  return USBD_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	460b      	mov	r3, r1
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d162:	7afb      	ldrb	r3, [r7, #11]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d14b      	bne.n	800d200 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d16e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d176:	2b03      	cmp	r3, #3
 800d178:	d134      	bne.n	800d1e4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	68da      	ldr	r2, [r3, #12]
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	429a      	cmp	r2, r3
 800d184:	d919      	bls.n	800d1ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	68da      	ldr	r2, [r3, #12]
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	1ad2      	subs	r2, r2, r3
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	68da      	ldr	r2, [r3, #12]
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d203      	bcs.n	800d1a8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	e002      	b.n	800d1ae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f000 ff7a 	bl	800e0ac <USBD_CtlContinueRx>
 800d1b8:	e038      	b.n	800d22c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00a      	beq.n	800d1dc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d1cc:	2b03      	cmp	r3, #3
 800d1ce:	d105      	bne.n	800d1dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1d6:	691b      	ldr	r3, [r3, #16]
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f000 ff77 	bl	800e0d0 <USBD_CtlSendStatus>
 800d1e2:	e023      	b.n	800d22c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d1ea:	2b05      	cmp	r3, #5
 800d1ec:	d11e      	bne.n	800d22c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f003 ff03 	bl	8011004 <USBD_LL_StallEP>
 800d1fe:	e015      	b.n	800d22c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00d      	beq.n	800d228 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d212:	2b03      	cmp	r3, #3
 800d214:	d108      	bne.n	800d228 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d21c:	699b      	ldr	r3, [r3, #24]
 800d21e:	7afa      	ldrb	r2, [r7, #11]
 800d220:	4611      	mov	r1, r2
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	4798      	blx	r3
 800d226:	e001      	b.n	800d22c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d228:	2302      	movs	r3, #2
 800d22a:	e000      	b.n	800d22e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b086      	sub	sp, #24
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	60f8      	str	r0, [r7, #12]
 800d23e:	460b      	mov	r3, r1
 800d240:	607a      	str	r2, [r7, #4]
 800d242:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d244:	7afb      	ldrb	r3, [r7, #11]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d17f      	bne.n	800d34a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	3314      	adds	r3, #20
 800d24e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d256:	2b02      	cmp	r3, #2
 800d258:	d15c      	bne.n	800d314 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	68da      	ldr	r2, [r3, #12]
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	429a      	cmp	r2, r3
 800d264:	d915      	bls.n	800d292 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	68da      	ldr	r2, [r3, #12]
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	1ad2      	subs	r2, r2, r3
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	b29b      	uxth	r3, r3
 800d27a:	461a      	mov	r2, r3
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f000 fee4 	bl	800e04c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d284:	2300      	movs	r3, #0
 800d286:	2200      	movs	r2, #0
 800d288:	2100      	movs	r1, #0
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f003 ffbc 	bl	8011208 <USBD_LL_PrepareReceive>
 800d290:	e04e      	b.n	800d330 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	697a      	ldr	r2, [r7, #20]
 800d298:	6912      	ldr	r2, [r2, #16]
 800d29a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d29e:	fb02 f201 	mul.w	r2, r2, r1
 800d2a2:	1a9b      	subs	r3, r3, r2
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d11c      	bne.n	800d2e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	689a      	ldr	r2, [r3, #8]
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d316      	bcc.n	800d2e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	689a      	ldr	r2, [r3, #8]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d20f      	bcs.n	800d2e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2100      	movs	r1, #0
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f000 fec0 	bl	800e04c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	2100      	movs	r1, #0
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f003 ff94 	bl	8011208 <USBD_LL_PrepareReceive>
 800d2e0:	e026      	b.n	800d330 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00a      	beq.n	800d304 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d2f4:	2b03      	cmp	r3, #3
 800d2f6:	d105      	bne.n	800d304 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d304:	2180      	movs	r1, #128	; 0x80
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f003 fe7c 	bl	8011004 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f000 fef2 	bl	800e0f6 <USBD_CtlReceiveStatus>
 800d312:	e00d      	b.n	800d330 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d31a:	2b04      	cmp	r3, #4
 800d31c:	d004      	beq.n	800d328 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d324:	2b00      	cmp	r3, #0
 800d326:	d103      	bne.n	800d330 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d328:	2180      	movs	r1, #128	; 0x80
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f003 fe6a 	bl	8011004 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d336:	2b01      	cmp	r3, #1
 800d338:	d11d      	bne.n	800d376 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f7ff fe82 	bl	800d044 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2200      	movs	r2, #0
 800d344:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d348:	e015      	b.n	800d376 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00d      	beq.n	800d372 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	d108      	bne.n	800d372 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d366:	695b      	ldr	r3, [r3, #20]
 800d368:	7afa      	ldrb	r2, [r7, #11]
 800d36a:	4611      	mov	r1, r2
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	4798      	blx	r3
 800d370:	e001      	b.n	800d376 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d372:	2302      	movs	r3, #2
 800d374:	e000      	b.n	800d378 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3718      	adds	r7, #24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d388:	2340      	movs	r3, #64	; 0x40
 800d38a:	2200      	movs	r2, #0
 800d38c:	2100      	movs	r1, #0
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f003 fdc4 	bl	8010f1c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2240      	movs	r2, #64	; 0x40
 800d3a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d3a4:	2340      	movs	r3, #64	; 0x40
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	2180      	movs	r1, #128	; 0x80
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f003 fdb6 	bl	8010f1c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2240      	movs	r2, #64	; 0x40
 800d3ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d009      	beq.n	800d3f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	6852      	ldr	r2, [r2, #4]
 800d3f0:	b2d2      	uxtb	r2, r2
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	4798      	blx	r3
  }

  return USBD_OK;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d402:	b480      	push	{r7}
 800d404:	b083      	sub	sp, #12
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	460b      	mov	r3, r1
 800d40c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	78fa      	ldrb	r2, [r7, #3]
 800d412:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d422:	b480      	push	{r7}
 800d424:	b083      	sub	sp, #12
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2204      	movs	r2, #4
 800d43a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d45a:	2b04      	cmp	r3, #4
 800d45c:	d105      	bne.n	800d46a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d486:	2b03      	cmp	r3, #3
 800d488:	d10b      	bne.n	800d4a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d005      	beq.n	800d4a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d49c:	69db      	ldr	r3, [r3, #28]
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d4a2:	2300      	movs	r3, #0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4c2:	2b20      	cmp	r3, #32
 800d4c4:	d004      	beq.n	800d4d0 <USBD_StdDevReq+0x24>
 800d4c6:	2b40      	cmp	r3, #64	; 0x40
 800d4c8:	d002      	beq.n	800d4d0 <USBD_StdDevReq+0x24>
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d008      	beq.n	800d4e0 <USBD_StdDevReq+0x34>
 800d4ce:	e04c      	b.n	800d56a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	6839      	ldr	r1, [r7, #0]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	4798      	blx	r3
      break;
 800d4de:	e049      	b.n	800d574 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	785b      	ldrb	r3, [r3, #1]
 800d4e4:	2b09      	cmp	r3, #9
 800d4e6:	d83a      	bhi.n	800d55e <USBD_StdDevReq+0xb2>
 800d4e8:	a201      	add	r2, pc, #4	; (adr r2, 800d4f0 <USBD_StdDevReq+0x44>)
 800d4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ee:	bf00      	nop
 800d4f0:	0800d541 	.word	0x0800d541
 800d4f4:	0800d555 	.word	0x0800d555
 800d4f8:	0800d55f 	.word	0x0800d55f
 800d4fc:	0800d54b 	.word	0x0800d54b
 800d500:	0800d55f 	.word	0x0800d55f
 800d504:	0800d523 	.word	0x0800d523
 800d508:	0800d519 	.word	0x0800d519
 800d50c:	0800d55f 	.word	0x0800d55f
 800d510:	0800d537 	.word	0x0800d537
 800d514:	0800d52d 	.word	0x0800d52d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d518:	6839      	ldr	r1, [r7, #0]
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 f9d4 	bl	800d8c8 <USBD_GetDescriptor>
          break;
 800d520:	e022      	b.n	800d568 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d522:	6839      	ldr	r1, [r7, #0]
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 fb61 	bl	800dbec <USBD_SetAddress>
          break;
 800d52a:	e01d      	b.n	800d568 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800d52c:	6839      	ldr	r1, [r7, #0]
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fb9e 	bl	800dc70 <USBD_SetConfig>
          break;
 800d534:	e018      	b.n	800d568 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d536:	6839      	ldr	r1, [r7, #0]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 fc27 	bl	800dd8c <USBD_GetConfig>
          break;
 800d53e:	e013      	b.n	800d568 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d540:	6839      	ldr	r1, [r7, #0]
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fc56 	bl	800ddf4 <USBD_GetStatus>
          break;
 800d548:	e00e      	b.n	800d568 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 fc84 	bl	800de5a <USBD_SetFeature>
          break;
 800d552:	e009      	b.n	800d568 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 fc93 	bl	800de82 <USBD_ClrFeature>
          break;
 800d55c:	e004      	b.n	800d568 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800d55e:	6839      	ldr	r1, [r7, #0]
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 fcec 	bl	800df3e <USBD_CtlError>
          break;
 800d566:	bf00      	nop
      }
      break;
 800d568:	e004      	b.n	800d574 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 fce6 	bl	800df3e <USBD_CtlError>
      break;
 800d572:	bf00      	nop
  }

  return ret;
 800d574:	7bfb      	ldrb	r3, [r7, #15]
}
 800d576:	4618      	mov	r0, r3
 800d578:	3710      	adds	r7, #16
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop

0800d580 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d58a:	2300      	movs	r3, #0
 800d58c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d596:	2b20      	cmp	r3, #32
 800d598:	d003      	beq.n	800d5a2 <USBD_StdItfReq+0x22>
 800d59a:	2b40      	cmp	r3, #64	; 0x40
 800d59c:	d001      	beq.n	800d5a2 <USBD_StdItfReq+0x22>
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d12a      	bne.n	800d5f8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d81d      	bhi.n	800d5ea <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	889b      	ldrh	r3, [r3, #4]
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d813      	bhi.n	800d5e0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	6839      	ldr	r1, [r7, #0]
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	4798      	blx	r3
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	88db      	ldrh	r3, [r3, #6]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d110      	bne.n	800d5f4 <USBD_StdItfReq+0x74>
 800d5d2:	7bfb      	ldrb	r3, [r7, #15]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10d      	bne.n	800d5f4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 fd79 	bl	800e0d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d5de:	e009      	b.n	800d5f4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fcab 	bl	800df3e <USBD_CtlError>
          break;
 800d5e8:	e004      	b.n	800d5f4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800d5ea:	6839      	ldr	r1, [r7, #0]
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fca6 	bl	800df3e <USBD_CtlError>
          break;
 800d5f2:	e000      	b.n	800d5f6 <USBD_StdItfReq+0x76>
          break;
 800d5f4:	bf00      	nop
      }
      break;
 800d5f6:	e004      	b.n	800d602 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800d5f8:	6839      	ldr	r1, [r7, #0]
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 fc9f 	bl	800df3e <USBD_CtlError>
      break;
 800d600:	bf00      	nop
  }

  return USBD_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	889b      	ldrh	r3, [r3, #4]
 800d61e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d628:	2b20      	cmp	r3, #32
 800d62a:	d004      	beq.n	800d636 <USBD_StdEPReq+0x2a>
 800d62c:	2b40      	cmp	r3, #64	; 0x40
 800d62e:	d002      	beq.n	800d636 <USBD_StdEPReq+0x2a>
 800d630:	2b00      	cmp	r3, #0
 800d632:	d008      	beq.n	800d646 <USBD_StdEPReq+0x3a>
 800d634:	e13d      	b.n	800d8b2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	6839      	ldr	r1, [r7, #0]
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	4798      	blx	r3
      break;
 800d644:	e13a      	b.n	800d8bc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d64e:	2b20      	cmp	r3, #32
 800d650:	d10a      	bne.n	800d668 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	6839      	ldr	r1, [r7, #0]
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	4798      	blx	r3
 800d660:	4603      	mov	r3, r0
 800d662:	73fb      	strb	r3, [r7, #15]

        return ret;
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	e12a      	b.n	800d8be <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	785b      	ldrb	r3, [r3, #1]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d03e      	beq.n	800d6ee <USBD_StdEPReq+0xe2>
 800d670:	2b03      	cmp	r3, #3
 800d672:	d002      	beq.n	800d67a <USBD_StdEPReq+0x6e>
 800d674:	2b00      	cmp	r3, #0
 800d676:	d070      	beq.n	800d75a <USBD_StdEPReq+0x14e>
 800d678:	e115      	b.n	800d8a6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d680:	2b02      	cmp	r3, #2
 800d682:	d002      	beq.n	800d68a <USBD_StdEPReq+0x7e>
 800d684:	2b03      	cmp	r3, #3
 800d686:	d015      	beq.n	800d6b4 <USBD_StdEPReq+0xa8>
 800d688:	e02b      	b.n	800d6e2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d68a:	7bbb      	ldrb	r3, [r7, #14]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d00c      	beq.n	800d6aa <USBD_StdEPReq+0x9e>
 800d690:	7bbb      	ldrb	r3, [r7, #14]
 800d692:	2b80      	cmp	r3, #128	; 0x80
 800d694:	d009      	beq.n	800d6aa <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d696:	7bbb      	ldrb	r3, [r7, #14]
 800d698:	4619      	mov	r1, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f003 fcb2 	bl	8011004 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d6a0:	2180      	movs	r1, #128	; 0x80
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f003 fcae 	bl	8011004 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d6a8:	e020      	b.n	800d6ec <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fc46 	bl	800df3e <USBD_CtlError>
              break;
 800d6b2:	e01b      	b.n	800d6ec <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	885b      	ldrh	r3, [r3, #2]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10e      	bne.n	800d6da <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800d6bc:	7bbb      	ldrb	r3, [r7, #14]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00b      	beq.n	800d6da <USBD_StdEPReq+0xce>
 800d6c2:	7bbb      	ldrb	r3, [r7, #14]
 800d6c4:	2b80      	cmp	r3, #128	; 0x80
 800d6c6:	d008      	beq.n	800d6da <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	88db      	ldrh	r3, [r3, #6]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d104      	bne.n	800d6da <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d6d0:	7bbb      	ldrb	r3, [r7, #14]
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f003 fc95 	bl	8011004 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fcf8 	bl	800e0d0 <USBD_CtlSendStatus>

              break;
 800d6e0:	e004      	b.n	800d6ec <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800d6e2:	6839      	ldr	r1, [r7, #0]
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 fc2a 	bl	800df3e <USBD_CtlError>
              break;
 800d6ea:	bf00      	nop
          }
          break;
 800d6ec:	e0e0      	b.n	800d8b0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d002      	beq.n	800d6fe <USBD_StdEPReq+0xf2>
 800d6f8:	2b03      	cmp	r3, #3
 800d6fa:	d015      	beq.n	800d728 <USBD_StdEPReq+0x11c>
 800d6fc:	e026      	b.n	800d74c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6fe:	7bbb      	ldrb	r3, [r7, #14]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00c      	beq.n	800d71e <USBD_StdEPReq+0x112>
 800d704:	7bbb      	ldrb	r3, [r7, #14]
 800d706:	2b80      	cmp	r3, #128	; 0x80
 800d708:	d009      	beq.n	800d71e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d70a:	7bbb      	ldrb	r3, [r7, #14]
 800d70c:	4619      	mov	r1, r3
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f003 fc78 	bl	8011004 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d714:	2180      	movs	r1, #128	; 0x80
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f003 fc74 	bl	8011004 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d71c:	e01c      	b.n	800d758 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800d71e:	6839      	ldr	r1, [r7, #0]
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 fc0c 	bl	800df3e <USBD_CtlError>
              break;
 800d726:	e017      	b.n	800d758 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	885b      	ldrh	r3, [r3, #2]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d112      	bne.n	800d756 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d730:	7bbb      	ldrb	r3, [r7, #14]
 800d732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d736:	2b00      	cmp	r3, #0
 800d738:	d004      	beq.n	800d744 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d73a:	7bbb      	ldrb	r3, [r7, #14]
 800d73c:	4619      	mov	r1, r3
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f003 fc96 	bl	8011070 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fcc3 	bl	800e0d0 <USBD_CtlSendStatus>
              }
              break;
 800d74a:	e004      	b.n	800d756 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800d74c:	6839      	ldr	r1, [r7, #0]
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 fbf5 	bl	800df3e <USBD_CtlError>
              break;
 800d754:	e000      	b.n	800d758 <USBD_StdEPReq+0x14c>
              break;
 800d756:	bf00      	nop
          }
          break;
 800d758:	e0aa      	b.n	800d8b0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d760:	2b02      	cmp	r3, #2
 800d762:	d002      	beq.n	800d76a <USBD_StdEPReq+0x15e>
 800d764:	2b03      	cmp	r3, #3
 800d766:	d032      	beq.n	800d7ce <USBD_StdEPReq+0x1c2>
 800d768:	e097      	b.n	800d89a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d76a:	7bbb      	ldrb	r3, [r7, #14]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d007      	beq.n	800d780 <USBD_StdEPReq+0x174>
 800d770:	7bbb      	ldrb	r3, [r7, #14]
 800d772:	2b80      	cmp	r3, #128	; 0x80
 800d774:	d004      	beq.n	800d780 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800d776:	6839      	ldr	r1, [r7, #0]
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f000 fbe0 	bl	800df3e <USBD_CtlError>
                break;
 800d77e:	e091      	b.n	800d8a4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d784:	2b00      	cmp	r3, #0
 800d786:	da0b      	bge.n	800d7a0 <USBD_StdEPReq+0x194>
 800d788:	7bbb      	ldrb	r3, [r7, #14]
 800d78a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d78e:	4613      	mov	r3, r2
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	4413      	add	r3, r2
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	3310      	adds	r3, #16
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	4413      	add	r3, r2
 800d79c:	3304      	adds	r3, #4
 800d79e:	e00b      	b.n	800d7b8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d7a0:	7bbb      	ldrb	r3, [r7, #14]
 800d7a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	4413      	add	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	2202      	movs	r2, #2
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 fc24 	bl	800e014 <USBD_CtlSendData>
              break;
 800d7cc:	e06a      	b.n	800d8a4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d7ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	da11      	bge.n	800d7fa <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d7d6:	7bbb      	ldrb	r3, [r7, #14]
 800d7d8:	f003 020f 	and.w	r2, r3, #15
 800d7dc:	6879      	ldr	r1, [r7, #4]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	4413      	add	r3, r2
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	440b      	add	r3, r1
 800d7e8:	3318      	adds	r3, #24
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d117      	bne.n	800d820 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800d7f0:	6839      	ldr	r1, [r7, #0]
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fba3 	bl	800df3e <USBD_CtlError>
                  break;
 800d7f8:	e054      	b.n	800d8a4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d7fa:	7bbb      	ldrb	r3, [r7, #14]
 800d7fc:	f003 020f 	and.w	r2, r3, #15
 800d800:	6879      	ldr	r1, [r7, #4]
 800d802:	4613      	mov	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4413      	add	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	440b      	add	r3, r1
 800d80c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d104      	bne.n	800d820 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800d816:	6839      	ldr	r1, [r7, #0]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fb90 	bl	800df3e <USBD_CtlError>
                  break;
 800d81e:	e041      	b.n	800d8a4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d824:	2b00      	cmp	r3, #0
 800d826:	da0b      	bge.n	800d840 <USBD_StdEPReq+0x234>
 800d828:	7bbb      	ldrb	r3, [r7, #14]
 800d82a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d82e:	4613      	mov	r3, r2
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	4413      	add	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	3310      	adds	r3, #16
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	4413      	add	r3, r2
 800d83c:	3304      	adds	r3, #4
 800d83e:	e00b      	b.n	800d858 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d840:	7bbb      	ldrb	r3, [r7, #14]
 800d842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d846:	4613      	mov	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	4413      	add	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	4413      	add	r3, r2
 800d856:	3304      	adds	r3, #4
 800d858:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d85a:	7bbb      	ldrb	r3, [r7, #14]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d002      	beq.n	800d866 <USBD_StdEPReq+0x25a>
 800d860:	7bbb      	ldrb	r3, [r7, #14]
 800d862:	2b80      	cmp	r3, #128	; 0x80
 800d864:	d103      	bne.n	800d86e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	2200      	movs	r2, #0
 800d86a:	601a      	str	r2, [r3, #0]
 800d86c:	e00e      	b.n	800d88c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d86e:	7bbb      	ldrb	r3, [r7, #14]
 800d870:	4619      	mov	r1, r3
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f003 fc32 	bl	80110dc <USBD_LL_IsStallEP>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d003      	beq.n	800d886 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	2201      	movs	r2, #1
 800d882:	601a      	str	r2, [r3, #0]
 800d884:	e002      	b.n	800d88c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	2200      	movs	r2, #0
 800d88a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	2202      	movs	r2, #2
 800d890:	4619      	mov	r1, r3
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fbbe 	bl	800e014 <USBD_CtlSendData>
              break;
 800d898:	e004      	b.n	800d8a4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 fb4e 	bl	800df3e <USBD_CtlError>
              break;
 800d8a2:	bf00      	nop
          }
          break;
 800d8a4:	e004      	b.n	800d8b0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800d8a6:	6839      	ldr	r1, [r7, #0]
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fb48 	bl	800df3e <USBD_CtlError>
          break;
 800d8ae:	bf00      	nop
      }
      break;
 800d8b0:	e004      	b.n	800d8bc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800d8b2:	6839      	ldr	r1, [r7, #0]
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 fb42 	bl	800df3e <USBD_CtlError>
      break;
 800d8ba:	bf00      	nop
  }

  return ret;
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
	...

0800d8c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	885b      	ldrh	r3, [r3, #2]
 800d8e2:	0a1b      	lsrs	r3, r3, #8
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	2b0e      	cmp	r3, #14
 800d8ea:	f200 8152 	bhi.w	800db92 <USBD_GetDescriptor+0x2ca>
 800d8ee:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <USBD_GetDescriptor+0x2c>)
 800d8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f4:	0800d965 	.word	0x0800d965
 800d8f8:	0800d97d 	.word	0x0800d97d
 800d8fc:	0800d9bd 	.word	0x0800d9bd
 800d900:	0800db93 	.word	0x0800db93
 800d904:	0800db93 	.word	0x0800db93
 800d908:	0800db33 	.word	0x0800db33
 800d90c:	0800db5f 	.word	0x0800db5f
 800d910:	0800db93 	.word	0x0800db93
 800d914:	0800db93 	.word	0x0800db93
 800d918:	0800db93 	.word	0x0800db93
 800d91c:	0800db93 	.word	0x0800db93
 800d920:	0800db93 	.word	0x0800db93
 800d924:	0800db93 	.word	0x0800db93
 800d928:	0800db93 	.word	0x0800db93
 800d92c:	0800d931 	.word	0x0800d931
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d936:	69db      	ldr	r3, [r3, #28]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00b      	beq.n	800d954 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d942:	69db      	ldr	r3, [r3, #28]
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	7c12      	ldrb	r2, [r2, #16]
 800d948:	f107 0108 	add.w	r1, r7, #8
 800d94c:	4610      	mov	r0, r2
 800d94e:	4798      	blx	r3
 800d950:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d952:	e126      	b.n	800dba2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 faf1 	bl	800df3e <USBD_CtlError>
        err++;
 800d95c:	7afb      	ldrb	r3, [r7, #11]
 800d95e:	3301      	adds	r3, #1
 800d960:	72fb      	strb	r3, [r7, #11]
      break;
 800d962:	e11e      	b.n	800dba2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	7c12      	ldrb	r2, [r2, #16]
 800d970:	f107 0108 	add.w	r1, r7, #8
 800d974:	4610      	mov	r0, r2
 800d976:	4798      	blx	r3
 800d978:	60f8      	str	r0, [r7, #12]
      break;
 800d97a:	e112      	b.n	800dba2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	7c1b      	ldrb	r3, [r3, #16]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10d      	bne.n	800d9a0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d98c:	f107 0208 	add.w	r2, r7, #8
 800d990:	4610      	mov	r0, r2
 800d992:	4798      	blx	r3
 800d994:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	3301      	adds	r3, #1
 800d99a:	2202      	movs	r2, #2
 800d99c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d99e:	e100      	b.n	800dba2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a8:	f107 0208 	add.w	r2, r7, #8
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	4798      	blx	r3
 800d9b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	2202      	movs	r2, #2
 800d9b8:	701a      	strb	r2, [r3, #0]
      break;
 800d9ba:	e0f2      	b.n	800dba2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	885b      	ldrh	r3, [r3, #2]
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	2b05      	cmp	r3, #5
 800d9c4:	f200 80ac 	bhi.w	800db20 <USBD_GetDescriptor+0x258>
 800d9c8:	a201      	add	r2, pc, #4	; (adr r2, 800d9d0 <USBD_GetDescriptor+0x108>)
 800d9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ce:	bf00      	nop
 800d9d0:	0800d9e9 	.word	0x0800d9e9
 800d9d4:	0800da1d 	.word	0x0800da1d
 800d9d8:	0800da51 	.word	0x0800da51
 800d9dc:	0800da85 	.word	0x0800da85
 800d9e0:	0800dab9 	.word	0x0800dab9
 800d9e4:	0800daed 	.word	0x0800daed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00b      	beq.n	800da0c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	7c12      	ldrb	r2, [r2, #16]
 800da00:	f107 0108 	add.w	r1, r7, #8
 800da04:	4610      	mov	r0, r2
 800da06:	4798      	blx	r3
 800da08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da0a:	e091      	b.n	800db30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 fa95 	bl	800df3e <USBD_CtlError>
            err++;
 800da14:	7afb      	ldrb	r3, [r7, #11]
 800da16:	3301      	adds	r3, #1
 800da18:	72fb      	strb	r3, [r7, #11]
          break;
 800da1a:	e089      	b.n	800db30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00b      	beq.n	800da40 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	7c12      	ldrb	r2, [r2, #16]
 800da34:	f107 0108 	add.w	r1, r7, #8
 800da38:	4610      	mov	r0, r2
 800da3a:	4798      	blx	r3
 800da3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da3e:	e077      	b.n	800db30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da40:	6839      	ldr	r1, [r7, #0]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 fa7b 	bl	800df3e <USBD_CtlError>
            err++;
 800da48:	7afb      	ldrb	r3, [r7, #11]
 800da4a:	3301      	adds	r3, #1
 800da4c:	72fb      	strb	r3, [r7, #11]
          break;
 800da4e:	e06f      	b.n	800db30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00b      	beq.n	800da74 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	7c12      	ldrb	r2, [r2, #16]
 800da68:	f107 0108 	add.w	r1, r7, #8
 800da6c:	4610      	mov	r0, r2
 800da6e:	4798      	blx	r3
 800da70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da72:	e05d      	b.n	800db30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da74:	6839      	ldr	r1, [r7, #0]
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fa61 	bl	800df3e <USBD_CtlError>
            err++;
 800da7c:	7afb      	ldrb	r3, [r7, #11]
 800da7e:	3301      	adds	r3, #1
 800da80:	72fb      	strb	r3, [r7, #11]
          break;
 800da82:	e055      	b.n	800db30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800da8a:	691b      	ldr	r3, [r3, #16]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00b      	beq.n	800daa8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	7c12      	ldrb	r2, [r2, #16]
 800da9c:	f107 0108 	add.w	r1, r7, #8
 800daa0:	4610      	mov	r0, r2
 800daa2:	4798      	blx	r3
 800daa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800daa6:	e043      	b.n	800db30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800daa8:	6839      	ldr	r1, [r7, #0]
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 fa47 	bl	800df3e <USBD_CtlError>
            err++;
 800dab0:	7afb      	ldrb	r3, [r7, #11]
 800dab2:	3301      	adds	r3, #1
 800dab4:	72fb      	strb	r3, [r7, #11]
          break;
 800dab6:	e03b      	b.n	800db30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dabe:	695b      	ldr	r3, [r3, #20]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00b      	beq.n	800dadc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800daca:	695b      	ldr	r3, [r3, #20]
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	7c12      	ldrb	r2, [r2, #16]
 800dad0:	f107 0108 	add.w	r1, r7, #8
 800dad4:	4610      	mov	r0, r2
 800dad6:	4798      	blx	r3
 800dad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dada:	e029      	b.n	800db30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 fa2d 	bl	800df3e <USBD_CtlError>
            err++;
 800dae4:	7afb      	ldrb	r3, [r7, #11]
 800dae6:	3301      	adds	r3, #1
 800dae8:	72fb      	strb	r3, [r7, #11]
          break;
 800daea:	e021      	b.n	800db30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800daf2:	699b      	ldr	r3, [r3, #24]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00b      	beq.n	800db10 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dafe:	699b      	ldr	r3, [r3, #24]
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	7c12      	ldrb	r2, [r2, #16]
 800db04:	f107 0108 	add.w	r1, r7, #8
 800db08:	4610      	mov	r0, r2
 800db0a:	4798      	blx	r3
 800db0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db0e:	e00f      	b.n	800db30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fa13 	bl	800df3e <USBD_CtlError>
            err++;
 800db18:	7afb      	ldrb	r3, [r7, #11]
 800db1a:	3301      	adds	r3, #1
 800db1c:	72fb      	strb	r3, [r7, #11]
          break;
 800db1e:	e007      	b.n	800db30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800db20:	6839      	ldr	r1, [r7, #0]
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 fa0b 	bl	800df3e <USBD_CtlError>
          err++;
 800db28:	7afb      	ldrb	r3, [r7, #11]
 800db2a:	3301      	adds	r3, #1
 800db2c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800db2e:	e038      	b.n	800dba2 <USBD_GetDescriptor+0x2da>
 800db30:	e037      	b.n	800dba2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	7c1b      	ldrb	r3, [r3, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d109      	bne.n	800db4e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db42:	f107 0208 	add.w	r2, r7, #8
 800db46:	4610      	mov	r0, r2
 800db48:	4798      	blx	r3
 800db4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800db4c:	e029      	b.n	800dba2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 f9f4 	bl	800df3e <USBD_CtlError>
        err++;
 800db56:	7afb      	ldrb	r3, [r7, #11]
 800db58:	3301      	adds	r3, #1
 800db5a:	72fb      	strb	r3, [r7, #11]
      break;
 800db5c:	e021      	b.n	800dba2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	7c1b      	ldrb	r3, [r3, #16]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10d      	bne.n	800db82 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db6e:	f107 0208 	add.w	r2, r7, #8
 800db72:	4610      	mov	r0, r2
 800db74:	4798      	blx	r3
 800db76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	3301      	adds	r3, #1
 800db7c:	2207      	movs	r2, #7
 800db7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800db80:	e00f      	b.n	800dba2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f9da 	bl	800df3e <USBD_CtlError>
        err++;
 800db8a:	7afb      	ldrb	r3, [r7, #11]
 800db8c:	3301      	adds	r3, #1
 800db8e:	72fb      	strb	r3, [r7, #11]
      break;
 800db90:	e007      	b.n	800dba2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f9d2 	bl	800df3e <USBD_CtlError>
      err++;
 800db9a:	7afb      	ldrb	r3, [r7, #11]
 800db9c:	3301      	adds	r3, #1
 800db9e:	72fb      	strb	r3, [r7, #11]
      break;
 800dba0:	bf00      	nop
  }

  if (err != 0U)
 800dba2:	7afb      	ldrb	r3, [r7, #11]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d11c      	bne.n	800dbe2 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800dba8:	893b      	ldrh	r3, [r7, #8]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d011      	beq.n	800dbd2 <USBD_GetDescriptor+0x30a>
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	88db      	ldrh	r3, [r3, #6]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00d      	beq.n	800dbd2 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	88da      	ldrh	r2, [r3, #6]
 800dbba:	893b      	ldrh	r3, [r7, #8]
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	bf28      	it	cs
 800dbc0:	4613      	movcs	r3, r2
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dbc6:	893b      	ldrh	r3, [r7, #8]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	68f9      	ldr	r1, [r7, #12]
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 fa21 	bl	800e014 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	88db      	ldrh	r3, [r3, #6]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d104      	bne.n	800dbe4 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 fa78 	bl	800e0d0 <USBD_CtlSendStatus>
 800dbe0:	e000      	b.n	800dbe4 <USBD_GetDescriptor+0x31c>
    return;
 800dbe2:	bf00      	nop
    }
  }
}
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop

0800dbec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	889b      	ldrh	r3, [r3, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d130      	bne.n	800dc60 <USBD_SetAddress+0x74>
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	88db      	ldrh	r3, [r3, #6]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d12c      	bne.n	800dc60 <USBD_SetAddress+0x74>
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	885b      	ldrh	r3, [r3, #2]
 800dc0a:	2b7f      	cmp	r3, #127	; 0x7f
 800dc0c:	d828      	bhi.n	800dc60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	885b      	ldrh	r3, [r3, #2]
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d104      	bne.n	800dc2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800dc24:	6839      	ldr	r1, [r7, #0]
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f989 	bl	800df3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc2c:	e01c      	b.n	800dc68 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	7bfa      	ldrb	r2, [r7, #15]
 800dc32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f003 fa74 	bl	8011128 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fa45 	bl	800e0d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dc46:	7bfb      	ldrb	r3, [r7, #15]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d004      	beq.n	800dc56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2202      	movs	r2, #2
 800dc50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc54:	e008      	b.n	800dc68 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc5e:	e003      	b.n	800dc68 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dc60:	6839      	ldr	r1, [r7, #0]
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 f96b 	bl	800df3e <USBD_CtlError>
  }
}
 800dc68:	bf00      	nop
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	885b      	ldrh	r3, [r3, #2]
 800dc7e:	b2da      	uxtb	r2, r3
 800dc80:	4b41      	ldr	r3, [pc, #260]	; (800dd88 <USBD_SetConfig+0x118>)
 800dc82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dc84:	4b40      	ldr	r3, [pc, #256]	; (800dd88 <USBD_SetConfig+0x118>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d904      	bls.n	800dc96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f955 	bl	800df3e <USBD_CtlError>
 800dc94:	e075      	b.n	800dd82 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc9c:	2b02      	cmp	r3, #2
 800dc9e:	d002      	beq.n	800dca6 <USBD_SetConfig+0x36>
 800dca0:	2b03      	cmp	r3, #3
 800dca2:	d023      	beq.n	800dcec <USBD_SetConfig+0x7c>
 800dca4:	e062      	b.n	800dd6c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800dca6:	4b38      	ldr	r3, [pc, #224]	; (800dd88 <USBD_SetConfig+0x118>)
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d01a      	beq.n	800dce4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800dcae:	4b36      	ldr	r3, [pc, #216]	; (800dd88 <USBD_SetConfig+0x118>)
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2203      	movs	r2, #3
 800dcbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800dcc0:	4b31      	ldr	r3, [pc, #196]	; (800dd88 <USBD_SetConfig+0x118>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7ff f9c7 	bl	800d05a <USBD_SetClassConfig>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d104      	bne.n	800dcdc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 f932 	bl	800df3e <USBD_CtlError>
            return;
 800dcda:	e052      	b.n	800dd82 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 f9f7 	bl	800e0d0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800dce2:	e04e      	b.n	800dd82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 f9f3 	bl	800e0d0 <USBD_CtlSendStatus>
        break;
 800dcea:	e04a      	b.n	800dd82 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800dcec:	4b26      	ldr	r3, [pc, #152]	; (800dd88 <USBD_SetConfig+0x118>)
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d112      	bne.n	800dd1a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2202      	movs	r2, #2
 800dcf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800dcfc:	4b22      	ldr	r3, [pc, #136]	; (800dd88 <USBD_SetConfig+0x118>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	461a      	mov	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800dd06:	4b20      	ldr	r3, [pc, #128]	; (800dd88 <USBD_SetConfig+0x118>)
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f7ff f9c3 	bl	800d098 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 f9dc 	bl	800e0d0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800dd18:	e033      	b.n	800dd82 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800dd1a:	4b1b      	ldr	r3, [pc, #108]	; (800dd88 <USBD_SetConfig+0x118>)
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	461a      	mov	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d01d      	beq.n	800dd64 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff f9b1 	bl	800d098 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800dd36:	4b14      	ldr	r3, [pc, #80]	; (800dd88 <USBD_SetConfig+0x118>)
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800dd40:	4b11      	ldr	r3, [pc, #68]	; (800dd88 <USBD_SetConfig+0x118>)
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	4619      	mov	r1, r3
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7ff f987 	bl	800d05a <USBD_SetClassConfig>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d104      	bne.n	800dd5c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800dd52:	6839      	ldr	r1, [r7, #0]
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 f8f2 	bl	800df3e <USBD_CtlError>
            return;
 800dd5a:	e012      	b.n	800dd82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 f9b7 	bl	800e0d0 <USBD_CtlSendStatus>
        break;
 800dd62:	e00e      	b.n	800dd82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 f9b3 	bl	800e0d0 <USBD_CtlSendStatus>
        break;
 800dd6a:	e00a      	b.n	800dd82 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f8e5 	bl	800df3e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800dd74:	4b04      	ldr	r3, [pc, #16]	; (800dd88 <USBD_SetConfig+0x118>)
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	4619      	mov	r1, r3
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff f98c 	bl	800d098 <USBD_ClrClassConfig>
        break;
 800dd80:	bf00      	nop
    }
  }
}
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	200003a5 	.word	0x200003a5

0800dd8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	88db      	ldrh	r3, [r3, #6]
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d004      	beq.n	800dda8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dd9e:	6839      	ldr	r1, [r7, #0]
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 f8cc 	bl	800df3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dda6:	e021      	b.n	800ddec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	db17      	blt.n	800dde2 <USBD_GetConfig+0x56>
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	dd02      	ble.n	800ddbc <USBD_GetConfig+0x30>
 800ddb6:	2b03      	cmp	r3, #3
 800ddb8:	d00b      	beq.n	800ddd2 <USBD_GetConfig+0x46>
 800ddba:	e012      	b.n	800dde2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	3308      	adds	r3, #8
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 f922 	bl	800e014 <USBD_CtlSendData>
        break;
 800ddd0:	e00c      	b.n	800ddec <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	4619      	mov	r1, r3
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 f91a 	bl	800e014 <USBD_CtlSendData>
        break;
 800dde0:	e004      	b.n	800ddec <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800dde2:	6839      	ldr	r1, [r7, #0]
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 f8aa 	bl	800df3e <USBD_CtlError>
        break;
 800ddea:	bf00      	nop
}
 800ddec:	bf00      	nop
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de04:	3b01      	subs	r3, #1
 800de06:	2b02      	cmp	r3, #2
 800de08:	d81e      	bhi.n	800de48 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	88db      	ldrh	r3, [r3, #6]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d004      	beq.n	800de1c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800de12:	6839      	ldr	r1, [r7, #0]
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 f892 	bl	800df3e <USBD_CtlError>
        break;
 800de1a:	e01a      	b.n	800de52 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d005      	beq.n	800de38 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	f043 0202 	orr.w	r2, r3, #2
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	330c      	adds	r3, #12
 800de3c:	2202      	movs	r2, #2
 800de3e:	4619      	mov	r1, r3
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 f8e7 	bl	800e014 <USBD_CtlSendData>
      break;
 800de46:	e004      	b.n	800de52 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f877 	bl	800df3e <USBD_CtlError>
      break;
 800de50:	bf00      	nop
  }
}
 800de52:	bf00      	nop
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}

0800de5a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b082      	sub	sp, #8
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
 800de62:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	885b      	ldrh	r3, [r3, #2]
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d106      	bne.n	800de7a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2201      	movs	r2, #1
 800de70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f92b 	bl	800e0d0 <USBD_CtlSendStatus>
  }
}
 800de7a:	bf00      	nop
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b082      	sub	sp, #8
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
 800de8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de92:	3b01      	subs	r3, #1
 800de94:	2b02      	cmp	r3, #2
 800de96:	d80b      	bhi.n	800deb0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	885b      	ldrh	r3, [r3, #2]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d10c      	bne.n	800deba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 f911 	bl	800e0d0 <USBD_CtlSendStatus>
      }
      break;
 800deae:	e004      	b.n	800deba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f843 	bl	800df3e <USBD_CtlError>
      break;
 800deb8:	e000      	b.n	800debc <USBD_ClrFeature+0x3a>
      break;
 800deba:	bf00      	nop
  }
}
 800debc:	bf00      	nop
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	781a      	ldrb	r2, [r3, #0]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	785a      	ldrb	r2, [r3, #1]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	3302      	adds	r3, #2
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	3303      	adds	r3, #3
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	b29b      	uxth	r3, r3
 800deee:	021b      	lsls	r3, r3, #8
 800def0:	b29b      	uxth	r3, r3
 800def2:	4413      	add	r3, r2
 800def4:	b29a      	uxth	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	3304      	adds	r3, #4
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	b29a      	uxth	r2, r3
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	3305      	adds	r3, #5
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	b29b      	uxth	r3, r3
 800df0a:	021b      	lsls	r3, r3, #8
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	4413      	add	r3, r2
 800df10:	b29a      	uxth	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	3306      	adds	r3, #6
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	3307      	adds	r3, #7
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	b29b      	uxth	r3, r3
 800df26:	021b      	lsls	r3, r3, #8
 800df28:	b29b      	uxth	r3, r3
 800df2a:	4413      	add	r3, r2
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	80da      	strh	r2, [r3, #6]

}
 800df32:	bf00      	nop
 800df34:	370c      	adds	r7, #12
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr

0800df3e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b082      	sub	sp, #8
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
 800df46:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800df48:	2180      	movs	r1, #128	; 0x80
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f003 f85a 	bl	8011004 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800df50:	2100      	movs	r1, #0
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f003 f856 	bl	8011004 <USBD_LL_StallEP>
}
 800df58:	bf00      	nop
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800df6c:	2300      	movs	r3, #0
 800df6e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d032      	beq.n	800dfdc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f000 f834 	bl	800dfe4 <USBD_GetLen>
 800df7c:	4603      	mov	r3, r0
 800df7e:	3301      	adds	r3, #1
 800df80:	b29b      	uxth	r3, r3
 800df82:	005b      	lsls	r3, r3, #1
 800df84:	b29a      	uxth	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800df8a:	7dfb      	ldrb	r3, [r7, #23]
 800df8c:	1c5a      	adds	r2, r3, #1
 800df8e:	75fa      	strb	r2, [r7, #23]
 800df90:	461a      	mov	r2, r3
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	4413      	add	r3, r2
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	7812      	ldrb	r2, [r2, #0]
 800df9a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800df9c:	7dfb      	ldrb	r3, [r7, #23]
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	75fa      	strb	r2, [r7, #23]
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	2203      	movs	r2, #3
 800dfaa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800dfac:	e012      	b.n	800dfd4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	60fa      	str	r2, [r7, #12]
 800dfb4:	7dfa      	ldrb	r2, [r7, #23]
 800dfb6:	1c51      	adds	r1, r2, #1
 800dfb8:	75f9      	strb	r1, [r7, #23]
 800dfba:	4611      	mov	r1, r2
 800dfbc:	68ba      	ldr	r2, [r7, #8]
 800dfbe:	440a      	add	r2, r1
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800dfc4:	7dfb      	ldrb	r3, [r7, #23]
 800dfc6:	1c5a      	adds	r2, r3, #1
 800dfc8:	75fa      	strb	r2, [r7, #23]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	4413      	add	r3, r2
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d1e8      	bne.n	800dfae <USBD_GetString+0x4e>
    }
  }
}
 800dfdc:	bf00      	nop
 800dfde:	3718      	adds	r7, #24
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dfec:	2300      	movs	r3, #0
 800dfee:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800dff0:	e005      	b.n	800dffe <USBD_GetLen+0x1a>
  {
    len++;
 800dff2:	7bfb      	ldrb	r3, [r7, #15]
 800dff4:	3301      	adds	r3, #1
 800dff6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	3301      	adds	r3, #1
 800dffc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d1f5      	bne.n	800dff2 <USBD_GetLen+0xe>
  }

  return len;
 800e006:	7bfb      	ldrb	r3, [r7, #15]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	4613      	mov	r3, r2
 800e020:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2202      	movs	r2, #2
 800e026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e02a:	88fa      	ldrh	r2, [r7, #6]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e030:	88fa      	ldrh	r2, [r7, #6]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e036:	88fb      	ldrh	r3, [r7, #6]
 800e038:	68ba      	ldr	r2, [r7, #8]
 800e03a:	2100      	movs	r1, #0
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f003 f8a9 	bl	8011194 <USBD_LL_Transmit>

  return USBD_OK;
 800e042:	2300      	movs	r3, #0
}
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	4613      	mov	r3, r2
 800e058:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e05a:	88fb      	ldrh	r3, [r7, #6]
 800e05c:	68ba      	ldr	r2, [r7, #8]
 800e05e:	2100      	movs	r1, #0
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f003 f897 	bl	8011194 <USBD_LL_Transmit>

  return USBD_OK;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3710      	adds	r7, #16
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	4613      	mov	r3, r2
 800e07c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2203      	movs	r2, #3
 800e082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e086:	88fa      	ldrh	r2, [r7, #6]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800e08e:	88fa      	ldrh	r2, [r7, #6]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e096:	88fb      	ldrh	r3, [r7, #6]
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	2100      	movs	r1, #0
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f003 f8b3 	bl	8011208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0a2:	2300      	movs	r3, #0
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e0ba:	88fb      	ldrh	r3, [r7, #6]
 800e0bc:	68ba      	ldr	r2, [r7, #8]
 800e0be:	2100      	movs	r1, #0
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f003 f8a1 	bl	8011208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0c6:	2300      	movs	r3, #0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3710      	adds	r7, #16
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2204      	movs	r2, #4
 800e0dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	2100      	movs	r1, #0
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f003 f854 	bl	8011194 <USBD_LL_Transmit>

  return USBD_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b082      	sub	sp, #8
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2205      	movs	r2, #5
 800e102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e106:	2300      	movs	r3, #0
 800e108:	2200      	movs	r2, #0
 800e10a:	2100      	movs	r1, #0
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f003 f87b 	bl	8011208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3708      	adds	r7, #8
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	4603      	mov	r3, r0
 800e124:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e126:	79fb      	ldrb	r3, [r7, #7]
 800e128:	4a08      	ldr	r2, [pc, #32]	; (800e14c <disk_status+0x30>)
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	4413      	add	r3, r2
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	79fa      	ldrb	r2, [r7, #7]
 800e134:	4905      	ldr	r1, [pc, #20]	; (800e14c <disk_status+0x30>)
 800e136:	440a      	add	r2, r1
 800e138:	7a12      	ldrb	r2, [r2, #8]
 800e13a:	4610      	mov	r0, r2
 800e13c:	4798      	blx	r3
 800e13e:	4603      	mov	r3, r0
 800e140:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e142:	7bfb      	ldrb	r3, [r7, #15]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3710      	adds	r7, #16
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	200003d0 	.word	0x200003d0

0800e150 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	4603      	mov	r3, r0
 800e158:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e15a:	2300      	movs	r3, #0
 800e15c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e15e:	79fb      	ldrb	r3, [r7, #7]
 800e160:	4a0d      	ldr	r2, [pc, #52]	; (800e198 <disk_initialize+0x48>)
 800e162:	5cd3      	ldrb	r3, [r2, r3]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d111      	bne.n	800e18c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e168:	79fb      	ldrb	r3, [r7, #7]
 800e16a:	4a0b      	ldr	r2, [pc, #44]	; (800e198 <disk_initialize+0x48>)
 800e16c:	2101      	movs	r1, #1
 800e16e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e170:	79fb      	ldrb	r3, [r7, #7]
 800e172:	4a09      	ldr	r2, [pc, #36]	; (800e198 <disk_initialize+0x48>)
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	4413      	add	r3, r2
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	79fa      	ldrb	r2, [r7, #7]
 800e17e:	4906      	ldr	r1, [pc, #24]	; (800e198 <disk_initialize+0x48>)
 800e180:	440a      	add	r2, r1
 800e182:	7a12      	ldrb	r2, [r2, #8]
 800e184:	4610      	mov	r0, r2
 800e186:	4798      	blx	r3
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	200003d0 	.word	0x200003d0

0800e19c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e19c:	b590      	push	{r4, r7, lr}
 800e19e:	b087      	sub	sp, #28
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60b9      	str	r1, [r7, #8]
 800e1a4:	607a      	str	r2, [r7, #4]
 800e1a6:	603b      	str	r3, [r7, #0]
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
 800e1ae:	4a0a      	ldr	r2, [pc, #40]	; (800e1d8 <disk_read+0x3c>)
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	689c      	ldr	r4, [r3, #8]
 800e1b8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ba:	4a07      	ldr	r2, [pc, #28]	; (800e1d8 <disk_read+0x3c>)
 800e1bc:	4413      	add	r3, r2
 800e1be:	7a18      	ldrb	r0, [r3, #8]
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	68b9      	ldr	r1, [r7, #8]
 800e1c6:	47a0      	blx	r4
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800e1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	371c      	adds	r7, #28
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd90      	pop	{r4, r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	200003d0 	.word	0x200003d0

0800e1dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e1dc:	b590      	push	{r4, r7, lr}
 800e1de:	b087      	sub	sp, #28
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60b9      	str	r1, [r7, #8]
 800e1e4:	607a      	str	r2, [r7, #4]
 800e1e6:	603b      	str	r3, [r7, #0]
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e1ec:	7bfb      	ldrb	r3, [r7, #15]
 800e1ee:	4a0a      	ldr	r2, [pc, #40]	; (800e218 <disk_write+0x3c>)
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	4413      	add	r3, r2
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	68dc      	ldr	r4, [r3, #12]
 800e1f8:	7bfb      	ldrb	r3, [r7, #15]
 800e1fa:	4a07      	ldr	r2, [pc, #28]	; (800e218 <disk_write+0x3c>)
 800e1fc:	4413      	add	r3, r2
 800e1fe:	7a18      	ldrb	r0, [r3, #8]
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	68b9      	ldr	r1, [r7, #8]
 800e206:	47a0      	blx	r4
 800e208:	4603      	mov	r3, r0
 800e20a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	371c      	adds	r7, #28
 800e212:	46bd      	mov	sp, r7
 800e214:	bd90      	pop	{r4, r7, pc}
 800e216:	bf00      	nop
 800e218:	200003d0 	.word	0x200003d0

0800e21c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	603a      	str	r2, [r7, #0]
 800e226:	71fb      	strb	r3, [r7, #7]
 800e228:	460b      	mov	r3, r1
 800e22a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e22c:	79fb      	ldrb	r3, [r7, #7]
 800e22e:	4a09      	ldr	r2, [pc, #36]	; (800e254 <disk_ioctl+0x38>)
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	4413      	add	r3, r2
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	79fa      	ldrb	r2, [r7, #7]
 800e23a:	4906      	ldr	r1, [pc, #24]	; (800e254 <disk_ioctl+0x38>)
 800e23c:	440a      	add	r2, r1
 800e23e:	7a10      	ldrb	r0, [r2, #8]
 800e240:	79b9      	ldrb	r1, [r7, #6]
 800e242:	683a      	ldr	r2, [r7, #0]
 800e244:	4798      	blx	r3
 800e246:	4603      	mov	r3, r0
 800e248:	73fb      	strb	r3, [r7, #15]
  return res;
 800e24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	200003d0 	.word	0x200003d0

0800e258 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3301      	adds	r3, #1
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e268:	89fb      	ldrh	r3, [r7, #14]
 800e26a:	021b      	lsls	r3, r3, #8
 800e26c:	b21a      	sxth	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	b21b      	sxth	r3, r3
 800e274:	4313      	orrs	r3, r2
 800e276:	b21b      	sxth	r3, r3
 800e278:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e27a:	89fb      	ldrh	r3, [r7, #14]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3714      	adds	r7, #20
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	3303      	adds	r3, #3
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	021b      	lsls	r3, r3, #8
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	3202      	adds	r2, #2
 800e2a0:	7812      	ldrb	r2, [r2, #0]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	021b      	lsls	r3, r3, #8
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	3201      	adds	r2, #1
 800e2ae:	7812      	ldrb	r2, [r2, #0]
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	021b      	lsls	r3, r3, #8
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	7812      	ldrb	r2, [r2, #0]
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	60fb      	str	r3, [r7, #12]
	return rv;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3714      	adds	r7, #20
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e2ce:	b480      	push	{r7}
 800e2d0:	b083      	sub	sp, #12
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	1c5a      	adds	r2, r3, #1
 800e2de:	607a      	str	r2, [r7, #4]
 800e2e0:	887a      	ldrh	r2, [r7, #2]
 800e2e2:	b2d2      	uxtb	r2, r2
 800e2e4:	701a      	strb	r2, [r3, #0]
 800e2e6:	887b      	ldrh	r3, [r7, #2]
 800e2e8:	0a1b      	lsrs	r3, r3, #8
 800e2ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	1c5a      	adds	r2, r3, #1
 800e2f0:	607a      	str	r2, [r7, #4]
 800e2f2:	887a      	ldrh	r2, [r7, #2]
 800e2f4:	b2d2      	uxtb	r2, r2
 800e2f6:	701a      	strb	r2, [r3, #0]
}
 800e2f8:	bf00      	nop
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	1c5a      	adds	r2, r3, #1
 800e312:	607a      	str	r2, [r7, #4]
 800e314:	683a      	ldr	r2, [r7, #0]
 800e316:	b2d2      	uxtb	r2, r2
 800e318:	701a      	strb	r2, [r3, #0]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	0a1b      	lsrs	r3, r3, #8
 800e31e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	1c5a      	adds	r2, r3, #1
 800e324:	607a      	str	r2, [r7, #4]
 800e326:	683a      	ldr	r2, [r7, #0]
 800e328:	b2d2      	uxtb	r2, r2
 800e32a:	701a      	strb	r2, [r3, #0]
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	0a1b      	lsrs	r3, r3, #8
 800e330:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	1c5a      	adds	r2, r3, #1
 800e336:	607a      	str	r2, [r7, #4]
 800e338:	683a      	ldr	r2, [r7, #0]
 800e33a:	b2d2      	uxtb	r2, r2
 800e33c:	701a      	strb	r2, [r3, #0]
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	0a1b      	lsrs	r3, r3, #8
 800e342:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	1c5a      	adds	r2, r3, #1
 800e348:	607a      	str	r2, [r7, #4]
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	b2d2      	uxtb	r2, r2
 800e34e:	701a      	strb	r2, [r3, #0]
}
 800e350:	bf00      	nop
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e35c:	b480      	push	{r7}
 800e35e:	b087      	sub	sp, #28
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d00d      	beq.n	800e392 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e376:	693a      	ldr	r2, [r7, #16]
 800e378:	1c53      	adds	r3, r2, #1
 800e37a:	613b      	str	r3, [r7, #16]
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	1c59      	adds	r1, r3, #1
 800e380:	6179      	str	r1, [r7, #20]
 800e382:	7812      	ldrb	r2, [r2, #0]
 800e384:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3b01      	subs	r3, #1
 800e38a:	607b      	str	r3, [r7, #4]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1f1      	bne.n	800e376 <mem_cpy+0x1a>
	}
}
 800e392:	bf00      	nop
 800e394:	371c      	adds	r7, #28
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr

0800e39e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e39e:	b480      	push	{r7}
 800e3a0:	b087      	sub	sp, #28
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	60f8      	str	r0, [r7, #12]
 800e3a6:	60b9      	str	r1, [r7, #8]
 800e3a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	1c5a      	adds	r2, r3, #1
 800e3b2:	617a      	str	r2, [r7, #20]
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	b2d2      	uxtb	r2, r2
 800e3b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	607b      	str	r3, [r7, #4]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1f3      	bne.n	800e3ae <mem_set+0x10>
}
 800e3c6:	bf00      	nop
 800e3c8:	371c      	adds	r7, #28
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr

0800e3d2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e3d2:	b480      	push	{r7}
 800e3d4:	b089      	sub	sp, #36	; 0x24
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	60f8      	str	r0, [r7, #12]
 800e3da:	60b9      	str	r1, [r7, #8]
 800e3dc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	61fb      	str	r3, [r7, #28]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	61fa      	str	r2, [r7, #28]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	69bb      	ldr	r3, [r7, #24]
 800e3f6:	1c5a      	adds	r2, r3, #1
 800e3f8:	61ba      	str	r2, [r7, #24]
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	1acb      	subs	r3, r1, r3
 800e3fe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	3b01      	subs	r3, #1
 800e404:	607b      	str	r3, [r7, #4]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d002      	beq.n	800e412 <mem_cmp+0x40>
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0eb      	beq.n	800e3ea <mem_cmp+0x18>

	return r;
 800e412:	697b      	ldr	r3, [r7, #20]
}
 800e414:	4618      	mov	r0, r3
 800e416:	3724      	adds	r7, #36	; 0x24
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e42a:	e002      	b.n	800e432 <chk_chr+0x12>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3301      	adds	r3, #1
 800e430:	607b      	str	r3, [r7, #4]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d005      	beq.n	800e446 <chk_chr+0x26>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	461a      	mov	r2, r3
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	4293      	cmp	r3, r2
 800e444:	d1f2      	bne.n	800e42c <chk_chr+0xc>
	return *str;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	781b      	ldrb	r3, [r3, #0]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	370c      	adds	r7, #12
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr
	...

0800e458 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e458:	b480      	push	{r7}
 800e45a:	b085      	sub	sp, #20
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e462:	2300      	movs	r3, #0
 800e464:	60bb      	str	r3, [r7, #8]
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	60fb      	str	r3, [r7, #12]
 800e46a:	e029      	b.n	800e4c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e46c:	4a27      	ldr	r2, [pc, #156]	; (800e50c <chk_lock+0xb4>)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	011b      	lsls	r3, r3, #4
 800e472:	4413      	add	r3, r2
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d01d      	beq.n	800e4b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e47a:	4a24      	ldr	r2, [pc, #144]	; (800e50c <chk_lock+0xb4>)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	011b      	lsls	r3, r3, #4
 800e480:	4413      	add	r3, r2
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d116      	bne.n	800e4ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e48c:	4a1f      	ldr	r2, [pc, #124]	; (800e50c <chk_lock+0xb4>)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	011b      	lsls	r3, r3, #4
 800e492:	4413      	add	r3, r2
 800e494:	3304      	adds	r3, #4
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d10c      	bne.n	800e4ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e4a0:	4a1a      	ldr	r2, [pc, #104]	; (800e50c <chk_lock+0xb4>)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	011b      	lsls	r3, r3, #4
 800e4a6:	4413      	add	r3, r2
 800e4a8:	3308      	adds	r3, #8
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d102      	bne.n	800e4ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e4b4:	e007      	b.n	800e4c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	60fb      	str	r3, [r7, #12]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d9d2      	bls.n	800e46c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d109      	bne.n	800e4e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d102      	bne.n	800e4d8 <chk_lock+0x80>
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d101      	bne.n	800e4dc <chk_lock+0x84>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	e010      	b.n	800e4fe <chk_lock+0xa6>
 800e4dc:	2312      	movs	r3, #18
 800e4de:	e00e      	b.n	800e4fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d108      	bne.n	800e4f8 <chk_lock+0xa0>
 800e4e6:	4a09      	ldr	r2, [pc, #36]	; (800e50c <chk_lock+0xb4>)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	011b      	lsls	r3, r3, #4
 800e4ec:	4413      	add	r3, r2
 800e4ee:	330c      	adds	r3, #12
 800e4f0:	881b      	ldrh	r3, [r3, #0]
 800e4f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4f6:	d101      	bne.n	800e4fc <chk_lock+0xa4>
 800e4f8:	2310      	movs	r3, #16
 800e4fa:	e000      	b.n	800e4fe <chk_lock+0xa6>
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	200003b0 	.word	0x200003b0

0800e510 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e516:	2300      	movs	r3, #0
 800e518:	607b      	str	r3, [r7, #4]
 800e51a:	e002      	b.n	800e522 <enq_lock+0x12>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3301      	adds	r3, #1
 800e520:	607b      	str	r3, [r7, #4]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d806      	bhi.n	800e536 <enq_lock+0x26>
 800e528:	4a09      	ldr	r2, [pc, #36]	; (800e550 <enq_lock+0x40>)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	011b      	lsls	r3, r3, #4
 800e52e:	4413      	add	r3, r2
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1f2      	bne.n	800e51c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2b02      	cmp	r3, #2
 800e53a:	bf14      	ite	ne
 800e53c:	2301      	movne	r3, #1
 800e53e:	2300      	moveq	r3, #0
 800e540:	b2db      	uxtb	r3, r3
}
 800e542:	4618      	mov	r0, r3
 800e544:	370c      	adds	r7, #12
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop
 800e550:	200003b0 	.word	0x200003b0

0800e554 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e55e:	2300      	movs	r3, #0
 800e560:	60fb      	str	r3, [r7, #12]
 800e562:	e01f      	b.n	800e5a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e564:	4a41      	ldr	r2, [pc, #260]	; (800e66c <inc_lock+0x118>)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	011b      	lsls	r3, r3, #4
 800e56a:	4413      	add	r3, r2
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	429a      	cmp	r2, r3
 800e574:	d113      	bne.n	800e59e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e576:	4a3d      	ldr	r2, [pc, #244]	; (800e66c <inc_lock+0x118>)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	011b      	lsls	r3, r3, #4
 800e57c:	4413      	add	r3, r2
 800e57e:	3304      	adds	r3, #4
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e586:	429a      	cmp	r2, r3
 800e588:	d109      	bne.n	800e59e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e58a:	4a38      	ldr	r2, [pc, #224]	; (800e66c <inc_lock+0x118>)
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	011b      	lsls	r3, r3, #4
 800e590:	4413      	add	r3, r2
 800e592:	3308      	adds	r3, #8
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d006      	beq.n	800e5ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	60fb      	str	r3, [r7, #12]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d9dc      	bls.n	800e564 <inc_lock+0x10>
 800e5aa:	e000      	b.n	800e5ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e5ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	d132      	bne.n	800e61a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	60fb      	str	r3, [r7, #12]
 800e5b8:	e002      	b.n	800e5c0 <inc_lock+0x6c>
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	60fb      	str	r3, [r7, #12]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d806      	bhi.n	800e5d4 <inc_lock+0x80>
 800e5c6:	4a29      	ldr	r2, [pc, #164]	; (800e66c <inc_lock+0x118>)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	011b      	lsls	r3, r3, #4
 800e5cc:	4413      	add	r3, r2
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1f2      	bne.n	800e5ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	d101      	bne.n	800e5de <inc_lock+0x8a>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	e040      	b.n	800e660 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	4922      	ldr	r1, [pc, #136]	; (800e66c <inc_lock+0x118>)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	011b      	lsls	r3, r3, #4
 800e5e8:	440b      	add	r3, r1
 800e5ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	689a      	ldr	r2, [r3, #8]
 800e5f0:	491e      	ldr	r1, [pc, #120]	; (800e66c <inc_lock+0x118>)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	011b      	lsls	r3, r3, #4
 800e5f6:	440b      	add	r3, r1
 800e5f8:	3304      	adds	r3, #4
 800e5fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	695a      	ldr	r2, [r3, #20]
 800e600:	491a      	ldr	r1, [pc, #104]	; (800e66c <inc_lock+0x118>)
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	011b      	lsls	r3, r3, #4
 800e606:	440b      	add	r3, r1
 800e608:	3308      	adds	r3, #8
 800e60a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e60c:	4a17      	ldr	r2, [pc, #92]	; (800e66c <inc_lock+0x118>)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	011b      	lsls	r3, r3, #4
 800e612:	4413      	add	r3, r2
 800e614:	330c      	adds	r3, #12
 800e616:	2200      	movs	r2, #0
 800e618:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d009      	beq.n	800e634 <inc_lock+0xe0>
 800e620:	4a12      	ldr	r2, [pc, #72]	; (800e66c <inc_lock+0x118>)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	011b      	lsls	r3, r3, #4
 800e626:	4413      	add	r3, r2
 800e628:	330c      	adds	r3, #12
 800e62a:	881b      	ldrh	r3, [r3, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d001      	beq.n	800e634 <inc_lock+0xe0>
 800e630:	2300      	movs	r3, #0
 800e632:	e015      	b.n	800e660 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d108      	bne.n	800e64c <inc_lock+0xf8>
 800e63a:	4a0c      	ldr	r2, [pc, #48]	; (800e66c <inc_lock+0x118>)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	011b      	lsls	r3, r3, #4
 800e640:	4413      	add	r3, r2
 800e642:	330c      	adds	r3, #12
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	3301      	adds	r3, #1
 800e648:	b29a      	uxth	r2, r3
 800e64a:	e001      	b.n	800e650 <inc_lock+0xfc>
 800e64c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e650:	4906      	ldr	r1, [pc, #24]	; (800e66c <inc_lock+0x118>)
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	011b      	lsls	r3, r3, #4
 800e656:	440b      	add	r3, r1
 800e658:	330c      	adds	r3, #12
 800e65a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	3301      	adds	r3, #1
}
 800e660:	4618      	mov	r0, r3
 800e662:	3714      	adds	r7, #20
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr
 800e66c:	200003b0 	.word	0x200003b0

0800e670 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	3b01      	subs	r3, #1
 800e67c:	607b      	str	r3, [r7, #4]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2b01      	cmp	r3, #1
 800e682:	d825      	bhi.n	800e6d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800e684:	4a17      	ldr	r2, [pc, #92]	; (800e6e4 <dec_lock+0x74>)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	011b      	lsls	r3, r3, #4
 800e68a:	4413      	add	r3, r2
 800e68c:	330c      	adds	r3, #12
 800e68e:	881b      	ldrh	r3, [r3, #0]
 800e690:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e692:	89fb      	ldrh	r3, [r7, #14]
 800e694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e698:	d101      	bne.n	800e69e <dec_lock+0x2e>
 800e69a:	2300      	movs	r3, #0
 800e69c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e69e:	89fb      	ldrh	r3, [r7, #14]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d002      	beq.n	800e6aa <dec_lock+0x3a>
 800e6a4:	89fb      	ldrh	r3, [r7, #14]
 800e6a6:	3b01      	subs	r3, #1
 800e6a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e6aa:	4a0e      	ldr	r2, [pc, #56]	; (800e6e4 <dec_lock+0x74>)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	011b      	lsls	r3, r3, #4
 800e6b0:	4413      	add	r3, r2
 800e6b2:	330c      	adds	r3, #12
 800e6b4:	89fa      	ldrh	r2, [r7, #14]
 800e6b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e6b8:	89fb      	ldrh	r3, [r7, #14]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d105      	bne.n	800e6ca <dec_lock+0x5a>
 800e6be:	4a09      	ldr	r2, [pc, #36]	; (800e6e4 <dec_lock+0x74>)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	011b      	lsls	r3, r3, #4
 800e6c4:	4413      	add	r3, r2
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	737b      	strb	r3, [r7, #13]
 800e6ce:	e001      	b.n	800e6d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e6d0:	2302      	movs	r3, #2
 800e6d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e6d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop
 800e6e4:	200003b0 	.word	0x200003b0

0800e6e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	e010      	b.n	800e718 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e6f6:	4a0d      	ldr	r2, [pc, #52]	; (800e72c <clear_lock+0x44>)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	011b      	lsls	r3, r3, #4
 800e6fc:	4413      	add	r3, r2
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	429a      	cmp	r2, r3
 800e704:	d105      	bne.n	800e712 <clear_lock+0x2a>
 800e706:	4a09      	ldr	r2, [pc, #36]	; (800e72c <clear_lock+0x44>)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	011b      	lsls	r3, r3, #4
 800e70c:	4413      	add	r3, r2
 800e70e:	2200      	movs	r2, #0
 800e710:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	3301      	adds	r3, #1
 800e716:	60fb      	str	r3, [r7, #12]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d9eb      	bls.n	800e6f6 <clear_lock+0xe>
	}
}
 800e71e:	bf00      	nop
 800e720:	3714      	adds	r7, #20
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop
 800e72c:	200003b0 	.word	0x200003b0

0800e730 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e738:	2300      	movs	r3, #0
 800e73a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	78db      	ldrb	r3, [r3, #3]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d034      	beq.n	800e7ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e748:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	7858      	ldrb	r0, [r3, #1]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e754:	2301      	movs	r3, #1
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	f7ff fd40 	bl	800e1dc <disk_write>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d002      	beq.n	800e768 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e762:	2301      	movs	r3, #1
 800e764:	73fb      	strb	r3, [r7, #15]
 800e766:	e022      	b.n	800e7ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2200      	movs	r2, #0
 800e76c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6a1b      	ldr	r3, [r3, #32]
 800e772:	697a      	ldr	r2, [r7, #20]
 800e774:	1ad2      	subs	r2, r2, r3
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	699b      	ldr	r3, [r3, #24]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d217      	bcs.n	800e7ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	789b      	ldrb	r3, [r3, #2]
 800e782:	613b      	str	r3, [r7, #16]
 800e784:	e010      	b.n	800e7a8 <sync_window+0x78>
					wsect += fs->fsize;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	697a      	ldr	r2, [r7, #20]
 800e78c:	4413      	add	r3, r2
 800e78e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	7858      	ldrb	r0, [r3, #1]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e79a:	2301      	movs	r3, #1
 800e79c:	697a      	ldr	r2, [r7, #20]
 800e79e:	f7ff fd1d 	bl	800e1dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	613b      	str	r3, [r7, #16]
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d8eb      	bhi.n	800e786 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3718      	adds	r7, #24
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ca:	683a      	ldr	r2, [r7, #0]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d01b      	beq.n	800e808 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7ff ffad 	bl	800e730 <sync_window>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e7da:	7bfb      	ldrb	r3, [r7, #15]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d113      	bne.n	800e808 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	7858      	ldrb	r0, [r3, #1]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	f7ff fcd5 	bl	800e19c <disk_read>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d004      	beq.n	800e802 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e7f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	683a      	ldr	r2, [r7, #0]
 800e806:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800e808:	7bfb      	ldrb	r3, [r7, #15]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3710      	adds	r7, #16
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7ff ff87 	bl	800e730 <sync_window>
 800e822:	4603      	mov	r3, r0
 800e824:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e826:	7bfb      	ldrb	r3, [r7, #15]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d158      	bne.n	800e8de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	2b03      	cmp	r3, #3
 800e832:	d148      	bne.n	800e8c6 <sync_fs+0xb2>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	791b      	ldrb	r3, [r3, #4]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d144      	bne.n	800e8c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	3330      	adds	r3, #48	; 0x30
 800e840:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e844:	2100      	movs	r1, #0
 800e846:	4618      	mov	r0, r3
 800e848:	f7ff fda9 	bl	800e39e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	3330      	adds	r3, #48	; 0x30
 800e850:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e854:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e858:	4618      	mov	r0, r3
 800e85a:	f7ff fd38 	bl	800e2ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3330      	adds	r3, #48	; 0x30
 800e862:	4921      	ldr	r1, [pc, #132]	; (800e8e8 <sync_fs+0xd4>)
 800e864:	4618      	mov	r0, r3
 800e866:	f7ff fd4d 	bl	800e304 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	3330      	adds	r3, #48	; 0x30
 800e86e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e872:	491e      	ldr	r1, [pc, #120]	; (800e8ec <sync_fs+0xd8>)
 800e874:	4618      	mov	r0, r3
 800e876:	f7ff fd45 	bl	800e304 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	3330      	adds	r3, #48	; 0x30
 800e87e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	4619      	mov	r1, r3
 800e888:	4610      	mov	r0, r2
 800e88a:	f7ff fd3b 	bl	800e304 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	3330      	adds	r3, #48	; 0x30
 800e892:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	4619      	mov	r1, r3
 800e89c:	4610      	mov	r0, r2
 800e89e:	f7ff fd31 	bl	800e304 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	69db      	ldr	r3, [r3, #28]
 800e8a6:	1c5a      	adds	r2, r3, #1
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	7858      	ldrb	r0, [r3, #1]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	f7ff fc8e 	bl	800e1dc <disk_write>
			fs->fsi_flag = 0;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	785b      	ldrb	r3, [r3, #1]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7ff fca4 	bl	800e21c <disk_ioctl>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d001      	beq.n	800e8de <sync_fs+0xca>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	41615252 	.word	0x41615252
 800e8ec:	61417272 	.word	0x61417272

0800e8f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	3b02      	subs	r3, #2
 800e8fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	695b      	ldr	r3, [r3, #20]
 800e904:	3b02      	subs	r3, #2
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d301      	bcc.n	800e910 <clust2sect+0x20>
 800e90c:	2300      	movs	r3, #0
 800e90e:	e008      	b.n	800e922 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	895b      	ldrh	r3, [r3, #10]
 800e914:	461a      	mov	r2, r3
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	fb03 f202 	mul.w	r2, r3, r2
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e920:	4413      	add	r3, r2
}
 800e922:	4618      	mov	r0, r3
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b086      	sub	sp, #24
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
 800e936:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d904      	bls.n	800e94e <get_fat+0x20>
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	695b      	ldr	r3, [r3, #20]
 800e948:	683a      	ldr	r2, [r7, #0]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d302      	bcc.n	800e954 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e94e:	2301      	movs	r3, #1
 800e950:	617b      	str	r3, [r7, #20]
 800e952:	e08c      	b.n	800ea6e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e958:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	2b02      	cmp	r3, #2
 800e960:	d045      	beq.n	800e9ee <get_fat+0xc0>
 800e962:	2b03      	cmp	r3, #3
 800e964:	d05d      	beq.n	800ea22 <get_fat+0xf4>
 800e966:	2b01      	cmp	r3, #1
 800e968:	d177      	bne.n	800ea5a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	60fb      	str	r3, [r7, #12]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	085b      	lsrs	r3, r3, #1
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	4413      	add	r3, r2
 800e976:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	6a1a      	ldr	r2, [r3, #32]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	0a5b      	lsrs	r3, r3, #9
 800e980:	4413      	add	r3, r2
 800e982:	4619      	mov	r1, r3
 800e984:	6938      	ldr	r0, [r7, #16]
 800e986:	f7ff ff17 	bl	800e7b8 <move_window>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d167      	bne.n	800ea60 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	60fa      	str	r2, [r7, #12]
 800e996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e99a:	693a      	ldr	r2, [r7, #16]
 800e99c:	4413      	add	r3, r2
 800e99e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e9a2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	6a1a      	ldr	r2, [r3, #32]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	0a5b      	lsrs	r3, r3, #9
 800e9ac:	4413      	add	r3, r2
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	6938      	ldr	r0, [r7, #16]
 800e9b2:	f7ff ff01 	bl	800e7b8 <move_window>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d153      	bne.n	800ea64 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9c2:	693a      	ldr	r2, [r7, #16]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e9ca:	021b      	lsls	r3, r3, #8
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	f003 0301 	and.w	r3, r3, #1
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d002      	beq.n	800e9e4 <get_fat+0xb6>
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	091b      	lsrs	r3, r3, #4
 800e9e2:	e002      	b.n	800e9ea <get_fat+0xbc>
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e9ea:	617b      	str	r3, [r7, #20]
			break;
 800e9ec:	e03f      	b.n	800ea6e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	6a1a      	ldr	r2, [r3, #32]
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	0a1b      	lsrs	r3, r3, #8
 800e9f6:	4413      	add	r3, r2
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	6938      	ldr	r0, [r7, #16]
 800e9fc:	f7ff fedc 	bl	800e7b8 <move_window>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d130      	bne.n	800ea68 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ea14:	4413      	add	r3, r2
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7ff fc1e 	bl	800e258 <ld_word>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	617b      	str	r3, [r7, #20]
			break;
 800ea20:	e025      	b.n	800ea6e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	6a1a      	ldr	r2, [r3, #32]
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	09db      	lsrs	r3, r3, #7
 800ea2a:	4413      	add	r3, r2
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6938      	ldr	r0, [r7, #16]
 800ea30:	f7ff fec2 	bl	800e7b8 <move_window>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d118      	bne.n	800ea6c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ea48:	4413      	add	r3, r2
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff fc1c 	bl	800e288 <ld_dword>
 800ea50:	4603      	mov	r3, r0
 800ea52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ea56:	617b      	str	r3, [r7, #20]
			break;
 800ea58:	e009      	b.n	800ea6e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	617b      	str	r3, [r7, #20]
 800ea5e:	e006      	b.n	800ea6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea60:	bf00      	nop
 800ea62:	e004      	b.n	800ea6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea64:	bf00      	nop
 800ea66:	e002      	b.n	800ea6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ea68:	bf00      	nop
 800ea6a:	e000      	b.n	800ea6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ea6c:	bf00      	nop
		}
	}

	return val;
 800ea6e:	697b      	ldr	r3, [r7, #20]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3718      	adds	r7, #24
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ea78:	b590      	push	{r4, r7, lr}
 800ea7a:	b089      	sub	sp, #36	; 0x24
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ea84:	2302      	movs	r3, #2
 800ea86:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	f240 80d6 	bls.w	800ec3c <put_fat+0x1c4>
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	695b      	ldr	r3, [r3, #20]
 800ea94:	68ba      	ldr	r2, [r7, #8]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	f080 80d0 	bcs.w	800ec3c <put_fat+0x1c4>
		switch (fs->fs_type) {
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	2b02      	cmp	r3, #2
 800eaa2:	d073      	beq.n	800eb8c <put_fat+0x114>
 800eaa4:	2b03      	cmp	r3, #3
 800eaa6:	f000 8091 	beq.w	800ebcc <put_fat+0x154>
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	f040 80c6 	bne.w	800ec3c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	61bb      	str	r3, [r7, #24]
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	085b      	lsrs	r3, r3, #1
 800eab8:	69ba      	ldr	r2, [r7, #24]
 800eaba:	4413      	add	r3, r2
 800eabc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	6a1a      	ldr	r2, [r3, #32]
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	0a5b      	lsrs	r3, r3, #9
 800eac6:	4413      	add	r3, r2
 800eac8:	4619      	mov	r1, r3
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f7ff fe74 	bl	800e7b8 <move_window>
 800ead0:	4603      	mov	r3, r0
 800ead2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ead4:	7ffb      	ldrb	r3, [r7, #31]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	f040 80a9 	bne.w	800ec2e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	1c59      	adds	r1, r3, #1
 800eae6:	61b9      	str	r1, [r7, #24]
 800eae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaec:	4413      	add	r3, r2
 800eaee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	f003 0301 	and.w	r3, r3, #1
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d00d      	beq.n	800eb16 <put_fat+0x9e>
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	b25b      	sxtb	r3, r3
 800eb00:	f003 030f 	and.w	r3, r3, #15
 800eb04:	b25a      	sxtb	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	011b      	lsls	r3, r3, #4
 800eb0c:	b25b      	sxtb	r3, r3
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	b25b      	sxtb	r3, r3
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	e001      	b.n	800eb1a <put_fat+0xa2>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	697a      	ldr	r2, [r7, #20]
 800eb1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2201      	movs	r2, #1
 800eb22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6a1a      	ldr	r2, [r3, #32]
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	0a5b      	lsrs	r3, r3, #9
 800eb2c:	4413      	add	r3, r2
 800eb2e:	4619      	mov	r1, r3
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f7ff fe41 	bl	800e7b8 <move_window>
 800eb36:	4603      	mov	r3, r0
 800eb38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb3a:	7ffb      	ldrb	r3, [r7, #31]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d178      	bne.n	800ec32 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb4c:	4413      	add	r3, r2
 800eb4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	f003 0301 	and.w	r3, r3, #1
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d003      	beq.n	800eb62 <put_fat+0xea>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	091b      	lsrs	r3, r3, #4
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	e00e      	b.n	800eb80 <put_fat+0x108>
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	b25b      	sxtb	r3, r3
 800eb68:	f023 030f 	bic.w	r3, r3, #15
 800eb6c:	b25a      	sxtb	r2, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	0a1b      	lsrs	r3, r3, #8
 800eb72:	b25b      	sxtb	r3, r3
 800eb74:	f003 030f 	and.w	r3, r3, #15
 800eb78:	b25b      	sxtb	r3, r3
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	b25b      	sxtb	r3, r3
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	697a      	ldr	r2, [r7, #20]
 800eb82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2201      	movs	r2, #1
 800eb88:	70da      	strb	r2, [r3, #3]
			break;
 800eb8a:	e057      	b.n	800ec3c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	6a1a      	ldr	r2, [r3, #32]
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	0a1b      	lsrs	r3, r3, #8
 800eb94:	4413      	add	r3, r2
 800eb96:	4619      	mov	r1, r3
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f7ff fe0d 	bl	800e7b8 <move_window>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eba2:	7ffb      	ldrb	r3, [r7, #31]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d146      	bne.n	800ec36 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	005b      	lsls	r3, r3, #1
 800ebb2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ebb6:	4413      	add	r3, r2
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	b292      	uxth	r2, r2
 800ebbc:	4611      	mov	r1, r2
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7ff fb85 	bl	800e2ce <st_word>
			fs->wflag = 1;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	70da      	strb	r2, [r3, #3]
			break;
 800ebca:	e037      	b.n	800ec3c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6a1a      	ldr	r2, [r3, #32]
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	09db      	lsrs	r3, r3, #7
 800ebd4:	4413      	add	r3, r2
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	68f8      	ldr	r0, [r7, #12]
 800ebda:	f7ff fded 	bl	800e7b8 <move_window>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ebe2:	7ffb      	ldrb	r3, [r7, #31]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d128      	bne.n	800ec3a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	009b      	lsls	r3, r3, #2
 800ebf8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ebfc:	4413      	add	r3, r2
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7ff fb42 	bl	800e288 <ld_dword>
 800ec04:	4603      	mov	r3, r0
 800ec06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ec0a:	4323      	orrs	r3, r4
 800ec0c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ec1c:	4413      	add	r3, r2
 800ec1e:	6879      	ldr	r1, [r7, #4]
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7ff fb6f 	bl	800e304 <st_dword>
			fs->wflag = 1;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2201      	movs	r2, #1
 800ec2a:	70da      	strb	r2, [r3, #3]
			break;
 800ec2c:	e006      	b.n	800ec3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ec2e:	bf00      	nop
 800ec30:	e004      	b.n	800ec3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ec32:	bf00      	nop
 800ec34:	e002      	b.n	800ec3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ec36:	bf00      	nop
 800ec38:	e000      	b.n	800ec3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ec3a:	bf00      	nop
		}
	}
	return res;
 800ec3c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3724      	adds	r7, #36	; 0x24
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd90      	pop	{r4, r7, pc}

0800ec46 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b088      	sub	sp, #32
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	60f8      	str	r0, [r7, #12]
 800ec4e:	60b9      	str	r1, [r7, #8]
 800ec50:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d904      	bls.n	800ec6c <remove_chain+0x26>
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	695b      	ldr	r3, [r3, #20]
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d301      	bcc.n	800ec70 <remove_chain+0x2a>
 800ec6c:	2302      	movs	r3, #2
 800ec6e:	e04b      	b.n	800ed08 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d00c      	beq.n	800ec90 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ec76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec7a:	6879      	ldr	r1, [r7, #4]
 800ec7c:	69b8      	ldr	r0, [r7, #24]
 800ec7e:	f7ff fefb 	bl	800ea78 <put_fat>
 800ec82:	4603      	mov	r3, r0
 800ec84:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ec86:	7ffb      	ldrb	r3, [r7, #31]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d001      	beq.n	800ec90 <remove_chain+0x4a>
 800ec8c:	7ffb      	ldrb	r3, [r7, #31]
 800ec8e:	e03b      	b.n	800ed08 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ec90:	68b9      	ldr	r1, [r7, #8]
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	f7ff fe4b 	bl	800e92e <get_fat>
 800ec98:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d031      	beq.n	800ed04 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d101      	bne.n	800ecaa <remove_chain+0x64>
 800eca6:	2302      	movs	r3, #2
 800eca8:	e02e      	b.n	800ed08 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecb0:	d101      	bne.n	800ecb6 <remove_chain+0x70>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	e028      	b.n	800ed08 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	68b9      	ldr	r1, [r7, #8]
 800ecba:	69b8      	ldr	r0, [r7, #24]
 800ecbc:	f7ff fedc 	bl	800ea78 <put_fat>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ecc4:	7ffb      	ldrb	r3, [r7, #31]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d001      	beq.n	800ecce <remove_chain+0x88>
 800ecca:	7ffb      	ldrb	r3, [r7, #31]
 800eccc:	e01c      	b.n	800ed08 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	691a      	ldr	r2, [r3, #16]
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	3b02      	subs	r3, #2
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d20b      	bcs.n	800ecf4 <remove_chain+0xae>
			fs->free_clst++;
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	791b      	ldrb	r3, [r3, #4]
 800ecea:	f043 0301 	orr.w	r3, r3, #1
 800ecee:	b2da      	uxtb	r2, r3
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	695b      	ldr	r3, [r3, #20]
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d3c6      	bcc.n	800ec90 <remove_chain+0x4a>
 800ed02:	e000      	b.n	800ed06 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ed04:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3720      	adds	r7, #32
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b088      	sub	sp, #32
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d10d      	bne.n	800ed42 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	68db      	ldr	r3, [r3, #12]
 800ed2a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d004      	beq.n	800ed3c <create_chain+0x2c>
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	695b      	ldr	r3, [r3, #20]
 800ed36:	69ba      	ldr	r2, [r7, #24]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d31b      	bcc.n	800ed74 <create_chain+0x64>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	61bb      	str	r3, [r7, #24]
 800ed40:	e018      	b.n	800ed74 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ed42:	6839      	ldr	r1, [r7, #0]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7ff fdf2 	bl	800e92e <get_fat>
 800ed4a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d801      	bhi.n	800ed56 <create_chain+0x46>
 800ed52:	2301      	movs	r3, #1
 800ed54:	e070      	b.n	800ee38 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed5c:	d101      	bne.n	800ed62 <create_chain+0x52>
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	e06a      	b.n	800ee38 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	695b      	ldr	r3, [r3, #20]
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d201      	bcs.n	800ed70 <create_chain+0x60>
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	e063      	b.n	800ee38 <create_chain+0x128>
		scl = clst;
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	695b      	ldr	r3, [r3, #20]
 800ed82:	69fa      	ldr	r2, [r7, #28]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d307      	bcc.n	800ed98 <create_chain+0x88>
				ncl = 2;
 800ed88:	2302      	movs	r3, #2
 800ed8a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ed8c:	69fa      	ldr	r2, [r7, #28]
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d901      	bls.n	800ed98 <create_chain+0x88>
 800ed94:	2300      	movs	r3, #0
 800ed96:	e04f      	b.n	800ee38 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ed98:	69f9      	ldr	r1, [r7, #28]
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7ff fdc7 	bl	800e92e <get_fat>
 800eda0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00e      	beq.n	800edc6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2b01      	cmp	r3, #1
 800edac:	d003      	beq.n	800edb6 <create_chain+0xa6>
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edb4:	d101      	bne.n	800edba <create_chain+0xaa>
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	e03e      	b.n	800ee38 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800edba:	69fa      	ldr	r2, [r7, #28]
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d1da      	bne.n	800ed78 <create_chain+0x68>
 800edc2:	2300      	movs	r3, #0
 800edc4:	e038      	b.n	800ee38 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800edc6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800edc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800edcc:	69f9      	ldr	r1, [r7, #28]
 800edce:	6938      	ldr	r0, [r7, #16]
 800edd0:	f7ff fe52 	bl	800ea78 <put_fat>
 800edd4:	4603      	mov	r3, r0
 800edd6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800edd8:	7dfb      	ldrb	r3, [r7, #23]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d109      	bne.n	800edf2 <create_chain+0xe2>
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d006      	beq.n	800edf2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ede4:	69fa      	ldr	r2, [r7, #28]
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6938      	ldr	r0, [r7, #16]
 800edea:	f7ff fe45 	bl	800ea78 <put_fat>
 800edee:	4603      	mov	r3, r0
 800edf0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800edf2:	7dfb      	ldrb	r3, [r7, #23]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d116      	bne.n	800ee26 <create_chain+0x116>
		fs->last_clst = ncl;
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	69fa      	ldr	r2, [r7, #28]
 800edfc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	691a      	ldr	r2, [r3, #16]
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	695b      	ldr	r3, [r3, #20]
 800ee06:	3b02      	subs	r3, #2
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d804      	bhi.n	800ee16 <create_chain+0x106>
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	691b      	ldr	r3, [r3, #16]
 800ee10:	1e5a      	subs	r2, r3, #1
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	791b      	ldrb	r3, [r3, #4]
 800ee1a:	f043 0301 	orr.w	r3, r3, #1
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	711a      	strb	r2, [r3, #4]
 800ee24:	e007      	b.n	800ee36 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ee26:	7dfb      	ldrb	r3, [r7, #23]
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d102      	bne.n	800ee32 <create_chain+0x122>
 800ee2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee30:	e000      	b.n	800ee34 <create_chain+0x124>
 800ee32:	2301      	movs	r3, #1
 800ee34:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ee36:	69fb      	ldr	r3, [r7, #28]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3720      	adds	r7, #32
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b087      	sub	sp, #28
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee54:	3304      	adds	r3, #4
 800ee56:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	0a5b      	lsrs	r3, r3, #9
 800ee5c:	68fa      	ldr	r2, [r7, #12]
 800ee5e:	8952      	ldrh	r2, [r2, #10]
 800ee60:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee64:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	1d1a      	adds	r2, r3, #4
 800ee6a:	613a      	str	r2, [r7, #16]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d101      	bne.n	800ee7a <clmt_clust+0x3a>
 800ee76:	2300      	movs	r3, #0
 800ee78:	e010      	b.n	800ee9c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d307      	bcc.n	800ee92 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ee82:	697a      	ldr	r2, [r7, #20]
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	1ad3      	subs	r3, r2, r3
 800ee88:	617b      	str	r3, [r7, #20]
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	3304      	adds	r3, #4
 800ee8e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ee90:	e7e9      	b.n	800ee66 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ee92:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	4413      	add	r3, r2
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	371c      	adds	r7, #28
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b086      	sub	sp, #24
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eebe:	d204      	bcs.n	800eeca <dir_sdi+0x22>
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	f003 031f 	and.w	r3, r3, #31
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d001      	beq.n	800eece <dir_sdi+0x26>
		return FR_INT_ERR;
 800eeca:	2302      	movs	r3, #2
 800eecc:	e063      	b.n	800ef96 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	683a      	ldr	r2, [r7, #0]
 800eed2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d106      	bne.n	800eeee <dir_sdi+0x46>
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	2b02      	cmp	r3, #2
 800eee6:	d902      	bls.n	800eeee <dir_sdi+0x46>
		clst = fs->dirbase;
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10c      	bne.n	800ef0e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	095b      	lsrs	r3, r3, #5
 800eef8:	693a      	ldr	r2, [r7, #16]
 800eefa:	8912      	ldrh	r2, [r2, #8]
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d301      	bcc.n	800ef04 <dir_sdi+0x5c>
 800ef00:	2302      	movs	r3, #2
 800ef02:	e048      	b.n	800ef96 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	61da      	str	r2, [r3, #28]
 800ef0c:	e029      	b.n	800ef62 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	895b      	ldrh	r3, [r3, #10]
 800ef12:	025b      	lsls	r3, r3, #9
 800ef14:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ef16:	e019      	b.n	800ef4c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6979      	ldr	r1, [r7, #20]
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7ff fd06 	bl	800e92e <get_fat>
 800ef22:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef2a:	d101      	bne.n	800ef30 <dir_sdi+0x88>
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	e032      	b.n	800ef96 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d904      	bls.n	800ef40 <dir_sdi+0x98>
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	695b      	ldr	r3, [r3, #20]
 800ef3a:	697a      	ldr	r2, [r7, #20]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d301      	bcc.n	800ef44 <dir_sdi+0x9c>
 800ef40:	2302      	movs	r3, #2
 800ef42:	e028      	b.n	800ef96 <dir_sdi+0xee>
			ofs -= csz;
 800ef44:	683a      	ldr	r2, [r7, #0]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ef4c:	683a      	ldr	r2, [r7, #0]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d2e1      	bcs.n	800ef18 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ef54:	6979      	ldr	r1, [r7, #20]
 800ef56:	6938      	ldr	r0, [r7, #16]
 800ef58:	f7ff fcca 	bl	800e8f0 <clust2sect>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	697a      	ldr	r2, [r7, #20]
 800ef66:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	69db      	ldr	r3, [r3, #28]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d101      	bne.n	800ef74 <dir_sdi+0xcc>
 800ef70:	2302      	movs	r3, #2
 800ef72:	e010      	b.n	800ef96 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	69da      	ldr	r2, [r3, #28]
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	0a5b      	lsrs	r3, r3, #9
 800ef7c:	441a      	add	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef8e:	441a      	add	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ef94:	2300      	movs	r3, #0
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3718      	adds	r7, #24
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ef9e:	b580      	push	{r7, lr}
 800efa0:	b086      	sub	sp, #24
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	695b      	ldr	r3, [r3, #20]
 800efb2:	3320      	adds	r3, #32
 800efb4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	69db      	ldr	r3, [r3, #28]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d003      	beq.n	800efc6 <dir_next+0x28>
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800efc4:	d301      	bcc.n	800efca <dir_next+0x2c>
 800efc6:	2304      	movs	r3, #4
 800efc8:	e0aa      	b.n	800f120 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f040 8098 	bne.w	800f106 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	69db      	ldr	r3, [r3, #28]
 800efda:	1c5a      	adds	r2, r3, #1
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	699b      	ldr	r3, [r3, #24]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d10b      	bne.n	800f000 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	095b      	lsrs	r3, r3, #5
 800efec:	68fa      	ldr	r2, [r7, #12]
 800efee:	8912      	ldrh	r2, [r2, #8]
 800eff0:	4293      	cmp	r3, r2
 800eff2:	f0c0 8088 	bcc.w	800f106 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2200      	movs	r2, #0
 800effa:	61da      	str	r2, [r3, #28]
 800effc:	2304      	movs	r3, #4
 800effe:	e08f      	b.n	800f120 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	0a5b      	lsrs	r3, r3, #9
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	8952      	ldrh	r2, [r2, #10]
 800f008:	3a01      	subs	r2, #1
 800f00a:	4013      	ands	r3, r2
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d17a      	bne.n	800f106 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	699b      	ldr	r3, [r3, #24]
 800f016:	4619      	mov	r1, r3
 800f018:	4610      	mov	r0, r2
 800f01a:	f7ff fc88 	bl	800e92e <get_fat>
 800f01e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	2b01      	cmp	r3, #1
 800f024:	d801      	bhi.n	800f02a <dir_next+0x8c>
 800f026:	2302      	movs	r3, #2
 800f028:	e07a      	b.n	800f120 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f030:	d101      	bne.n	800f036 <dir_next+0x98>
 800f032:	2301      	movs	r3, #1
 800f034:	e074      	b.n	800f120 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	695b      	ldr	r3, [r3, #20]
 800f03a:	697a      	ldr	r2, [r7, #20]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d358      	bcc.n	800f0f2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d104      	bne.n	800f050 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2200      	movs	r2, #0
 800f04a:	61da      	str	r2, [r3, #28]
 800f04c:	2304      	movs	r3, #4
 800f04e:	e067      	b.n	800f120 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	699b      	ldr	r3, [r3, #24]
 800f056:	4619      	mov	r1, r3
 800f058:	4610      	mov	r0, r2
 800f05a:	f7ff fe59 	bl	800ed10 <create_chain>
 800f05e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d101      	bne.n	800f06a <dir_next+0xcc>
 800f066:	2307      	movs	r3, #7
 800f068:	e05a      	b.n	800f120 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d101      	bne.n	800f074 <dir_next+0xd6>
 800f070:	2302      	movs	r3, #2
 800f072:	e055      	b.n	800f120 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f07a:	d101      	bne.n	800f080 <dir_next+0xe2>
 800f07c:	2301      	movs	r3, #1
 800f07e:	e04f      	b.n	800f120 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f080:	68f8      	ldr	r0, [r7, #12]
 800f082:	f7ff fb55 	bl	800e730 <sync_window>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d001      	beq.n	800f090 <dir_next+0xf2>
 800f08c:	2301      	movs	r3, #1
 800f08e:	e047      	b.n	800f120 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	3330      	adds	r3, #48	; 0x30
 800f094:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f098:	2100      	movs	r1, #0
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7ff f97f 	bl	800e39e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	613b      	str	r3, [r7, #16]
 800f0a4:	6979      	ldr	r1, [r7, #20]
 800f0a6:	68f8      	ldr	r0, [r7, #12]
 800f0a8:	f7ff fc22 	bl	800e8f0 <clust2sect>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	62da      	str	r2, [r3, #44]	; 0x2c
 800f0b2:	e012      	b.n	800f0da <dir_next+0x13c>
						fs->wflag = 1;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f7ff fb38 	bl	800e730 <sync_window>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d001      	beq.n	800f0ca <dir_next+0x12c>
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e02a      	b.n	800f120 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	613b      	str	r3, [r7, #16]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d4:	1c5a      	adds	r2, r3, #1
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	62da      	str	r2, [r3, #44]	; 0x2c
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	895b      	ldrh	r3, [r3, #10]
 800f0de:	461a      	mov	r2, r3
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d3e6      	bcc.n	800f0b4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	1ad2      	subs	r2, r2, r3
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	697a      	ldr	r2, [r7, #20]
 800f0f6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f0f8:	6979      	ldr	r1, [r7, #20]
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	f7ff fbf8 	bl	800e8f0 <clust2sect>
 800f100:	4602      	mov	r2, r0
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	68ba      	ldr	r2, [r7, #8]
 800f10a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f118:	441a      	add	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3718      	adds	r7, #24
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b086      	sub	sp, #24
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f138:	2100      	movs	r1, #0
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f7ff feb4 	bl	800eea8 <dir_sdi>
 800f140:	4603      	mov	r3, r0
 800f142:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f144:	7dfb      	ldrb	r3, [r7, #23]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d12b      	bne.n	800f1a2 <dir_alloc+0x7a>
		n = 0;
 800f14a:	2300      	movs	r3, #0
 800f14c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	69db      	ldr	r3, [r3, #28]
 800f152:	4619      	mov	r1, r3
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f7ff fb2f 	bl	800e7b8 <move_window>
 800f15a:	4603      	mov	r3, r0
 800f15c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f15e:	7dfb      	ldrb	r3, [r7, #23]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d11d      	bne.n	800f1a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6a1b      	ldr	r3, [r3, #32]
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	2be5      	cmp	r3, #229	; 0xe5
 800f16c:	d004      	beq.n	800f178 <dir_alloc+0x50>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d107      	bne.n	800f188 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	3301      	adds	r3, #1
 800f17c:	613b      	str	r3, [r7, #16]
 800f17e:	693a      	ldr	r2, [r7, #16]
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	429a      	cmp	r2, r3
 800f184:	d102      	bne.n	800f18c <dir_alloc+0x64>
 800f186:	e00c      	b.n	800f1a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f188:	2300      	movs	r3, #0
 800f18a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f18c:	2101      	movs	r1, #1
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f7ff ff05 	bl	800ef9e <dir_next>
 800f194:	4603      	mov	r3, r0
 800f196:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f198:	7dfb      	ldrb	r3, [r7, #23]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d0d7      	beq.n	800f14e <dir_alloc+0x26>
 800f19e:	e000      	b.n	800f1a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f1a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f1a2:	7dfb      	ldrb	r3, [r7, #23]
 800f1a4:	2b04      	cmp	r3, #4
 800f1a6:	d101      	bne.n	800f1ac <dir_alloc+0x84>
 800f1a8:	2307      	movs	r3, #7
 800f1aa:	75fb      	strb	r3, [r7, #23]
	return res;
 800f1ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3718      	adds	r7, #24
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b084      	sub	sp, #16
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	331a      	adds	r3, #26
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7ff f847 	bl	800e258 <ld_word>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	2b03      	cmp	r3, #3
 800f1d4:	d109      	bne.n	800f1ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	3314      	adds	r3, #20
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7ff f83c 	bl	800e258 <ld_word>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	041b      	lsls	r3, r3, #16
 800f1e4:	68fa      	ldr	r2, [r7, #12]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3710      	adds	r7, #16
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	331a      	adds	r3, #26
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	b292      	uxth	r2, r2
 800f208:	4611      	mov	r1, r2
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7ff f85f 	bl	800e2ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	2b03      	cmp	r3, #3
 800f216:	d109      	bne.n	800f22c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	f103 0214 	add.w	r2, r3, #20
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	0c1b      	lsrs	r3, r3, #16
 800f222:	b29b      	uxth	r3, r3
 800f224:	4619      	mov	r1, r3
 800f226:	4610      	mov	r0, r2
 800f228:	f7ff f851 	bl	800e2ce <st_word>
	}
}
 800f22c:	bf00      	nop
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b086      	sub	sp, #24
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f242:	2100      	movs	r1, #0
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7ff fe2f 	bl	800eea8 <dir_sdi>
 800f24a:	4603      	mov	r3, r0
 800f24c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f24e:	7dfb      	ldrb	r3, [r7, #23]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d001      	beq.n	800f258 <dir_find+0x24>
 800f254:	7dfb      	ldrb	r3, [r7, #23]
 800f256:	e03e      	b.n	800f2d6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	69db      	ldr	r3, [r3, #28]
 800f25c:	4619      	mov	r1, r3
 800f25e:	6938      	ldr	r0, [r7, #16]
 800f260:	f7ff faaa 	bl	800e7b8 <move_window>
 800f264:	4603      	mov	r3, r0
 800f266:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f268:	7dfb      	ldrb	r3, [r7, #23]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d12f      	bne.n	800f2ce <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a1b      	ldr	r3, [r3, #32]
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f276:	7bfb      	ldrb	r3, [r7, #15]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d102      	bne.n	800f282 <dir_find+0x4e>
 800f27c:	2304      	movs	r3, #4
 800f27e:	75fb      	strb	r3, [r7, #23]
 800f280:	e028      	b.n	800f2d4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a1b      	ldr	r3, [r3, #32]
 800f286:	330b      	adds	r3, #11
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6a1b      	ldr	r3, [r3, #32]
 800f298:	330b      	adds	r3, #11
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	f003 0308 	and.w	r3, r3, #8
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d10a      	bne.n	800f2ba <dir_find+0x86>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6a18      	ldr	r0, [r3, #32]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	3324      	adds	r3, #36	; 0x24
 800f2ac:	220b      	movs	r2, #11
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	f7ff f88f 	bl	800e3d2 <mem_cmp>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00b      	beq.n	800f2d2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7ff fe6e 	bl	800ef9e <dir_next>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f2c6:	7dfb      	ldrb	r3, [r7, #23]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d0c5      	beq.n	800f258 <dir_find+0x24>
 800f2cc:	e002      	b.n	800f2d4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f2ce:	bf00      	nop
 800f2d0:	e000      	b.n	800f2d4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f2d2:	bf00      	nop

	return res;
 800f2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3718      	adds	r7, #24
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b084      	sub	sp, #16
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f2ec:	2101      	movs	r1, #1
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7ff ff1a 	bl	800f128 <dir_alloc>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f2f8:	7bfb      	ldrb	r3, [r7, #15]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d11c      	bne.n	800f338 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	69db      	ldr	r3, [r3, #28]
 800f302:	4619      	mov	r1, r3
 800f304:	68b8      	ldr	r0, [r7, #8]
 800f306:	f7ff fa57 	bl	800e7b8 <move_window>
 800f30a:	4603      	mov	r3, r0
 800f30c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f30e:	7bfb      	ldrb	r3, [r7, #15]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d111      	bne.n	800f338 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6a1b      	ldr	r3, [r3, #32]
 800f318:	2220      	movs	r2, #32
 800f31a:	2100      	movs	r1, #0
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7ff f83e 	bl	800e39e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6a18      	ldr	r0, [r3, #32]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	3324      	adds	r3, #36	; 0x24
 800f32a:	220b      	movs	r2, #11
 800f32c:	4619      	mov	r1, r3
 800f32e:	f7ff f815 	bl	800e35c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	2201      	movs	r2, #1
 800f336:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f338:	7bfb      	ldrb	r3, [r7, #15]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
	...

0800f344 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b088      	sub	sp, #32
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	60fb      	str	r3, [r7, #12]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	3324      	adds	r3, #36	; 0x24
 800f358:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f35a:	220b      	movs	r2, #11
 800f35c:	2120      	movs	r1, #32
 800f35e:	68b8      	ldr	r0, [r7, #8]
 800f360:	f7ff f81d 	bl	800e39e <mem_set>
	si = i = 0; ni = 8;
 800f364:	2300      	movs	r3, #0
 800f366:	613b      	str	r3, [r7, #16]
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	617b      	str	r3, [r7, #20]
 800f36c:	2308      	movs	r3, #8
 800f36e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	1c5a      	adds	r2, r3, #1
 800f374:	617a      	str	r2, [r7, #20]
 800f376:	68fa      	ldr	r2, [r7, #12]
 800f378:	4413      	add	r3, r2
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f37e:	7ffb      	ldrb	r3, [r7, #31]
 800f380:	2b20      	cmp	r3, #32
 800f382:	d94e      	bls.n	800f422 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f384:	7ffb      	ldrb	r3, [r7, #31]
 800f386:	2b2f      	cmp	r3, #47	; 0x2f
 800f388:	d006      	beq.n	800f398 <create_name+0x54>
 800f38a:	7ffb      	ldrb	r3, [r7, #31]
 800f38c:	2b5c      	cmp	r3, #92	; 0x5c
 800f38e:	d110      	bne.n	800f3b2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f390:	e002      	b.n	800f398 <create_name+0x54>
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	3301      	adds	r3, #1
 800f396:	617b      	str	r3, [r7, #20]
 800f398:	68fa      	ldr	r2, [r7, #12]
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	4413      	add	r3, r2
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	2b2f      	cmp	r3, #47	; 0x2f
 800f3a2:	d0f6      	beq.n	800f392 <create_name+0x4e>
 800f3a4:	68fa      	ldr	r2, [r7, #12]
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	4413      	add	r3, r2
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	2b5c      	cmp	r3, #92	; 0x5c
 800f3ae:	d0f0      	beq.n	800f392 <create_name+0x4e>
			break;
 800f3b0:	e038      	b.n	800f424 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f3b2:	7ffb      	ldrb	r3, [r7, #31]
 800f3b4:	2b2e      	cmp	r3, #46	; 0x2e
 800f3b6:	d003      	beq.n	800f3c0 <create_name+0x7c>
 800f3b8:	693a      	ldr	r2, [r7, #16]
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d30c      	bcc.n	800f3da <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f3c0:	69bb      	ldr	r3, [r7, #24]
 800f3c2:	2b0b      	cmp	r3, #11
 800f3c4:	d002      	beq.n	800f3cc <create_name+0x88>
 800f3c6:	7ffb      	ldrb	r3, [r7, #31]
 800f3c8:	2b2e      	cmp	r3, #46	; 0x2e
 800f3ca:	d001      	beq.n	800f3d0 <create_name+0x8c>
 800f3cc:	2306      	movs	r3, #6
 800f3ce:	e044      	b.n	800f45a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f3d0:	2308      	movs	r3, #8
 800f3d2:	613b      	str	r3, [r7, #16]
 800f3d4:	230b      	movs	r3, #11
 800f3d6:	61bb      	str	r3, [r7, #24]
			continue;
 800f3d8:	e022      	b.n	800f420 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f3da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	da04      	bge.n	800f3ec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f3e2:	7ffb      	ldrb	r3, [r7, #31]
 800f3e4:	3b80      	subs	r3, #128	; 0x80
 800f3e6:	4a1f      	ldr	r2, [pc, #124]	; (800f464 <create_name+0x120>)
 800f3e8:	5cd3      	ldrb	r3, [r2, r3]
 800f3ea:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f3ec:	7ffb      	ldrb	r3, [r7, #31]
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	481d      	ldr	r0, [pc, #116]	; (800f468 <create_name+0x124>)
 800f3f2:	f7ff f815 	bl	800e420 <chk_chr>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d001      	beq.n	800f400 <create_name+0xbc>
 800f3fc:	2306      	movs	r3, #6
 800f3fe:	e02c      	b.n	800f45a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f400:	7ffb      	ldrb	r3, [r7, #31]
 800f402:	2b60      	cmp	r3, #96	; 0x60
 800f404:	d905      	bls.n	800f412 <create_name+0xce>
 800f406:	7ffb      	ldrb	r3, [r7, #31]
 800f408:	2b7a      	cmp	r3, #122	; 0x7a
 800f40a:	d802      	bhi.n	800f412 <create_name+0xce>
 800f40c:	7ffb      	ldrb	r3, [r7, #31]
 800f40e:	3b20      	subs	r3, #32
 800f410:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	1c5a      	adds	r2, r3, #1
 800f416:	613a      	str	r2, [r7, #16]
 800f418:	68ba      	ldr	r2, [r7, #8]
 800f41a:	4413      	add	r3, r2
 800f41c:	7ffa      	ldrb	r2, [r7, #31]
 800f41e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f420:	e7a6      	b.n	800f370 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f422:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	441a      	add	r2, r3
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d101      	bne.n	800f438 <create_name+0xf4>
 800f434:	2306      	movs	r3, #6
 800f436:	e010      	b.n	800f45a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	2be5      	cmp	r3, #229	; 0xe5
 800f43e:	d102      	bne.n	800f446 <create_name+0x102>
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	2205      	movs	r2, #5
 800f444:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f446:	7ffb      	ldrb	r3, [r7, #31]
 800f448:	2b20      	cmp	r3, #32
 800f44a:	d801      	bhi.n	800f450 <create_name+0x10c>
 800f44c:	2204      	movs	r2, #4
 800f44e:	e000      	b.n	800f452 <create_name+0x10e>
 800f450:	2200      	movs	r2, #0
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	330b      	adds	r3, #11
 800f456:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f458:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3720      	adds	r7, #32
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	08015124 	.word	0x08015124
 800f468:	08015044 	.word	0x08015044

0800f46c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b086      	sub	sp, #24
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f480:	e002      	b.n	800f488 <follow_path+0x1c>
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	3301      	adds	r3, #1
 800f486:	603b      	str	r3, [r7, #0]
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	2b2f      	cmp	r3, #47	; 0x2f
 800f48e:	d0f8      	beq.n	800f482 <follow_path+0x16>
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	2b5c      	cmp	r3, #92	; 0x5c
 800f496:	d0f4      	beq.n	800f482 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	2200      	movs	r2, #0
 800f49c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	2b1f      	cmp	r3, #31
 800f4a4:	d80a      	bhi.n	800f4bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2280      	movs	r2, #128	; 0x80
 800f4aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7ff fcf9 	bl	800eea8 <dir_sdi>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	75fb      	strb	r3, [r7, #23]
 800f4ba:	e043      	b.n	800f544 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f4bc:	463b      	mov	r3, r7
 800f4be:	4619      	mov	r1, r3
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff ff3f 	bl	800f344 <create_name>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f4ca:	7dfb      	ldrb	r3, [r7, #23]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d134      	bne.n	800f53a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7ff feaf 	bl	800f234 <dir_find>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f4e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f4e2:	7dfb      	ldrb	r3, [r7, #23]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d00a      	beq.n	800f4fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f4e8:	7dfb      	ldrb	r3, [r7, #23]
 800f4ea:	2b04      	cmp	r3, #4
 800f4ec:	d127      	bne.n	800f53e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f4ee:	7afb      	ldrb	r3, [r7, #11]
 800f4f0:	f003 0304 	and.w	r3, r3, #4
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d122      	bne.n	800f53e <follow_path+0xd2>
 800f4f8:	2305      	movs	r3, #5
 800f4fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f4fc:	e01f      	b.n	800f53e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f4fe:	7afb      	ldrb	r3, [r7, #11]
 800f500:	f003 0304 	and.w	r3, r3, #4
 800f504:	2b00      	cmp	r3, #0
 800f506:	d11c      	bne.n	800f542 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	799b      	ldrb	r3, [r3, #6]
 800f50c:	f003 0310 	and.w	r3, r3, #16
 800f510:	2b00      	cmp	r3, #0
 800f512:	d102      	bne.n	800f51a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f514:	2305      	movs	r3, #5
 800f516:	75fb      	strb	r3, [r7, #23]
 800f518:	e014      	b.n	800f544 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	695b      	ldr	r3, [r3, #20]
 800f524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f528:	4413      	add	r3, r2
 800f52a:	4619      	mov	r1, r3
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f7ff fe42 	bl	800f1b6 <ld_clust>
 800f532:	4602      	mov	r2, r0
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f538:	e7c0      	b.n	800f4bc <follow_path+0x50>
			if (res != FR_OK) break;
 800f53a:	bf00      	nop
 800f53c:	e002      	b.n	800f544 <follow_path+0xd8>
				break;
 800f53e:	bf00      	nop
 800f540:	e000      	b.n	800f544 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f542:	bf00      	nop
			}
		}
	}

	return res;
 800f544:	7dfb      	ldrb	r3, [r7, #23]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3718      	adds	r7, #24
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f54e:	b480      	push	{r7}
 800f550:	b087      	sub	sp, #28
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f55a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d031      	beq.n	800f5c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	617b      	str	r3, [r7, #20]
 800f56a:	e002      	b.n	800f572 <get_ldnumber+0x24>
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	3301      	adds	r3, #1
 800f570:	617b      	str	r3, [r7, #20]
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	2b20      	cmp	r3, #32
 800f578:	d903      	bls.n	800f582 <get_ldnumber+0x34>
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	2b3a      	cmp	r3, #58	; 0x3a
 800f580:	d1f4      	bne.n	800f56c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	2b3a      	cmp	r3, #58	; 0x3a
 800f588:	d11c      	bne.n	800f5c4 <get_ldnumber+0x76>
			tp = *path;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	1c5a      	adds	r2, r3, #1
 800f594:	60fa      	str	r2, [r7, #12]
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	3b30      	subs	r3, #48	; 0x30
 800f59a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	2b09      	cmp	r3, #9
 800f5a0:	d80e      	bhi.n	800f5c0 <get_ldnumber+0x72>
 800f5a2:	68fa      	ldr	r2, [r7, #12]
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d10a      	bne.n	800f5c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d107      	bne.n	800f5c0 <get_ldnumber+0x72>
					vol = (int)i;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	617b      	str	r3, [r7, #20]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	697a      	ldr	r2, [r7, #20]
 800f5be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	e002      	b.n	800f5ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f5c8:	693b      	ldr	r3, [r7, #16]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	371c      	adds	r7, #28
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr
	...

0800f5d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	70da      	strb	r2, [r3, #3]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5ee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f5f0:	6839      	ldr	r1, [r7, #0]
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7ff f8e0 	bl	800e7b8 <move_window>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d001      	beq.n	800f602 <check_fs+0x2a>
 800f5fe:	2304      	movs	r3, #4
 800f600:	e038      	b.n	800f674 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	3330      	adds	r3, #48	; 0x30
 800f606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fe fe24 	bl	800e258 <ld_word>
 800f610:	4603      	mov	r3, r0
 800f612:	461a      	mov	r2, r3
 800f614:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f618:	429a      	cmp	r2, r3
 800f61a:	d001      	beq.n	800f620 <check_fs+0x48>
 800f61c:	2303      	movs	r3, #3
 800f61e:	e029      	b.n	800f674 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f626:	2be9      	cmp	r3, #233	; 0xe9
 800f628:	d009      	beq.n	800f63e <check_fs+0x66>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f630:	2beb      	cmp	r3, #235	; 0xeb
 800f632:	d11e      	bne.n	800f672 <check_fs+0x9a>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f63a:	2b90      	cmp	r3, #144	; 0x90
 800f63c:	d119      	bne.n	800f672 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	3330      	adds	r3, #48	; 0x30
 800f642:	3336      	adds	r3, #54	; 0x36
 800f644:	4618      	mov	r0, r3
 800f646:	f7fe fe1f 	bl	800e288 <ld_dword>
 800f64a:	4603      	mov	r3, r0
 800f64c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f650:	4a0a      	ldr	r2, [pc, #40]	; (800f67c <check_fs+0xa4>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d101      	bne.n	800f65a <check_fs+0x82>
 800f656:	2300      	movs	r3, #0
 800f658:	e00c      	b.n	800f674 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	3330      	adds	r3, #48	; 0x30
 800f65e:	3352      	adds	r3, #82	; 0x52
 800f660:	4618      	mov	r0, r3
 800f662:	f7fe fe11 	bl	800e288 <ld_dword>
 800f666:	4602      	mov	r2, r0
 800f668:	4b05      	ldr	r3, [pc, #20]	; (800f680 <check_fs+0xa8>)
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d101      	bne.n	800f672 <check_fs+0x9a>
 800f66e:	2300      	movs	r3, #0
 800f670:	e000      	b.n	800f674 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f672:	2302      	movs	r3, #2
}
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	00544146 	.word	0x00544146
 800f680:	33544146 	.word	0x33544146

0800f684 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b096      	sub	sp, #88	; 0x58
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	4613      	mov	r3, r2
 800f690:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	2200      	movs	r2, #0
 800f696:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f7ff ff58 	bl	800f54e <get_ldnumber>
 800f69e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	da01      	bge.n	800f6aa <find_volume+0x26>
 800f6a6:	230b      	movs	r3, #11
 800f6a8:	e22e      	b.n	800fb08 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f6aa:	4aa8      	ldr	r2, [pc, #672]	; (800f94c <find_volume+0x2c8>)
 800f6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d101      	bne.n	800f6be <find_volume+0x3a>
 800f6ba:	230c      	movs	r3, #12
 800f6bc:	e224      	b.n	800fb08 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f6c4:	79fb      	ldrb	r3, [r7, #7]
 800f6c6:	f023 0301 	bic.w	r3, r3, #1
 800f6ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d01a      	beq.n	800f70a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	785b      	ldrb	r3, [r3, #1]
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fe fd1f 	bl	800e11c <disk_status>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f6e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6e8:	f003 0301 	and.w	r3, r3, #1
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d10c      	bne.n	800f70a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f6f0:	79fb      	ldrb	r3, [r7, #7]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d007      	beq.n	800f706 <find_volume+0x82>
 800f6f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6fa:	f003 0304 	and.w	r3, r3, #4
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d001      	beq.n	800f706 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f702:	230a      	movs	r3, #10
 800f704:	e200      	b.n	800fb08 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800f706:	2300      	movs	r3, #0
 800f708:	e1fe      	b.n	800fb08 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70c:	2200      	movs	r2, #0
 800f70e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f712:	b2da      	uxtb	r2, r3
 800f714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f716:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71a:	785b      	ldrb	r3, [r3, #1]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7fe fd17 	bl	800e150 <disk_initialize>
 800f722:	4603      	mov	r3, r0
 800f724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f72c:	f003 0301 	and.w	r3, r3, #1
 800f730:	2b00      	cmp	r3, #0
 800f732:	d001      	beq.n	800f738 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f734:	2303      	movs	r3, #3
 800f736:	e1e7      	b.n	800fb08 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f738:	79fb      	ldrb	r3, [r7, #7]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d007      	beq.n	800f74e <find_volume+0xca>
 800f73e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f742:	f003 0304 	and.w	r3, r3, #4
 800f746:	2b00      	cmp	r3, #0
 800f748:	d001      	beq.n	800f74e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f74a:	230a      	movs	r3, #10
 800f74c:	e1dc      	b.n	800fb08 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f74e:	2300      	movs	r3, #0
 800f750:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f752:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f756:	f7ff ff3f 	bl	800f5d8 <check_fs>
 800f75a:	4603      	mov	r3, r0
 800f75c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f764:	2b02      	cmp	r3, #2
 800f766:	d14b      	bne.n	800f800 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f768:	2300      	movs	r3, #0
 800f76a:	643b      	str	r3, [r7, #64]	; 0x40
 800f76c:	e01f      	b.n	800f7ae <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f770:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f776:	011b      	lsls	r3, r3, #4
 800f778:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f77c:	4413      	add	r3, r2
 800f77e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f782:	3304      	adds	r3, #4
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d006      	beq.n	800f798 <find_volume+0x114>
 800f78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78c:	3308      	adds	r3, #8
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fe fd7a 	bl	800e288 <ld_dword>
 800f794:	4602      	mov	r2, r0
 800f796:	e000      	b.n	800f79a <find_volume+0x116>
 800f798:	2200      	movs	r2, #0
 800f79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f79c:	009b      	lsls	r3, r3, #2
 800f79e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f7a2:	440b      	add	r3, r1
 800f7a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	643b      	str	r3, [r7, #64]	; 0x40
 800f7ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b0:	2b03      	cmp	r3, #3
 800f7b2:	d9dc      	bls.n	800f76e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d002      	beq.n	800f7c4 <find_volume+0x140>
 800f7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f7c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f7cc:	4413      	add	r3, r2
 800f7ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f7d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f7d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d005      	beq.n	800f7e6 <find_volume+0x162>
 800f7da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f7dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f7de:	f7ff fefb 	bl	800f5d8 <check_fs>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	e000      	b.n	800f7e8 <find_volume+0x164>
 800f7e6:	2303      	movs	r3, #3
 800f7e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f7ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d905      	bls.n	800f800 <find_volume+0x17c>
 800f7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	643b      	str	r3, [r7, #64]	; 0x40
 800f7fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7fc:	2b03      	cmp	r3, #3
 800f7fe:	d9e1      	bls.n	800f7c4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f804:	2b04      	cmp	r3, #4
 800f806:	d101      	bne.n	800f80c <find_volume+0x188>
 800f808:	2301      	movs	r3, #1
 800f80a:	e17d      	b.n	800fb08 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f80c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f810:	2b01      	cmp	r3, #1
 800f812:	d901      	bls.n	800f818 <find_volume+0x194>
 800f814:	230d      	movs	r3, #13
 800f816:	e177      	b.n	800fb08 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f81a:	3330      	adds	r3, #48	; 0x30
 800f81c:	330b      	adds	r3, #11
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fe fd1a 	bl	800e258 <ld_word>
 800f824:	4603      	mov	r3, r0
 800f826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f82a:	d001      	beq.n	800f830 <find_volume+0x1ac>
 800f82c:	230d      	movs	r3, #13
 800f82e:	e16b      	b.n	800fb08 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	3330      	adds	r3, #48	; 0x30
 800f834:	3316      	adds	r3, #22
 800f836:	4618      	mov	r0, r3
 800f838:	f7fe fd0e 	bl	800e258 <ld_word>
 800f83c:	4603      	mov	r3, r0
 800f83e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f842:	2b00      	cmp	r3, #0
 800f844:	d106      	bne.n	800f854 <find_volume+0x1d0>
 800f846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f848:	3330      	adds	r3, #48	; 0x30
 800f84a:	3324      	adds	r3, #36	; 0x24
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fe fd1b 	bl	800e288 <ld_dword>
 800f852:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f858:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f862:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f866:	789b      	ldrb	r3, [r3, #2]
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d005      	beq.n	800f878 <find_volume+0x1f4>
 800f86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86e:	789b      	ldrb	r3, [r3, #2]
 800f870:	2b02      	cmp	r3, #2
 800f872:	d001      	beq.n	800f878 <find_volume+0x1f4>
 800f874:	230d      	movs	r3, #13
 800f876:	e147      	b.n	800fb08 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87a:	789b      	ldrb	r3, [r3, #2]
 800f87c:	461a      	mov	r2, r3
 800f87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f880:	fb02 f303 	mul.w	r3, r2, r3
 800f884:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f88c:	b29a      	uxth	r2, r3
 800f88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f890:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f894:	895b      	ldrh	r3, [r3, #10]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d008      	beq.n	800f8ac <find_volume+0x228>
 800f89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89c:	895b      	ldrh	r3, [r3, #10]
 800f89e:	461a      	mov	r2, r3
 800f8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a2:	895b      	ldrh	r3, [r3, #10]
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	4013      	ands	r3, r2
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d001      	beq.n	800f8b0 <find_volume+0x22c>
 800f8ac:	230d      	movs	r3, #13
 800f8ae:	e12b      	b.n	800fb08 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b2:	3330      	adds	r3, #48	; 0x30
 800f8b4:	3311      	adds	r3, #17
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fe fcce 	bl	800e258 <ld_word>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	461a      	mov	r2, r3
 800f8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c6:	891b      	ldrh	r3, [r3, #8]
 800f8c8:	f003 030f 	and.w	r3, r3, #15
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d001      	beq.n	800f8d6 <find_volume+0x252>
 800f8d2:	230d      	movs	r3, #13
 800f8d4:	e118      	b.n	800fb08 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d8:	3330      	adds	r3, #48	; 0x30
 800f8da:	3313      	adds	r3, #19
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fe fcbb 	bl	800e258 <ld_word>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f8e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d106      	bne.n	800f8fa <find_volume+0x276>
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ee:	3330      	adds	r3, #48	; 0x30
 800f8f0:	3320      	adds	r3, #32
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fe fcc8 	bl	800e288 <ld_dword>
 800f8f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fc:	3330      	adds	r3, #48	; 0x30
 800f8fe:	330e      	adds	r3, #14
 800f900:	4618      	mov	r0, r3
 800f902:	f7fe fca9 	bl	800e258 <ld_word>
 800f906:	4603      	mov	r3, r0
 800f908:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f90a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d101      	bne.n	800f914 <find_volume+0x290>
 800f910:	230d      	movs	r3, #13
 800f912:	e0f9      	b.n	800fb08 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f914:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f918:	4413      	add	r3, r2
 800f91a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f91c:	8912      	ldrh	r2, [r2, #8]
 800f91e:	0912      	lsrs	r2, r2, #4
 800f920:	b292      	uxth	r2, r2
 800f922:	4413      	add	r3, r2
 800f924:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d201      	bcs.n	800f932 <find_volume+0x2ae>
 800f92e:	230d      	movs	r3, #13
 800f930:	e0ea      	b.n	800fb08 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f93a:	8952      	ldrh	r2, [r2, #10]
 800f93c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f940:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f944:	2b00      	cmp	r3, #0
 800f946:	d103      	bne.n	800f950 <find_volume+0x2cc>
 800f948:	230d      	movs	r3, #13
 800f94a:	e0dd      	b.n	800fb08 <find_volume+0x484>
 800f94c:	200003a8 	.word	0x200003a8
		fmt = FS_FAT32;
 800f950:	2303      	movs	r3, #3
 800f952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f958:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d802      	bhi.n	800f966 <find_volume+0x2e2>
 800f960:	2302      	movs	r3, #2
 800f962:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f968:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d802      	bhi.n	800f976 <find_volume+0x2f2>
 800f970:	2301      	movs	r3, #1
 800f972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f978:	1c9a      	adds	r2, r3, #2
 800f97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f982:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f984:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f988:	441a      	add	r2, r3
 800f98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f98e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f992:	441a      	add	r2, r3
 800f994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f996:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800f998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f99c:	2b03      	cmp	r3, #3
 800f99e:	d11e      	bne.n	800f9de <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a2:	3330      	adds	r3, #48	; 0x30
 800f9a4:	332a      	adds	r3, #42	; 0x2a
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fe fc56 	bl	800e258 <ld_word>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d001      	beq.n	800f9b6 <find_volume+0x332>
 800f9b2:	230d      	movs	r3, #13
 800f9b4:	e0a8      	b.n	800fb08 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b8:	891b      	ldrh	r3, [r3, #8]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d001      	beq.n	800f9c2 <find_volume+0x33e>
 800f9be:	230d      	movs	r3, #13
 800f9c0:	e0a2      	b.n	800fb08 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c4:	3330      	adds	r3, #48	; 0x30
 800f9c6:	332c      	adds	r3, #44	; 0x2c
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fe fc5d 	bl	800e288 <ld_dword>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d6:	695b      	ldr	r3, [r3, #20]
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	647b      	str	r3, [r7, #68]	; 0x44
 800f9dc:	e01f      	b.n	800fa1e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e0:	891b      	ldrh	r3, [r3, #8]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d101      	bne.n	800f9ea <find_volume+0x366>
 800f9e6:	230d      	movs	r3, #13
 800f9e8:	e08e      	b.n	800fb08 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ec:	6a1a      	ldr	r2, [r3, #32]
 800f9ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9f0:	441a      	add	r2, r3
 800f9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f9f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f9fa:	2b02      	cmp	r3, #2
 800f9fc:	d103      	bne.n	800fa06 <find_volume+0x382>
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa00:	695b      	ldr	r3, [r3, #20]
 800fa02:	005b      	lsls	r3, r3, #1
 800fa04:	e00a      	b.n	800fa1c <find_volume+0x398>
 800fa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa08:	695a      	ldr	r2, [r3, #20]
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	005b      	lsls	r3, r3, #1
 800fa0e:	4413      	add	r3, r2
 800fa10:	085a      	lsrs	r2, r3, #1
 800fa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa14:	695b      	ldr	r3, [r3, #20]
 800fa16:	f003 0301 	and.w	r3, r3, #1
 800fa1a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fa1c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa20:	699a      	ldr	r2, [r3, #24]
 800fa22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa24:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fa28:	0a5b      	lsrs	r3, r3, #9
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d201      	bcs.n	800fa32 <find_volume+0x3ae>
 800fa2e:	230d      	movs	r3, #13
 800fa30:	e06a      	b.n	800fb08 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa38:	611a      	str	r2, [r3, #16]
 800fa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3c:	691a      	ldr	r2, [r3, #16]
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa44:	2280      	movs	r2, #128	; 0x80
 800fa46:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fa48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa4c:	2b03      	cmp	r3, #3
 800fa4e:	d149      	bne.n	800fae4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa52:	3330      	adds	r3, #48	; 0x30
 800fa54:	3330      	adds	r3, #48	; 0x30
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fe fbfe 	bl	800e258 <ld_word>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d140      	bne.n	800fae4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fa62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa64:	3301      	adds	r3, #1
 800fa66:	4619      	mov	r1, r3
 800fa68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa6a:	f7fe fea5 	bl	800e7b8 <move_window>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d137      	bne.n	800fae4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800fa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa76:	2200      	movs	r2, #0
 800fa78:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7c:	3330      	adds	r3, #48	; 0x30
 800fa7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fe fbe8 	bl	800e258 <ld_word>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d127      	bne.n	800fae4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa96:	3330      	adds	r3, #48	; 0x30
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7fe fbf5 	bl	800e288 <ld_dword>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	4b1b      	ldr	r3, [pc, #108]	; (800fb10 <find_volume+0x48c>)
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d11e      	bne.n	800fae4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800faa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa8:	3330      	adds	r3, #48	; 0x30
 800faaa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fe fbea 	bl	800e288 <ld_dword>
 800fab4:	4602      	mov	r2, r0
 800fab6:	4b17      	ldr	r3, [pc, #92]	; (800fb14 <find_volume+0x490>)
 800fab8:	429a      	cmp	r2, r3
 800faba:	d113      	bne.n	800fae4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fabe:	3330      	adds	r3, #48	; 0x30
 800fac0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7fe fbdf 	bl	800e288 <ld_dword>
 800faca:	4602      	mov	r2, r0
 800facc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800face:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad2:	3330      	adds	r3, #48	; 0x30
 800fad4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fe fbd5 	bl	800e288 <ld_dword>
 800fade:	4602      	mov	r2, r0
 800fae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800faea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800faec:	4b0a      	ldr	r3, [pc, #40]	; (800fb18 <find_volume+0x494>)
 800faee:	881b      	ldrh	r3, [r3, #0]
 800faf0:	3301      	adds	r3, #1
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	4b08      	ldr	r3, [pc, #32]	; (800fb18 <find_volume+0x494>)
 800faf6:	801a      	strh	r2, [r3, #0]
 800faf8:	4b07      	ldr	r3, [pc, #28]	; (800fb18 <find_volume+0x494>)
 800fafa:	881a      	ldrh	r2, [r3, #0]
 800fafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fb00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb02:	f7fe fdf1 	bl	800e6e8 <clear_lock>
#endif
	return FR_OK;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3758      	adds	r7, #88	; 0x58
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	41615252 	.word	0x41615252
 800fb14:	61417272 	.word	0x61417272
 800fb18:	200003ac 	.word	0x200003ac

0800fb1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fb26:	2309      	movs	r3, #9
 800fb28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d01c      	beq.n	800fb6a <validate+0x4e>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d018      	beq.n	800fb6a <validate+0x4e>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d013      	beq.n	800fb6a <validate+0x4e>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	889a      	ldrh	r2, [r3, #4]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	88db      	ldrh	r3, [r3, #6]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d10c      	bne.n	800fb6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	785b      	ldrb	r3, [r3, #1]
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7fe fae0 	bl	800e11c <disk_status>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	f003 0301 	and.w	r3, r3, #1
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d101      	bne.n	800fb6a <validate+0x4e>
			res = FR_OK;
 800fb66:	2300      	movs	r3, #0
 800fb68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fb6a:	7bfb      	ldrb	r3, [r7, #15]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d102      	bne.n	800fb76 <validate+0x5a>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	e000      	b.n	800fb78 <validate+0x5c>
 800fb76:	2300      	movs	r3, #0
 800fb78:	683a      	ldr	r2, [r7, #0]
 800fb7a:	6013      	str	r3, [r2, #0]
	return res;
 800fb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
	...

0800fb88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b088      	sub	sp, #32
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	4613      	mov	r3, r2
 800fb94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fb9a:	f107 0310 	add.w	r3, r7, #16
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7ff fcd5 	bl	800f54e <get_ldnumber>
 800fba4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fba6:	69fb      	ldr	r3, [r7, #28]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	da01      	bge.n	800fbb0 <f_mount+0x28>
 800fbac:	230b      	movs	r3, #11
 800fbae:	e02b      	b.n	800fc08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fbb0:	4a17      	ldr	r2, [pc, #92]	; (800fc10 <f_mount+0x88>)
 800fbb2:	69fb      	ldr	r3, [r7, #28]
 800fbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d005      	beq.n	800fbcc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fbc0:	69b8      	ldr	r0, [r7, #24]
 800fbc2:	f7fe fd91 	bl	800e6e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d002      	beq.n	800fbd8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	490d      	ldr	r1, [pc, #52]	; (800fc10 <f_mount+0x88>)
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d002      	beq.n	800fbee <f_mount+0x66>
 800fbe8:	79fb      	ldrb	r3, [r7, #7]
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d001      	beq.n	800fbf2 <f_mount+0x6a>
 800fbee:	2300      	movs	r3, #0
 800fbf0:	e00a      	b.n	800fc08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fbf2:	f107 010c 	add.w	r1, r7, #12
 800fbf6:	f107 0308 	add.w	r3, r7, #8
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7ff fd41 	bl	800f684 <find_volume>
 800fc02:	4603      	mov	r3, r0
 800fc04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fc06:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3720      	adds	r7, #32
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	200003a8 	.word	0x200003a8

0800fc14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b098      	sub	sp, #96	; 0x60
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d101      	bne.n	800fc2c <f_open+0x18>
 800fc28:	2309      	movs	r3, #9
 800fc2a:	e1ad      	b.n	800ff88 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fc2c:	79fb      	ldrb	r3, [r7, #7]
 800fc2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fc34:	79fa      	ldrb	r2, [r7, #7]
 800fc36:	f107 0110 	add.w	r1, r7, #16
 800fc3a:	f107 0308 	add.w	r3, r7, #8
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7ff fd20 	bl	800f684 <find_volume>
 800fc44:	4603      	mov	r3, r0
 800fc46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fc4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	f040 8191 	bne.w	800ff76 <f_open+0x362>
		dj.obj.fs = fs;
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fc58:	68ba      	ldr	r2, [r7, #8]
 800fc5a:	f107 0314 	add.w	r3, r7, #20
 800fc5e:	4611      	mov	r1, r2
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7ff fc03 	bl	800f46c <follow_path>
 800fc66:	4603      	mov	r3, r0
 800fc68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fc6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d11a      	bne.n	800fcaa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fc74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc78:	b25b      	sxtb	r3, r3
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	da03      	bge.n	800fc86 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fc7e:	2306      	movs	r3, #6
 800fc80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fc84:	e011      	b.n	800fcaa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc86:	79fb      	ldrb	r3, [r7, #7]
 800fc88:	f023 0301 	bic.w	r3, r3, #1
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	bf14      	ite	ne
 800fc90:	2301      	movne	r3, #1
 800fc92:	2300      	moveq	r3, #0
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	461a      	mov	r2, r3
 800fc98:	f107 0314 	add.w	r3, r7, #20
 800fc9c:	4611      	mov	r1, r2
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fe fbda 	bl	800e458 <chk_lock>
 800fca4:	4603      	mov	r3, r0
 800fca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fcaa:	79fb      	ldrb	r3, [r7, #7]
 800fcac:	f003 031c 	and.w	r3, r3, #28
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d07f      	beq.n	800fdb4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fcb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d017      	beq.n	800fcec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fcbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fcc0:	2b04      	cmp	r3, #4
 800fcc2:	d10e      	bne.n	800fce2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fcc4:	f7fe fc24 	bl	800e510 <enq_lock>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d006      	beq.n	800fcdc <f_open+0xc8>
 800fcce:	f107 0314 	add.w	r3, r7, #20
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff fb03 	bl	800f2de <dir_register>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	e000      	b.n	800fcde <f_open+0xca>
 800fcdc:	2312      	movs	r3, #18
 800fcde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fce2:	79fb      	ldrb	r3, [r7, #7]
 800fce4:	f043 0308 	orr.w	r3, r3, #8
 800fce8:	71fb      	strb	r3, [r7, #7]
 800fcea:	e010      	b.n	800fd0e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fcec:	7ebb      	ldrb	r3, [r7, #26]
 800fcee:	f003 0311 	and.w	r3, r3, #17
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d003      	beq.n	800fcfe <f_open+0xea>
					res = FR_DENIED;
 800fcf6:	2307      	movs	r3, #7
 800fcf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fcfc:	e007      	b.n	800fd0e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fcfe:	79fb      	ldrb	r3, [r7, #7]
 800fd00:	f003 0304 	and.w	r3, r3, #4
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d002      	beq.n	800fd0e <f_open+0xfa>
 800fd08:	2308      	movs	r3, #8
 800fd0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fd0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d168      	bne.n	800fde8 <f_open+0x1d4>
 800fd16:	79fb      	ldrb	r3, [r7, #7]
 800fd18:	f003 0308 	and.w	r3, r3, #8
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d063      	beq.n	800fde8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fd20:	f7fc f976 	bl	800c010 <get_fattime>
 800fd24:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd28:	330e      	adds	r3, #14
 800fd2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7fe fae9 	bl	800e304 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd34:	3316      	adds	r3, #22
 800fd36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fe fae3 	bl	800e304 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fd3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd40:	330b      	adds	r3, #11
 800fd42:	2220      	movs	r2, #32
 800fd44:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd4a:	4611      	mov	r1, r2
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7ff fa32 	bl	800f1b6 <ld_clust>
 800fd52:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd58:	2200      	movs	r2, #0
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7ff fa4a 	bl	800f1f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd62:	331c      	adds	r3, #28
 800fd64:	2100      	movs	r1, #0
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fe facc 	bl	800e304 <st_dword>
					fs->wflag = 1;
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fd72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d037      	beq.n	800fde8 <f_open+0x1d4>
						dw = fs->winsect;
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd7c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fd7e:	f107 0314 	add.w	r3, r7, #20
 800fd82:	2200      	movs	r2, #0
 800fd84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fe ff5d 	bl	800ec46 <remove_chain>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800fd92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d126      	bne.n	800fde8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fe fd0a 	bl	800e7b8 <move_window>
 800fda4:	4603      	mov	r3, r0
 800fda6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fdae:	3a01      	subs	r2, #1
 800fdb0:	60da      	str	r2, [r3, #12]
 800fdb2:	e019      	b.n	800fde8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fdb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d115      	bne.n	800fde8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fdbc:	7ebb      	ldrb	r3, [r7, #26]
 800fdbe:	f003 0310 	and.w	r3, r3, #16
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d003      	beq.n	800fdce <f_open+0x1ba>
					res = FR_NO_FILE;
 800fdc6:	2304      	movs	r3, #4
 800fdc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fdcc:	e00c      	b.n	800fde8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fdce:	79fb      	ldrb	r3, [r7, #7]
 800fdd0:	f003 0302 	and.w	r3, r3, #2
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d007      	beq.n	800fde8 <f_open+0x1d4>
 800fdd8:	7ebb      	ldrb	r3, [r7, #26]
 800fdda:	f003 0301 	and.w	r3, r3, #1
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d002      	beq.n	800fde8 <f_open+0x1d4>
						res = FR_DENIED;
 800fde2:	2307      	movs	r3, #7
 800fde4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fde8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d128      	bne.n	800fe42 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fdf0:	79fb      	ldrb	r3, [r7, #7]
 800fdf2:	f003 0308 	and.w	r3, r3, #8
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d003      	beq.n	800fe02 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fdfa:	79fb      	ldrb	r3, [r7, #7]
 800fdfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe00:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fe0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fe10:	79fb      	ldrb	r3, [r7, #7]
 800fe12:	f023 0301 	bic.w	r3, r3, #1
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	bf14      	ite	ne
 800fe1a:	2301      	movne	r3, #1
 800fe1c:	2300      	moveq	r3, #0
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	461a      	mov	r2, r3
 800fe22:	f107 0314 	add.w	r3, r7, #20
 800fe26:	4611      	mov	r1, r2
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fe fb93 	bl	800e554 <inc_lock>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	691b      	ldr	r3, [r3, #16]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d102      	bne.n	800fe42 <f_open+0x22e>
 800fe3c:	2302      	movs	r3, #2
 800fe3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fe42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	f040 8095 	bne.w	800ff76 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe50:	4611      	mov	r1, r2
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7ff f9af 	bl	800f1b6 <ld_clust>
 800fe58:	4602      	mov	r2, r0
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fe5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe60:	331c      	adds	r3, #28
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fe fa10 	bl	800e288 <ld_dword>
 800fe68:	4602      	mov	r2, r0
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2200      	movs	r2, #0
 800fe72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fe74:	693a      	ldr	r2, [r7, #16]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	88da      	ldrh	r2, [r3, #6]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	79fa      	ldrb	r2, [r7, #7]
 800fe86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2200      	movs	r2, #0
 800fe92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2200      	movs	r2, #0
 800fe98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	3330      	adds	r3, #48	; 0x30
 800fe9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fea2:	2100      	movs	r1, #0
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7fe fa7a 	bl	800e39e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800feaa:	79fb      	ldrb	r3, [r7, #7]
 800feac:	f003 0320 	and.w	r3, r3, #32
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d060      	beq.n	800ff76 <f_open+0x362>
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d05c      	beq.n	800ff76 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	68da      	ldr	r2, [r3, #12]
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	895b      	ldrh	r3, [r3, #10]
 800fec8:	025b      	lsls	r3, r3, #9
 800feca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	657b      	str	r3, [r7, #84]	; 0x54
 800fed8:	e016      	b.n	800ff08 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe fd25 	bl	800e92e <get_fat>
 800fee4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d802      	bhi.n	800fef2 <f_open+0x2de>
 800feec:	2302      	movs	r3, #2
 800feee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fef8:	d102      	bne.n	800ff00 <f_open+0x2ec>
 800fefa:	2301      	movs	r3, #1
 800fefc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ff00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	657b      	str	r3, [r7, #84]	; 0x54
 800ff08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d103      	bne.n	800ff18 <f_open+0x304>
 800ff10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d8e0      	bhi.n	800feda <f_open+0x2c6>
				}
				fp->clust = clst;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ff1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d127      	bne.n	800ff76 <f_open+0x362>
 800ff26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d022      	beq.n	800ff76 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fe fcdb 	bl	800e8f0 <clust2sect>
 800ff3a:	6478      	str	r0, [r7, #68]	; 0x44
 800ff3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d103      	bne.n	800ff4a <f_open+0x336>
						res = FR_INT_ERR;
 800ff42:	2302      	movs	r3, #2
 800ff44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ff48:	e015      	b.n	800ff76 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ff4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff4c:	0a5a      	lsrs	r2, r3, #9
 800ff4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff50:	441a      	add	r2, r3
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	7858      	ldrb	r0, [r3, #1]
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6a1a      	ldr	r2, [r3, #32]
 800ff64:	2301      	movs	r3, #1
 800ff66:	f7fe f919 	bl	800e19c <disk_read>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d002      	beq.n	800ff76 <f_open+0x362>
 800ff70:	2301      	movs	r3, #1
 800ff72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ff76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d002      	beq.n	800ff84 <f_open+0x370>
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2200      	movs	r2, #0
 800ff82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ff84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3760      	adds	r7, #96	; 0x60
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b08e      	sub	sp, #56	; 0x38
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	607a      	str	r2, [r7, #4]
 800ff9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f107 0214 	add.w	r2, r7, #20
 800ffae:	4611      	mov	r1, r2
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7ff fdb3 	bl	800fb1c <validate>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ffbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d107      	bne.n	800ffd4 <f_read+0x44>
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	7d5b      	ldrb	r3, [r3, #21]
 800ffc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ffcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d002      	beq.n	800ffda <f_read+0x4a>
 800ffd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffd8:	e115      	b.n	8010206 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	7d1b      	ldrb	r3, [r3, #20]
 800ffde:	f003 0301 	and.w	r3, r3, #1
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d101      	bne.n	800ffea <f_read+0x5a>
 800ffe6:	2307      	movs	r3, #7
 800ffe8:	e10d      	b.n	8010206 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	68da      	ldr	r2, [r3, #12]
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	699b      	ldr	r3, [r3, #24]
 800fff2:	1ad3      	subs	r3, r2, r3
 800fff4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	6a3b      	ldr	r3, [r7, #32]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	f240 80fe 	bls.w	80101fc <f_read+0x26c>
 8010000:	6a3b      	ldr	r3, [r7, #32]
 8010002:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010004:	e0fa      	b.n	80101fc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	699b      	ldr	r3, [r3, #24]
 801000a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801000e:	2b00      	cmp	r3, #0
 8010010:	f040 80c6 	bne.w	80101a0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	699b      	ldr	r3, [r3, #24]
 8010018:	0a5b      	lsrs	r3, r3, #9
 801001a:	697a      	ldr	r2, [r7, #20]
 801001c:	8952      	ldrh	r2, [r2, #10]
 801001e:	3a01      	subs	r2, #1
 8010020:	4013      	ands	r3, r2
 8010022:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d12f      	bne.n	801008a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	699b      	ldr	r3, [r3, #24]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d103      	bne.n	801003a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	633b      	str	r3, [r7, #48]	; 0x30
 8010038:	e013      	b.n	8010062 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003e:	2b00      	cmp	r3, #0
 8010040:	d007      	beq.n	8010052 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	699b      	ldr	r3, [r3, #24]
 8010046:	4619      	mov	r1, r3
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f7fe fef9 	bl	800ee40 <clmt_clust>
 801004e:	6338      	str	r0, [r7, #48]	; 0x30
 8010050:	e007      	b.n	8010062 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010052:	68fa      	ldr	r2, [r7, #12]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	69db      	ldr	r3, [r3, #28]
 8010058:	4619      	mov	r1, r3
 801005a:	4610      	mov	r0, r2
 801005c:	f7fe fc67 	bl	800e92e <get_fat>
 8010060:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010064:	2b01      	cmp	r3, #1
 8010066:	d804      	bhi.n	8010072 <f_read+0xe2>
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2202      	movs	r2, #2
 801006c:	755a      	strb	r2, [r3, #21]
 801006e:	2302      	movs	r3, #2
 8010070:	e0c9      	b.n	8010206 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010078:	d104      	bne.n	8010084 <f_read+0xf4>
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	2201      	movs	r2, #1
 801007e:	755a      	strb	r2, [r3, #21]
 8010080:	2301      	movs	r3, #1
 8010082:	e0c0      	b.n	8010206 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010088:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801008a:	697a      	ldr	r2, [r7, #20]
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	69db      	ldr	r3, [r3, #28]
 8010090:	4619      	mov	r1, r3
 8010092:	4610      	mov	r0, r2
 8010094:	f7fe fc2c 	bl	800e8f0 <clust2sect>
 8010098:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d104      	bne.n	80100aa <f_read+0x11a>
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2202      	movs	r2, #2
 80100a4:	755a      	strb	r2, [r3, #21]
 80100a6:	2302      	movs	r3, #2
 80100a8:	e0ad      	b.n	8010206 <f_read+0x276>
			sect += csect;
 80100aa:	69ba      	ldr	r2, [r7, #24]
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	4413      	add	r3, r2
 80100b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	0a5b      	lsrs	r3, r3, #9
 80100b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80100b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d039      	beq.n	8010132 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80100be:	69fa      	ldr	r2, [r7, #28]
 80100c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c2:	4413      	add	r3, r2
 80100c4:	697a      	ldr	r2, [r7, #20]
 80100c6:	8952      	ldrh	r2, [r2, #10]
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d905      	bls.n	80100d8 <f_read+0x148>
					cc = fs->csize - csect;
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	895b      	ldrh	r3, [r3, #10]
 80100d0:	461a      	mov	r2, r3
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	1ad3      	subs	r3, r2, r3
 80100d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	7858      	ldrb	r0, [r3, #1]
 80100dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100de:	69ba      	ldr	r2, [r7, #24]
 80100e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100e2:	f7fe f85b 	bl	800e19c <disk_read>
 80100e6:	4603      	mov	r3, r0
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d004      	beq.n	80100f6 <f_read+0x166>
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2201      	movs	r2, #1
 80100f0:	755a      	strb	r2, [r3, #21]
 80100f2:	2301      	movs	r3, #1
 80100f4:	e087      	b.n	8010206 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	7d1b      	ldrb	r3, [r3, #20]
 80100fa:	b25b      	sxtb	r3, r3
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	da14      	bge.n	801012a <f_read+0x19a>
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	6a1a      	ldr	r2, [r3, #32]
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	1ad3      	subs	r3, r2, r3
 8010108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801010a:	429a      	cmp	r2, r3
 801010c:	d90d      	bls.n	801012a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	6a1a      	ldr	r2, [r3, #32]
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	1ad3      	subs	r3, r2, r3
 8010116:	025b      	lsls	r3, r3, #9
 8010118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801011a:	18d0      	adds	r0, r2, r3
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	3330      	adds	r3, #48	; 0x30
 8010120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010124:	4619      	mov	r1, r3
 8010126:	f7fe f919 	bl	800e35c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801012a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801012c:	025b      	lsls	r3, r3, #9
 801012e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010130:	e050      	b.n	80101d4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	6a1b      	ldr	r3, [r3, #32]
 8010136:	69ba      	ldr	r2, [r7, #24]
 8010138:	429a      	cmp	r2, r3
 801013a:	d02e      	beq.n	801019a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	7d1b      	ldrb	r3, [r3, #20]
 8010140:	b25b      	sxtb	r3, r3
 8010142:	2b00      	cmp	r3, #0
 8010144:	da18      	bge.n	8010178 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	7858      	ldrb	r0, [r3, #1]
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	6a1a      	ldr	r2, [r3, #32]
 8010154:	2301      	movs	r3, #1
 8010156:	f7fe f841 	bl	800e1dc <disk_write>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d004      	beq.n	801016a <f_read+0x1da>
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2201      	movs	r2, #1
 8010164:	755a      	strb	r2, [r3, #21]
 8010166:	2301      	movs	r3, #1
 8010168:	e04d      	b.n	8010206 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	7d1b      	ldrb	r3, [r3, #20]
 801016e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010172:	b2da      	uxtb	r2, r3
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	7858      	ldrb	r0, [r3, #1]
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010182:	2301      	movs	r3, #1
 8010184:	69ba      	ldr	r2, [r7, #24]
 8010186:	f7fe f809 	bl	800e19c <disk_read>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d004      	beq.n	801019a <f_read+0x20a>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2201      	movs	r2, #1
 8010194:	755a      	strb	r2, [r3, #21]
 8010196:	2301      	movs	r3, #1
 8010198:	e035      	b.n	8010206 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	69ba      	ldr	r2, [r7, #24]
 801019e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	699b      	ldr	r3, [r3, #24]
 80101a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80101ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80101ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d901      	bls.n	80101ba <f_read+0x22a>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	699b      	ldr	r3, [r3, #24]
 80101c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101c8:	4413      	add	r3, r2
 80101ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101cc:	4619      	mov	r1, r3
 80101ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101d0:	f7fe f8c4 	bl	800e35c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80101d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d8:	4413      	add	r3, r2
 80101da:	627b      	str	r3, [r7, #36]	; 0x24
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	699a      	ldr	r2, [r3, #24]
 80101e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e2:	441a      	add	r2, r3
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	619a      	str	r2, [r3, #24]
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ee:	441a      	add	r2, r3
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	601a      	str	r2, [r3, #0]
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f47f af01 	bne.w	8010006 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3738      	adds	r7, #56	; 0x38
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b086      	sub	sp, #24
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f107 0208 	add.w	r2, r7, #8
 801021c:	4611      	mov	r1, r2
 801021e:	4618      	mov	r0, r3
 8010220:	f7ff fc7c 	bl	800fb1c <validate>
 8010224:	4603      	mov	r3, r0
 8010226:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010228:	7dfb      	ldrb	r3, [r7, #23]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d168      	bne.n	8010300 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	7d1b      	ldrb	r3, [r3, #20]
 8010232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010236:	2b00      	cmp	r3, #0
 8010238:	d062      	beq.n	8010300 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	7d1b      	ldrb	r3, [r3, #20]
 801023e:	b25b      	sxtb	r3, r3
 8010240:	2b00      	cmp	r3, #0
 8010242:	da15      	bge.n	8010270 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	7858      	ldrb	r0, [r3, #1]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6a1a      	ldr	r2, [r3, #32]
 8010252:	2301      	movs	r3, #1
 8010254:	f7fd ffc2 	bl	800e1dc <disk_write>
 8010258:	4603      	mov	r3, r0
 801025a:	2b00      	cmp	r3, #0
 801025c:	d001      	beq.n	8010262 <f_sync+0x54>
 801025e:	2301      	movs	r3, #1
 8010260:	e04f      	b.n	8010302 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	7d1b      	ldrb	r3, [r3, #20]
 8010266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801026a:	b2da      	uxtb	r2, r3
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010270:	f7fb fece 	bl	800c010 <get_fattime>
 8010274:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010276:	68ba      	ldr	r2, [r7, #8]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801027c:	4619      	mov	r1, r3
 801027e:	4610      	mov	r0, r2
 8010280:	f7fe fa9a 	bl	800e7b8 <move_window>
 8010284:	4603      	mov	r3, r0
 8010286:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010288:	7dfb      	ldrb	r3, [r7, #23]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d138      	bne.n	8010300 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010292:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	330b      	adds	r3, #11
 8010298:	781a      	ldrb	r2, [r3, #0]
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	330b      	adds	r3, #11
 801029e:	f042 0220 	orr.w	r2, r2, #32
 80102a2:	b2d2      	uxtb	r2, r2
 80102a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6818      	ldr	r0, [r3, #0]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	689b      	ldr	r3, [r3, #8]
 80102ae:	461a      	mov	r2, r3
 80102b0:	68f9      	ldr	r1, [r7, #12]
 80102b2:	f7fe ff9f 	bl	800f1f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	f103 021c 	add.w	r2, r3, #28
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	4619      	mov	r1, r3
 80102c2:	4610      	mov	r0, r2
 80102c4:	f7fe f81e 	bl	800e304 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	3316      	adds	r3, #22
 80102cc:	6939      	ldr	r1, [r7, #16]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fe f818 	bl	800e304 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	3312      	adds	r3, #18
 80102d8:	2100      	movs	r1, #0
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fd fff7 	bl	800e2ce <st_word>
					fs->wflag = 1;
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	2201      	movs	r2, #1
 80102e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fe fa93 	bl	800e814 <sync_fs>
 80102ee:	4603      	mov	r3, r0
 80102f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	7d1b      	ldrb	r3, [r3, #20]
 80102f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102fa:	b2da      	uxtb	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010300:	7dfb      	ldrb	r3, [r7, #23]
}
 8010302:	4618      	mov	r0, r3
 8010304:	3718      	adds	r7, #24
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}

0801030a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801030a:	b580      	push	{r7, lr}
 801030c:	b084      	sub	sp, #16
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f7ff ff7b 	bl	801020e <f_sync>
 8010318:	4603      	mov	r3, r0
 801031a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801031c:	7bfb      	ldrb	r3, [r7, #15]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d118      	bne.n	8010354 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f107 0208 	add.w	r2, r7, #8
 8010328:	4611      	mov	r1, r2
 801032a:	4618      	mov	r0, r3
 801032c:	f7ff fbf6 	bl	800fb1c <validate>
 8010330:	4603      	mov	r3, r0
 8010332:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010334:	7bfb      	ldrb	r3, [r7, #15]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d10c      	bne.n	8010354 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	4618      	mov	r0, r3
 8010340:	f7fe f996 	bl	800e670 <dec_lock>
 8010344:	4603      	mov	r3, r0
 8010346:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010348:	7bfb      	ldrb	r3, [r7, #15]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d102      	bne.n	8010354 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2200      	movs	r2, #0
 8010352:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010354:	7bfb      	ldrb	r3, [r7, #15]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}

0801035e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801035e:	b580      	push	{r7, lr}
 8010360:	b090      	sub	sp, #64	; 0x40
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
 8010366:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f107 0208 	add.w	r2, r7, #8
 801036e:	4611      	mov	r1, r2
 8010370:	4618      	mov	r0, r3
 8010372:	f7ff fbd3 	bl	800fb1c <validate>
 8010376:	4603      	mov	r3, r0
 8010378:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801037c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010380:	2b00      	cmp	r3, #0
 8010382:	d103      	bne.n	801038c <f_lseek+0x2e>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	7d5b      	ldrb	r3, [r3, #21]
 8010388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801038c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010390:	2b00      	cmp	r3, #0
 8010392:	d002      	beq.n	801039a <f_lseek+0x3c>
 8010394:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010398:	e1e6      	b.n	8010768 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f000 80d1 	beq.w	8010546 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103aa:	d15a      	bne.n	8010462 <f_lseek+0x104>
			tbl = fp->cltbl;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80103b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b4:	1d1a      	adds	r2, r3, #4
 80103b6:	627a      	str	r2, [r7, #36]	; 0x24
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	617b      	str	r3, [r7, #20]
 80103bc:	2302      	movs	r3, #2
 80103be:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80103c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d03a      	beq.n	8010442 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80103cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ce:	613b      	str	r3, [r7, #16]
 80103d0:	2300      	movs	r3, #0
 80103d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d6:	3302      	adds	r3, #2
 80103d8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80103da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103dc:	60fb      	str	r3, [r7, #12]
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e0:	3301      	adds	r3, #1
 80103e2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fe faa0 	bl	800e92e <get_fat>
 80103ee:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80103f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	d804      	bhi.n	8010400 <f_lseek+0xa2>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2202      	movs	r2, #2
 80103fa:	755a      	strb	r2, [r3, #21]
 80103fc:	2302      	movs	r3, #2
 80103fe:	e1b3      	b.n	8010768 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010406:	d104      	bne.n	8010412 <f_lseek+0xb4>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2201      	movs	r2, #1
 801040c:	755a      	strb	r2, [r3, #21]
 801040e:	2301      	movs	r3, #1
 8010410:	e1aa      	b.n	8010768 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	3301      	adds	r3, #1
 8010416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010418:	429a      	cmp	r2, r3
 801041a:	d0de      	beq.n	80103da <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801041c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	429a      	cmp	r2, r3
 8010422:	d809      	bhi.n	8010438 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010426:	1d1a      	adds	r2, r3, #4
 8010428:	627a      	str	r2, [r7, #36]	; 0x24
 801042a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801042c:	601a      	str	r2, [r3, #0]
 801042e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010430:	1d1a      	adds	r2, r3, #4
 8010432:	627a      	str	r2, [r7, #36]	; 0x24
 8010434:	693a      	ldr	r2, [r7, #16]
 8010436:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	695b      	ldr	r3, [r3, #20]
 801043c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801043e:	429a      	cmp	r2, r3
 8010440:	d3c4      	bcc.n	80103cc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010448:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801044a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	429a      	cmp	r2, r3
 8010450:	d803      	bhi.n	801045a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010454:	2200      	movs	r2, #0
 8010456:	601a      	str	r2, [r3, #0]
 8010458:	e184      	b.n	8010764 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801045a:	2311      	movs	r3, #17
 801045c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010460:	e180      	b.n	8010764 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	683a      	ldr	r2, [r7, #0]
 8010468:	429a      	cmp	r2, r3
 801046a:	d902      	bls.n	8010472 <f_lseek+0x114>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	683a      	ldr	r2, [r7, #0]
 8010476:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	f000 8172 	beq.w	8010764 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	3b01      	subs	r3, #1
 8010484:	4619      	mov	r1, r3
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f7fe fcda 	bl	800ee40 <clmt_clust>
 801048c:	4602      	mov	r2, r0
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010492:	68ba      	ldr	r2, [r7, #8]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	69db      	ldr	r3, [r3, #28]
 8010498:	4619      	mov	r1, r3
 801049a:	4610      	mov	r0, r2
 801049c:	f7fe fa28 	bl	800e8f0 <clust2sect>
 80104a0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d104      	bne.n	80104b2 <f_lseek+0x154>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2202      	movs	r2, #2
 80104ac:	755a      	strb	r2, [r3, #21]
 80104ae:	2302      	movs	r3, #2
 80104b0:	e15a      	b.n	8010768 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	3b01      	subs	r3, #1
 80104b6:	0a5b      	lsrs	r3, r3, #9
 80104b8:	68ba      	ldr	r2, [r7, #8]
 80104ba:	8952      	ldrh	r2, [r2, #10]
 80104bc:	3a01      	subs	r2, #1
 80104be:	4013      	ands	r3, r2
 80104c0:	69ba      	ldr	r2, [r7, #24]
 80104c2:	4413      	add	r3, r2
 80104c4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	699b      	ldr	r3, [r3, #24]
 80104ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f000 8148 	beq.w	8010764 <f_lseek+0x406>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6a1b      	ldr	r3, [r3, #32]
 80104d8:	69ba      	ldr	r2, [r7, #24]
 80104da:	429a      	cmp	r2, r3
 80104dc:	f000 8142 	beq.w	8010764 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	7d1b      	ldrb	r3, [r3, #20]
 80104e4:	b25b      	sxtb	r3, r3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	da18      	bge.n	801051c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	7858      	ldrb	r0, [r3, #1]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6a1a      	ldr	r2, [r3, #32]
 80104f8:	2301      	movs	r3, #1
 80104fa:	f7fd fe6f 	bl	800e1dc <disk_write>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d004      	beq.n	801050e <f_lseek+0x1b0>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2201      	movs	r2, #1
 8010508:	755a      	strb	r2, [r3, #21]
 801050a:	2301      	movs	r3, #1
 801050c:	e12c      	b.n	8010768 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	7d1b      	ldrb	r3, [r3, #20]
 8010512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010516:	b2da      	uxtb	r2, r3
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	7858      	ldrb	r0, [r3, #1]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010526:	2301      	movs	r3, #1
 8010528:	69ba      	ldr	r2, [r7, #24]
 801052a:	f7fd fe37 	bl	800e19c <disk_read>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d004      	beq.n	801053e <f_lseek+0x1e0>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2201      	movs	r2, #1
 8010538:	755a      	strb	r2, [r3, #21]
 801053a:	2301      	movs	r3, #1
 801053c:	e114      	b.n	8010768 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	69ba      	ldr	r2, [r7, #24]
 8010542:	621a      	str	r2, [r3, #32]
 8010544:	e10e      	b.n	8010764 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	68db      	ldr	r3, [r3, #12]
 801054a:	683a      	ldr	r2, [r7, #0]
 801054c:	429a      	cmp	r2, r3
 801054e:	d908      	bls.n	8010562 <f_lseek+0x204>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	7d1b      	ldrb	r3, [r3, #20]
 8010554:	f003 0302 	and.w	r3, r3, #2
 8010558:	2b00      	cmp	r3, #0
 801055a:	d102      	bne.n	8010562 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	699b      	ldr	r3, [r3, #24]
 8010566:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	637b      	str	r3, [r7, #52]	; 0x34
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010570:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	2b00      	cmp	r3, #0
 8010576:	f000 80a7 	beq.w	80106c8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	895b      	ldrh	r3, [r3, #10]
 801057e:	025b      	lsls	r3, r3, #9
 8010580:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010582:	6a3b      	ldr	r3, [r7, #32]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d01b      	beq.n	80105c0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	1e5a      	subs	r2, r3, #1
 801058c:	69fb      	ldr	r3, [r7, #28]
 801058e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010592:	6a3b      	ldr	r3, [r7, #32]
 8010594:	1e59      	subs	r1, r3, #1
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801059c:	429a      	cmp	r2, r3
 801059e:	d30f      	bcc.n	80105c0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80105a0:	6a3b      	ldr	r3, [r7, #32]
 80105a2:	1e5a      	subs	r2, r3, #1
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	425b      	negs	r3, r3
 80105a8:	401a      	ands	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	699b      	ldr	r3, [r3, #24]
 80105b2:	683a      	ldr	r2, [r7, #0]
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	69db      	ldr	r3, [r3, #28]
 80105bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80105be:	e022      	b.n	8010606 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80105c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d119      	bne.n	8010600 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2100      	movs	r1, #0
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fe fb9d 	bl	800ed10 <create_chain>
 80105d6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80105d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d104      	bne.n	80105e8 <f_lseek+0x28a>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2202      	movs	r2, #2
 80105e2:	755a      	strb	r2, [r3, #21]
 80105e4:	2302      	movs	r3, #2
 80105e6:	e0bf      	b.n	8010768 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80105e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105ee:	d104      	bne.n	80105fa <f_lseek+0x29c>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2201      	movs	r2, #1
 80105f4:	755a      	strb	r2, [r3, #21]
 80105f6:	2301      	movs	r3, #1
 80105f8:	e0b6      	b.n	8010768 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105fe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010604:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010608:	2b00      	cmp	r3, #0
 801060a:	d05d      	beq.n	80106c8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801060c:	e03a      	b.n	8010684 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801060e:	683a      	ldr	r2, [r7, #0]
 8010610:	69fb      	ldr	r3, [r7, #28]
 8010612:	1ad3      	subs	r3, r2, r3
 8010614:	603b      	str	r3, [r7, #0]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	699a      	ldr	r2, [r3, #24]
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	441a      	add	r2, r3
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	7d1b      	ldrb	r3, [r3, #20]
 8010626:	f003 0302 	and.w	r3, r3, #2
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00b      	beq.n	8010646 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010632:	4618      	mov	r0, r3
 8010634:	f7fe fb6c 	bl	800ed10 <create_chain>
 8010638:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801063a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801063c:	2b00      	cmp	r3, #0
 801063e:	d108      	bne.n	8010652 <f_lseek+0x2f4>
							ofs = 0; break;
 8010640:	2300      	movs	r3, #0
 8010642:	603b      	str	r3, [r7, #0]
 8010644:	e022      	b.n	801068c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801064a:	4618      	mov	r0, r3
 801064c:	f7fe f96f 	bl	800e92e <get_fat>
 8010650:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010658:	d104      	bne.n	8010664 <f_lseek+0x306>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2201      	movs	r2, #1
 801065e:	755a      	strb	r2, [r3, #21]
 8010660:	2301      	movs	r3, #1
 8010662:	e081      	b.n	8010768 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010666:	2b01      	cmp	r3, #1
 8010668:	d904      	bls.n	8010674 <f_lseek+0x316>
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	695b      	ldr	r3, [r3, #20]
 801066e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010670:	429a      	cmp	r2, r3
 8010672:	d304      	bcc.n	801067e <f_lseek+0x320>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2202      	movs	r2, #2
 8010678:	755a      	strb	r2, [r3, #21]
 801067a:	2302      	movs	r3, #2
 801067c:	e074      	b.n	8010768 <f_lseek+0x40a>
					fp->clust = clst;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010682:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010684:	683a      	ldr	r2, [r7, #0]
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	429a      	cmp	r2, r3
 801068a:	d8c0      	bhi.n	801060e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	699a      	ldr	r2, [r3, #24]
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	441a      	add	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d012      	beq.n	80106c8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fe f922 	bl	800e8f0 <clust2sect>
 80106ac:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80106ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d104      	bne.n	80106be <f_lseek+0x360>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2202      	movs	r2, #2
 80106b8:	755a      	strb	r2, [r3, #21]
 80106ba:	2302      	movs	r3, #2
 80106bc:	e054      	b.n	8010768 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	0a5b      	lsrs	r3, r3, #9
 80106c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106c4:	4413      	add	r3, r2
 80106c6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	699a      	ldr	r2, [r3, #24]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	68db      	ldr	r3, [r3, #12]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d90a      	bls.n	80106ea <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	699a      	ldr	r2, [r3, #24]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	7d1b      	ldrb	r3, [r3, #20]
 80106e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106e4:	b2da      	uxtb	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	699b      	ldr	r3, [r3, #24]
 80106ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d036      	beq.n	8010764 <f_lseek+0x406>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6a1b      	ldr	r3, [r3, #32]
 80106fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d031      	beq.n	8010764 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	7d1b      	ldrb	r3, [r3, #20]
 8010704:	b25b      	sxtb	r3, r3
 8010706:	2b00      	cmp	r3, #0
 8010708:	da18      	bge.n	801073c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	7858      	ldrb	r0, [r3, #1]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6a1a      	ldr	r2, [r3, #32]
 8010718:	2301      	movs	r3, #1
 801071a:	f7fd fd5f 	bl	800e1dc <disk_write>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d004      	beq.n	801072e <f_lseek+0x3d0>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2201      	movs	r2, #1
 8010728:	755a      	strb	r2, [r3, #21]
 801072a:	2301      	movs	r3, #1
 801072c:	e01c      	b.n	8010768 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	7d1b      	ldrb	r3, [r3, #20]
 8010732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010736:	b2da      	uxtb	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	7858      	ldrb	r0, [r3, #1]
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010746:	2301      	movs	r3, #1
 8010748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801074a:	f7fd fd27 	bl	800e19c <disk_read>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d004      	beq.n	801075e <f_lseek+0x400>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2201      	movs	r2, #1
 8010758:	755a      	strb	r2, [r3, #21]
 801075a:	2301      	movs	r3, #1
 801075c:	e004      	b.n	8010768 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010762:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010764:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010768:	4618      	mov	r0, r3
 801076a:	3740      	adds	r7, #64	; 0x40
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b088      	sub	sp, #32
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
	int n = 0;
 801077c:	2300      	movs	r3, #0
 801077e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010784:	e01b      	b.n	80107be <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010786:	f107 0310 	add.w	r3, r7, #16
 801078a:	f107 0114 	add.w	r1, r7, #20
 801078e:	2201      	movs	r2, #1
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f7ff fbfd 	bl	800ff90 <f_read>
		if (rc != 1) break;
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	2b01      	cmp	r3, #1
 801079a:	d116      	bne.n	80107ca <f_gets+0x5a>
		c = s[0];
 801079c:	7d3b      	ldrb	r3, [r7, #20]
 801079e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80107a0:	7dfb      	ldrb	r3, [r7, #23]
 80107a2:	2b0d      	cmp	r3, #13
 80107a4:	d100      	bne.n	80107a8 <f_gets+0x38>
 80107a6:	e00a      	b.n	80107be <f_gets+0x4e>
		*p++ = c;
 80107a8:	69bb      	ldr	r3, [r7, #24]
 80107aa:	1c5a      	adds	r2, r3, #1
 80107ac:	61ba      	str	r2, [r7, #24]
 80107ae:	7dfa      	ldrb	r2, [r7, #23]
 80107b0:	701a      	strb	r2, [r3, #0]
		n++;
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	3301      	adds	r3, #1
 80107b6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80107b8:	7dfb      	ldrb	r3, [r7, #23]
 80107ba:	2b0a      	cmp	r3, #10
 80107bc:	d007      	beq.n	80107ce <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	3b01      	subs	r3, #1
 80107c2:	69fa      	ldr	r2, [r7, #28]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	dbde      	blt.n	8010786 <f_gets+0x16>
 80107c8:	e002      	b.n	80107d0 <f_gets+0x60>
		if (rc != 1) break;
 80107ca:	bf00      	nop
 80107cc:	e000      	b.n	80107d0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80107ce:	bf00      	nop
	}
	*p = 0;
 80107d0:	69bb      	ldr	r3, [r7, #24]
 80107d2:	2200      	movs	r2, #0
 80107d4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80107d6:	69fb      	ldr	r3, [r7, #28]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d001      	beq.n	80107e0 <f_gets+0x70>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	e000      	b.n	80107e2 <f_gets+0x72>
 80107e0:	2300      	movs	r3, #0
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3720      	adds	r7, #32
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
	...

080107ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b087      	sub	sp, #28
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	4613      	mov	r3, r2
 80107f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80107fa:	2301      	movs	r3, #1
 80107fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80107fe:	2300      	movs	r3, #0
 8010800:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010802:	4b1f      	ldr	r3, [pc, #124]	; (8010880 <FATFS_LinkDriverEx+0x94>)
 8010804:	7a5b      	ldrb	r3, [r3, #9]
 8010806:	b2db      	uxtb	r3, r3
 8010808:	2b00      	cmp	r3, #0
 801080a:	d131      	bne.n	8010870 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801080c:	4b1c      	ldr	r3, [pc, #112]	; (8010880 <FATFS_LinkDriverEx+0x94>)
 801080e:	7a5b      	ldrb	r3, [r3, #9]
 8010810:	b2db      	uxtb	r3, r3
 8010812:	461a      	mov	r2, r3
 8010814:	4b1a      	ldr	r3, [pc, #104]	; (8010880 <FATFS_LinkDriverEx+0x94>)
 8010816:	2100      	movs	r1, #0
 8010818:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801081a:	4b19      	ldr	r3, [pc, #100]	; (8010880 <FATFS_LinkDriverEx+0x94>)
 801081c:	7a5b      	ldrb	r3, [r3, #9]
 801081e:	b2db      	uxtb	r3, r3
 8010820:	4a17      	ldr	r2, [pc, #92]	; (8010880 <FATFS_LinkDriverEx+0x94>)
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	4413      	add	r3, r2
 8010826:	68fa      	ldr	r2, [r7, #12]
 8010828:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801082a:	4b15      	ldr	r3, [pc, #84]	; (8010880 <FATFS_LinkDriverEx+0x94>)
 801082c:	7a5b      	ldrb	r3, [r3, #9]
 801082e:	b2db      	uxtb	r3, r3
 8010830:	461a      	mov	r2, r3
 8010832:	4b13      	ldr	r3, [pc, #76]	; (8010880 <FATFS_LinkDriverEx+0x94>)
 8010834:	4413      	add	r3, r2
 8010836:	79fa      	ldrb	r2, [r7, #7]
 8010838:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801083a:	4b11      	ldr	r3, [pc, #68]	; (8010880 <FATFS_LinkDriverEx+0x94>)
 801083c:	7a5b      	ldrb	r3, [r3, #9]
 801083e:	b2db      	uxtb	r3, r3
 8010840:	1c5a      	adds	r2, r3, #1
 8010842:	b2d1      	uxtb	r1, r2
 8010844:	4a0e      	ldr	r2, [pc, #56]	; (8010880 <FATFS_LinkDriverEx+0x94>)
 8010846:	7251      	strb	r1, [r2, #9]
 8010848:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801084a:	7dbb      	ldrb	r3, [r7, #22]
 801084c:	3330      	adds	r3, #48	; 0x30
 801084e:	b2da      	uxtb	r2, r3
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	3301      	adds	r3, #1
 8010858:	223a      	movs	r2, #58	; 0x3a
 801085a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	3302      	adds	r3, #2
 8010860:	222f      	movs	r2, #47	; 0x2f
 8010862:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	3303      	adds	r3, #3
 8010868:	2200      	movs	r2, #0
 801086a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801086c:	2300      	movs	r3, #0
 801086e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010870:	7dfb      	ldrb	r3, [r7, #23]
}
 8010872:	4618      	mov	r0, r3
 8010874:	371c      	adds	r7, #28
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr
 801087e:	bf00      	nop
 8010880:	200003d0 	.word	0x200003d0

08010884 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801088e:	2200      	movs	r2, #0
 8010890:	6839      	ldr	r1, [r7, #0]
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f7ff ffaa 	bl	80107ec <FATFS_LinkDriverEx>
 8010898:	4603      	mov	r3, r0
}
 801089a:	4618      	mov	r0, r3
 801089c:	3708      	adds	r7, #8
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
	...

080108a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80108a8:	2200      	movs	r2, #0
 80108aa:	4912      	ldr	r1, [pc, #72]	; (80108f4 <MX_USB_DEVICE_Init+0x50>)
 80108ac:	4812      	ldr	r0, [pc, #72]	; (80108f8 <MX_USB_DEVICE_Init+0x54>)
 80108ae:	f7fc fb78 	bl	800cfa2 <USBD_Init>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d001      	beq.n	80108bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80108b8:	f7f2 fda4 	bl	8003404 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80108bc:	490f      	ldr	r1, [pc, #60]	; (80108fc <MX_USB_DEVICE_Init+0x58>)
 80108be:	480e      	ldr	r0, [pc, #56]	; (80108f8 <MX_USB_DEVICE_Init+0x54>)
 80108c0:	f7fc fb9a 	bl	800cff8 <USBD_RegisterClass>
 80108c4:	4603      	mov	r3, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d001      	beq.n	80108ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80108ca:	f7f2 fd9b 	bl	8003404 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80108ce:	490c      	ldr	r1, [pc, #48]	; (8010900 <MX_USB_DEVICE_Init+0x5c>)
 80108d0:	4809      	ldr	r0, [pc, #36]	; (80108f8 <MX_USB_DEVICE_Init+0x54>)
 80108d2:	f7fc faf7 	bl	800cec4 <USBD_CDC_RegisterInterface>
 80108d6:	4603      	mov	r3, r0
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d001      	beq.n	80108e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80108dc:	f7f2 fd92 	bl	8003404 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80108e0:	4805      	ldr	r0, [pc, #20]	; (80108f8 <MX_USB_DEVICE_Init+0x54>)
 80108e2:	f7fc fba3 	bl	800d02c <USBD_Start>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d001      	beq.n	80108f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80108ec:	f7f2 fd8a 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80108f0:	bf00      	nop
 80108f2:	bd80      	pop	{r7, pc}
 80108f4:	20000150 	.word	0x20000150
 80108f8:	20001710 	.word	0x20001710
 80108fc:	2000003c 	.word	0x2000003c
 8010900:	20000140 	.word	0x20000140

08010904 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010908:	2200      	movs	r2, #0
 801090a:	4905      	ldr	r1, [pc, #20]	; (8010920 <CDC_Init_FS+0x1c>)
 801090c:	4805      	ldr	r0, [pc, #20]	; (8010924 <CDC_Init_FS+0x20>)
 801090e:	f7fc faf0 	bl	800cef2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010912:	4905      	ldr	r1, [pc, #20]	; (8010928 <CDC_Init_FS+0x24>)
 8010914:	4803      	ldr	r0, [pc, #12]	; (8010924 <CDC_Init_FS+0x20>)
 8010916:	f7fc fb06 	bl	800cf26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801091a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801091c:	4618      	mov	r0, r3
 801091e:	bd80      	pop	{r7, pc}
 8010920:	20001dbc 	.word	0x20001dbc
 8010924:	20001710 	.word	0x20001710
 8010928:	200019d4 	.word	0x200019d4

0801092c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801092c:	b480      	push	{r7}
 801092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010930:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010932:	4618      	mov	r0, r3
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	4603      	mov	r3, r0
 8010944:	6039      	str	r1, [r7, #0]
 8010946:	71fb      	strb	r3, [r7, #7]
 8010948:	4613      	mov	r3, r2
 801094a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801094c:	79fb      	ldrb	r3, [r7, #7]
 801094e:	2b23      	cmp	r3, #35	; 0x23
 8010950:	d84a      	bhi.n	80109e8 <CDC_Control_FS+0xac>
 8010952:	a201      	add	r2, pc, #4	; (adr r2, 8010958 <CDC_Control_FS+0x1c>)
 8010954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010958:	080109e9 	.word	0x080109e9
 801095c:	080109e9 	.word	0x080109e9
 8010960:	080109e9 	.word	0x080109e9
 8010964:	080109e9 	.word	0x080109e9
 8010968:	080109e9 	.word	0x080109e9
 801096c:	080109e9 	.word	0x080109e9
 8010970:	080109e9 	.word	0x080109e9
 8010974:	080109e9 	.word	0x080109e9
 8010978:	080109e9 	.word	0x080109e9
 801097c:	080109e9 	.word	0x080109e9
 8010980:	080109e9 	.word	0x080109e9
 8010984:	080109e9 	.word	0x080109e9
 8010988:	080109e9 	.word	0x080109e9
 801098c:	080109e9 	.word	0x080109e9
 8010990:	080109e9 	.word	0x080109e9
 8010994:	080109e9 	.word	0x080109e9
 8010998:	080109e9 	.word	0x080109e9
 801099c:	080109e9 	.word	0x080109e9
 80109a0:	080109e9 	.word	0x080109e9
 80109a4:	080109e9 	.word	0x080109e9
 80109a8:	080109e9 	.word	0x080109e9
 80109ac:	080109e9 	.word	0x080109e9
 80109b0:	080109e9 	.word	0x080109e9
 80109b4:	080109e9 	.word	0x080109e9
 80109b8:	080109e9 	.word	0x080109e9
 80109bc:	080109e9 	.word	0x080109e9
 80109c0:	080109e9 	.word	0x080109e9
 80109c4:	080109e9 	.word	0x080109e9
 80109c8:	080109e9 	.word	0x080109e9
 80109cc:	080109e9 	.word	0x080109e9
 80109d0:	080109e9 	.word	0x080109e9
 80109d4:	080109e9 	.word	0x080109e9
 80109d8:	080109e9 	.word	0x080109e9
 80109dc:	080109e9 	.word	0x080109e9
 80109e0:	080109e9 	.word	0x080109e9
 80109e4:	080109e9 	.word	0x080109e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80109e8:	bf00      	nop
  }

  return (USBD_OK);
 80109ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	370c      	adds	r7, #12
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr

080109f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010a02:	6879      	ldr	r1, [r7, #4]
 8010a04:	4805      	ldr	r0, [pc, #20]	; (8010a1c <CDC_Receive_FS+0x24>)
 8010a06:	f7fc fa8e 	bl	800cf26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010a0a:	4804      	ldr	r0, [pc, #16]	; (8010a1c <CDC_Receive_FS+0x24>)
 8010a0c:	f7fc fa9f 	bl	800cf4e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010a10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	20001710 	.word	0x20001710

08010a20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	4603      	mov	r3, r0
 8010a28:	6039      	str	r1, [r7, #0]
 8010a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	2212      	movs	r2, #18
 8010a30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a32:	4b03      	ldr	r3, [pc, #12]	; (8010a40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	370c      	adds	r7, #12
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr
 8010a40:	20000170 	.word	0x20000170

08010a44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	6039      	str	r1, [r7, #0]
 8010a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	2204      	movs	r2, #4
 8010a54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010a56:	4b03      	ldr	r3, [pc, #12]	; (8010a64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr
 8010a64:	20000190 	.word	0x20000190

08010a68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	6039      	str	r1, [r7, #0]
 8010a72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a74:	79fb      	ldrb	r3, [r7, #7]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d105      	bne.n	8010a86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a7a:	683a      	ldr	r2, [r7, #0]
 8010a7c:	4907      	ldr	r1, [pc, #28]	; (8010a9c <USBD_FS_ProductStrDescriptor+0x34>)
 8010a7e:	4808      	ldr	r0, [pc, #32]	; (8010aa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a80:	f7fd fa6e 	bl	800df60 <USBD_GetString>
 8010a84:	e004      	b.n	8010a90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a86:	683a      	ldr	r2, [r7, #0]
 8010a88:	4904      	ldr	r1, [pc, #16]	; (8010a9c <USBD_FS_ProductStrDescriptor+0x34>)
 8010a8a:	4805      	ldr	r0, [pc, #20]	; (8010aa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a8c:	f7fd fa68 	bl	800df60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a90:	4b02      	ldr	r3, [pc, #8]	; (8010a9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3708      	adds	r7, #8
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	200021a4 	.word	0x200021a4
 8010aa0:	08015088 	.word	0x08015088

08010aa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	4603      	mov	r3, r0
 8010aac:	6039      	str	r1, [r7, #0]
 8010aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ab0:	683a      	ldr	r2, [r7, #0]
 8010ab2:	4904      	ldr	r1, [pc, #16]	; (8010ac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010ab4:	4804      	ldr	r0, [pc, #16]	; (8010ac8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010ab6:	f7fd fa53 	bl	800df60 <USBD_GetString>
  return USBD_StrDesc;
 8010aba:	4b02      	ldr	r3, [pc, #8]	; (8010ac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	200021a4 	.word	0x200021a4
 8010ac8:	080150a0 	.word	0x080150a0

08010acc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	6039      	str	r1, [r7, #0]
 8010ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	221a      	movs	r2, #26
 8010adc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010ade:	f000 f855 	bl	8010b8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010ae2:	4b02      	ldr	r3, [pc, #8]	; (8010aec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	20000194 	.word	0x20000194

08010af0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	4603      	mov	r3, r0
 8010af8:	6039      	str	r1, [r7, #0]
 8010afa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010afc:	79fb      	ldrb	r3, [r7, #7]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d105      	bne.n	8010b0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b02:	683a      	ldr	r2, [r7, #0]
 8010b04:	4907      	ldr	r1, [pc, #28]	; (8010b24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b06:	4808      	ldr	r0, [pc, #32]	; (8010b28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b08:	f7fd fa2a 	bl	800df60 <USBD_GetString>
 8010b0c:	e004      	b.n	8010b18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b0e:	683a      	ldr	r2, [r7, #0]
 8010b10:	4904      	ldr	r1, [pc, #16]	; (8010b24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b12:	4805      	ldr	r0, [pc, #20]	; (8010b28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b14:	f7fd fa24 	bl	800df60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b18:	4b02      	ldr	r3, [pc, #8]	; (8010b24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3708      	adds	r7, #8
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	200021a4 	.word	0x200021a4
 8010b28:	080150b4 	.word	0x080150b4

08010b2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	4603      	mov	r3, r0
 8010b34:	6039      	str	r1, [r7, #0]
 8010b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b38:	79fb      	ldrb	r3, [r7, #7]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d105      	bne.n	8010b4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	4907      	ldr	r1, [pc, #28]	; (8010b60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b42:	4808      	ldr	r0, [pc, #32]	; (8010b64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b44:	f7fd fa0c 	bl	800df60 <USBD_GetString>
 8010b48:	e004      	b.n	8010b54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b4a:	683a      	ldr	r2, [r7, #0]
 8010b4c:	4904      	ldr	r1, [pc, #16]	; (8010b60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b4e:	4805      	ldr	r0, [pc, #20]	; (8010b64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b50:	f7fd fa06 	bl	800df60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b54:	4b02      	ldr	r3, [pc, #8]	; (8010b60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3708      	adds	r7, #8
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	200021a4 	.word	0x200021a4
 8010b64:	080150c0 	.word	0x080150c0

08010b68 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	4603      	mov	r3, r0
 8010b70:	6039      	str	r1, [r7, #0]
 8010b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	220c      	movs	r2, #12
 8010b78:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010b7a:	4b03      	ldr	r3, [pc, #12]	; (8010b88 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	370c      	adds	r7, #12
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr
 8010b88:	20000184 	.word	0x20000184

08010b8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b084      	sub	sp, #16
 8010b90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010b92:	4b0f      	ldr	r3, [pc, #60]	; (8010bd0 <Get_SerialNum+0x44>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010b98:	4b0e      	ldr	r3, [pc, #56]	; (8010bd4 <Get_SerialNum+0x48>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010b9e:	4b0e      	ldr	r3, [pc, #56]	; (8010bd8 <Get_SerialNum+0x4c>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	4413      	add	r3, r2
 8010baa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d009      	beq.n	8010bc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010bb2:	2208      	movs	r2, #8
 8010bb4:	4909      	ldr	r1, [pc, #36]	; (8010bdc <Get_SerialNum+0x50>)
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f000 f814 	bl	8010be4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010bbc:	2204      	movs	r2, #4
 8010bbe:	4908      	ldr	r1, [pc, #32]	; (8010be0 <Get_SerialNum+0x54>)
 8010bc0:	68b8      	ldr	r0, [r7, #8]
 8010bc2:	f000 f80f 	bl	8010be4 <IntToUnicode>
  }
}
 8010bc6:	bf00      	nop
 8010bc8:	3710      	adds	r7, #16
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	1fff7590 	.word	0x1fff7590
 8010bd4:	1fff7594 	.word	0x1fff7594
 8010bd8:	1fff7598 	.word	0x1fff7598
 8010bdc:	20000196 	.word	0x20000196
 8010be0:	200001a6 	.word	0x200001a6

08010be4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b087      	sub	sp, #28
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	60b9      	str	r1, [r7, #8]
 8010bee:	4613      	mov	r3, r2
 8010bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	75fb      	strb	r3, [r7, #23]
 8010bfa:	e027      	b.n	8010c4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	0f1b      	lsrs	r3, r3, #28
 8010c00:	2b09      	cmp	r3, #9
 8010c02:	d80b      	bhi.n	8010c1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	0f1b      	lsrs	r3, r3, #28
 8010c08:	b2da      	uxtb	r2, r3
 8010c0a:	7dfb      	ldrb	r3, [r7, #23]
 8010c0c:	005b      	lsls	r3, r3, #1
 8010c0e:	4619      	mov	r1, r3
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	440b      	add	r3, r1
 8010c14:	3230      	adds	r2, #48	; 0x30
 8010c16:	b2d2      	uxtb	r2, r2
 8010c18:	701a      	strb	r2, [r3, #0]
 8010c1a:	e00a      	b.n	8010c32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	0f1b      	lsrs	r3, r3, #28
 8010c20:	b2da      	uxtb	r2, r3
 8010c22:	7dfb      	ldrb	r3, [r7, #23]
 8010c24:	005b      	lsls	r3, r3, #1
 8010c26:	4619      	mov	r1, r3
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	440b      	add	r3, r1
 8010c2c:	3237      	adds	r2, #55	; 0x37
 8010c2e:	b2d2      	uxtb	r2, r2
 8010c30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	011b      	lsls	r3, r3, #4
 8010c36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010c38:	7dfb      	ldrb	r3, [r7, #23]
 8010c3a:	005b      	lsls	r3, r3, #1
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	68ba      	ldr	r2, [r7, #8]
 8010c40:	4413      	add	r3, r2
 8010c42:	2200      	movs	r2, #0
 8010c44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c46:	7dfb      	ldrb	r3, [r7, #23]
 8010c48:	3301      	adds	r3, #1
 8010c4a:	75fb      	strb	r3, [r7, #23]
 8010c4c:	7dfa      	ldrb	r2, [r7, #23]
 8010c4e:	79fb      	ldrb	r3, [r7, #7]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d3d3      	bcc.n	8010bfc <IntToUnicode+0x18>
  }
}
 8010c54:	bf00      	nop
 8010c56:	371c      	adds	r7, #28
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b084      	sub	sp, #16
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	4a0d      	ldr	r2, [pc, #52]	; (8010ca4 <HAL_PCD_MspInit+0x44>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d113      	bne.n	8010c9a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010c72:	4b0d      	ldr	r3, [pc, #52]	; (8010ca8 <HAL_PCD_MspInit+0x48>)
 8010c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c76:	4a0c      	ldr	r2, [pc, #48]	; (8010ca8 <HAL_PCD_MspInit+0x48>)
 8010c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8010c7e:	4b0a      	ldr	r3, [pc, #40]	; (8010ca8 <HAL_PCD_MspInit+0x48>)
 8010c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010c86:	60fb      	str	r3, [r7, #12]
 8010c88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	2100      	movs	r1, #0
 8010c8e:	2043      	movs	r0, #67	; 0x43
 8010c90:	f7f4 f835 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8010c94:	2043      	movs	r0, #67	; 0x43
 8010c96:	f7f4 f84e 	bl	8004d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010c9a:	bf00      	nop
 8010c9c:	3710      	adds	r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	40006800 	.word	0x40006800
 8010ca8:	40021000 	.word	0x40021000

08010cac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	4610      	mov	r0, r2
 8010cc4:	f7fc f9fb 	bl	800d0be <USBD_LL_SetupStage>
}
 8010cc8:	bf00      	nop
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8010ce2:	78fb      	ldrb	r3, [r7, #3]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	015b      	lsls	r3, r3, #5
 8010ce8:	4413      	add	r3, r2
 8010cea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	78fb      	ldrb	r3, [r7, #3]
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	f7fc fa2e 	bl	800d154 <USBD_LL_DataOutStage>
}
 8010cf8:	bf00      	nop
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	460b      	mov	r3, r1
 8010d0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8010d12:	78fb      	ldrb	r3, [r7, #3]
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	015b      	lsls	r3, r3, #5
 8010d18:	4413      	add	r3, r2
 8010d1a:	333c      	adds	r3, #60	; 0x3c
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	78fb      	ldrb	r3, [r7, #3]
 8010d20:	4619      	mov	r1, r3
 8010d22:	f7fc fa88 	bl	800d236 <USBD_LL_DataInStage>
}
 8010d26:	bf00      	nop
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b082      	sub	sp, #8
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fc fb9b 	bl	800d478 <USBD_LL_SOF>
}
 8010d42:	bf00      	nop
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}

08010d4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8010d4a:	b580      	push	{r7, lr}
 8010d4c:	b084      	sub	sp, #16
 8010d4e:	af00      	add	r7, sp, #0
 8010d50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010d52:	2301      	movs	r3, #1
 8010d54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	689b      	ldr	r3, [r3, #8]
 8010d5a:	2b02      	cmp	r3, #2
 8010d5c:	d001      	beq.n	8010d62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010d5e:	f7f2 fb51 	bl	8003404 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010d68:	7bfa      	ldrb	r2, [r7, #15]
 8010d6a:	4611      	mov	r1, r2
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7fc fb48 	bl	800d402 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fc fb01 	bl	800d380 <USBD_LL_Reset>
}
 8010d7e:	bf00      	nop
 8010d80:	3710      	adds	r7, #16
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
	...

08010d88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7fc fb43 	bl	800d422 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	699b      	ldr	r3, [r3, #24]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d005      	beq.n	8010db0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010da4:	4b04      	ldr	r3, [pc, #16]	; (8010db8 <HAL_PCD_SuspendCallback+0x30>)
 8010da6:	691b      	ldr	r3, [r3, #16]
 8010da8:	4a03      	ldr	r2, [pc, #12]	; (8010db8 <HAL_PCD_SuspendCallback+0x30>)
 8010daa:	f043 0306 	orr.w	r3, r3, #6
 8010dae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010db0:	bf00      	nop
 8010db2:	3708      	adds	r7, #8
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	e000ed00 	.word	0xe000ed00

08010dbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	699b      	ldr	r3, [r3, #24]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d007      	beq.n	8010ddc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010dcc:	4b08      	ldr	r3, [pc, #32]	; (8010df0 <HAL_PCD_ResumeCallback+0x34>)
 8010dce:	691b      	ldr	r3, [r3, #16]
 8010dd0:	4a07      	ldr	r2, [pc, #28]	; (8010df0 <HAL_PCD_ResumeCallback+0x34>)
 8010dd2:	f023 0306 	bic.w	r3, r3, #6
 8010dd6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010dd8:	f000 fab2 	bl	8011340 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7fc fb32 	bl	800d44c <USBD_LL_Resume>
}
 8010de8:	bf00      	nop
 8010dea:	3708      	adds	r7, #8
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	e000ed00 	.word	0xe000ed00

08010df4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8010dfc:	f7f6 fbb0 	bl	8007560 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8010e00:	4a2b      	ldr	r2, [pc, #172]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	4a29      	ldr	r2, [pc, #164]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8010e10:	4b27      	ldr	r3, [pc, #156]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e12:	4a28      	ldr	r2, [pc, #160]	; (8010eb4 <USBD_LL_Init+0xc0>)
 8010e14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010e16:	4b26      	ldr	r3, [pc, #152]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e18:	2208      	movs	r2, #8
 8010e1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010e1c:	4b24      	ldr	r3, [pc, #144]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e1e:	2202      	movs	r2, #2
 8010e20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010e22:	4b23      	ldr	r3, [pc, #140]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e24:	2202      	movs	r2, #2
 8010e26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010e28:	4b21      	ldr	r3, [pc, #132]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010e2e:	4b20      	ldr	r3, [pc, #128]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e30:	2200      	movs	r2, #0
 8010e32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010e34:	4b1e      	ldr	r3, [pc, #120]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e36:	2200      	movs	r2, #0
 8010e38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010e3a:	4b1d      	ldr	r3, [pc, #116]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010e40:	481b      	ldr	r0, [pc, #108]	; (8010eb0 <USBD_LL_Init+0xbc>)
 8010e42:	f7f5 fbd6 	bl	80065f2 <HAL_PCD_Init>
 8010e46:	4603      	mov	r3, r0
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d001      	beq.n	8010e50 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010e4c:	f7f2 fada 	bl	8003404 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010e56:	2318      	movs	r3, #24
 8010e58:	2200      	movs	r2, #0
 8010e5a:	2100      	movs	r1, #0
 8010e5c:	f7f6 faa4 	bl	80073a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010e66:	2358      	movs	r3, #88	; 0x58
 8010e68:	2200      	movs	r2, #0
 8010e6a:	2180      	movs	r1, #128	; 0x80
 8010e6c:	f7f6 fa9c 	bl	80073a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010e76:	23c0      	movs	r3, #192	; 0xc0
 8010e78:	2200      	movs	r2, #0
 8010e7a:	2181      	movs	r1, #129	; 0x81
 8010e7c:	f7f6 fa94 	bl	80073a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010e86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	2101      	movs	r1, #1
 8010e8e:	f7f6 fa8b 	bl	80073a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	2182      	movs	r1, #130	; 0x82
 8010ea0:	f7f6 fa82 	bl	80073a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010ea4:	2300      	movs	r3, #0
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3708      	adds	r7, #8
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	200023a4 	.word	0x200023a4
 8010eb4:	40006800 	.word	0x40006800

08010eb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b084      	sub	sp, #16
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7f5 fc77 	bl	80067c2 <HAL_PCD_Start>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8010ed8:	7bbb      	ldrb	r3, [r7, #14]
 8010eda:	2b03      	cmp	r3, #3
 8010edc:	d816      	bhi.n	8010f0c <USBD_LL_Start+0x54>
 8010ede:	a201      	add	r2, pc, #4	; (adr r2, 8010ee4 <USBD_LL_Start+0x2c>)
 8010ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ee4:	08010ef5 	.word	0x08010ef5
 8010ee8:	08010efb 	.word	0x08010efb
 8010eec:	08010f01 	.word	0x08010f01
 8010ef0:	08010f07 	.word	0x08010f07
    case HAL_OK :
      usb_status = USBD_OK;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ef8:	e00b      	b.n	8010f12 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010efa:	2302      	movs	r3, #2
 8010efc:	73fb      	strb	r3, [r7, #15]
    break;
 8010efe:	e008      	b.n	8010f12 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010f00:	2301      	movs	r3, #1
 8010f02:	73fb      	strb	r3, [r7, #15]
    break;
 8010f04:	e005      	b.n	8010f12 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010f06:	2302      	movs	r3, #2
 8010f08:	73fb      	strb	r3, [r7, #15]
    break;
 8010f0a:	e002      	b.n	8010f12 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8010f0c:	2302      	movs	r3, #2
 8010f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8010f10:	bf00      	nop
  }
  return usb_status;
 8010f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	4608      	mov	r0, r1
 8010f26:	4611      	mov	r1, r2
 8010f28:	461a      	mov	r2, r3
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	70fb      	strb	r3, [r7, #3]
 8010f2e:	460b      	mov	r3, r1
 8010f30:	70bb      	strb	r3, [r7, #2]
 8010f32:	4613      	mov	r3, r2
 8010f34:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f36:	2300      	movs	r3, #0
 8010f38:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010f44:	78bb      	ldrb	r3, [r7, #2]
 8010f46:	883a      	ldrh	r2, [r7, #0]
 8010f48:	78f9      	ldrb	r1, [r7, #3]
 8010f4a:	f7f5 fdcf 	bl	8006aec <HAL_PCD_EP_Open>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010f52:	7bbb      	ldrb	r3, [r7, #14]
 8010f54:	2b03      	cmp	r3, #3
 8010f56:	d817      	bhi.n	8010f88 <USBD_LL_OpenEP+0x6c>
 8010f58:	a201      	add	r2, pc, #4	; (adr r2, 8010f60 <USBD_LL_OpenEP+0x44>)
 8010f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f5e:	bf00      	nop
 8010f60:	08010f71 	.word	0x08010f71
 8010f64:	08010f77 	.word	0x08010f77
 8010f68:	08010f7d 	.word	0x08010f7d
 8010f6c:	08010f83 	.word	0x08010f83
    case HAL_OK :
      usb_status = USBD_OK;
 8010f70:	2300      	movs	r3, #0
 8010f72:	73fb      	strb	r3, [r7, #15]
    break;
 8010f74:	e00b      	b.n	8010f8e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010f76:	2302      	movs	r3, #2
 8010f78:	73fb      	strb	r3, [r7, #15]
    break;
 8010f7a:	e008      	b.n	8010f8e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8010f80:	e005      	b.n	8010f8e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010f82:	2302      	movs	r3, #2
 8010f84:	73fb      	strb	r3, [r7, #15]
    break;
 8010f86:	e002      	b.n	8010f8e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010f88:	2302      	movs	r3, #2
 8010f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8010f8c:	bf00      	nop
  }
  return usb_status;
 8010f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3710      	adds	r7, #16
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fb2:	78fa      	ldrb	r2, [r7, #3]
 8010fb4:	4611      	mov	r1, r2
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7f5 fdf8 	bl	8006bac <HAL_PCD_EP_Close>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8010fc0:	7bbb      	ldrb	r3, [r7, #14]
 8010fc2:	2b03      	cmp	r3, #3
 8010fc4:	d816      	bhi.n	8010ff4 <USBD_LL_CloseEP+0x5c>
 8010fc6:	a201      	add	r2, pc, #4	; (adr r2, 8010fcc <USBD_LL_CloseEP+0x34>)
 8010fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fcc:	08010fdd 	.word	0x08010fdd
 8010fd0:	08010fe3 	.word	0x08010fe3
 8010fd4:	08010fe9 	.word	0x08010fe9
 8010fd8:	08010fef 	.word	0x08010fef
    case HAL_OK :
      usb_status = USBD_OK;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	73fb      	strb	r3, [r7, #15]
    break;
 8010fe0:	e00b      	b.n	8010ffa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010fe2:	2302      	movs	r3, #2
 8010fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8010fe6:	e008      	b.n	8010ffa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010fe8:	2301      	movs	r3, #1
 8010fea:	73fb      	strb	r3, [r7, #15]
    break;
 8010fec:	e005      	b.n	8010ffa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010fee:	2302      	movs	r3, #2
 8010ff0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ff2:	e002      	b.n	8010ffa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010ff4:	2302      	movs	r3, #2
 8010ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ff8:	bf00      	nop
  }
  return usb_status;  
 8010ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	460b      	mov	r3, r1
 801100e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011010:	2300      	movs	r3, #0
 8011012:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011014:	2300      	movs	r3, #0
 8011016:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801101e:	78fa      	ldrb	r2, [r7, #3]
 8011020:	4611      	mov	r1, r2
 8011022:	4618      	mov	r0, r3
 8011024:	f7f5 fe8c 	bl	8006d40 <HAL_PCD_EP_SetStall>
 8011028:	4603      	mov	r3, r0
 801102a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801102c:	7bbb      	ldrb	r3, [r7, #14]
 801102e:	2b03      	cmp	r3, #3
 8011030:	d816      	bhi.n	8011060 <USBD_LL_StallEP+0x5c>
 8011032:	a201      	add	r2, pc, #4	; (adr r2, 8011038 <USBD_LL_StallEP+0x34>)
 8011034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011038:	08011049 	.word	0x08011049
 801103c:	0801104f 	.word	0x0801104f
 8011040:	08011055 	.word	0x08011055
 8011044:	0801105b 	.word	0x0801105b
    case HAL_OK :
      usb_status = USBD_OK;
 8011048:	2300      	movs	r3, #0
 801104a:	73fb      	strb	r3, [r7, #15]
    break;
 801104c:	e00b      	b.n	8011066 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801104e:	2302      	movs	r3, #2
 8011050:	73fb      	strb	r3, [r7, #15]
    break;
 8011052:	e008      	b.n	8011066 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011054:	2301      	movs	r3, #1
 8011056:	73fb      	strb	r3, [r7, #15]
    break;
 8011058:	e005      	b.n	8011066 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801105a:	2302      	movs	r3, #2
 801105c:	73fb      	strb	r3, [r7, #15]
    break;
 801105e:	e002      	b.n	8011066 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011060:	2302      	movs	r3, #2
 8011062:	73fb      	strb	r3, [r7, #15]
    break;
 8011064:	bf00      	nop
  }
  return usb_status;  
 8011066:	7bfb      	ldrb	r3, [r7, #15]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3710      	adds	r7, #16
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	460b      	mov	r3, r1
 801107a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011080:	2300      	movs	r3, #0
 8011082:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801108a:	78fa      	ldrb	r2, [r7, #3]
 801108c:	4611      	mov	r1, r2
 801108e:	4618      	mov	r0, r3
 8011090:	f7f5 feb0 	bl	8006df4 <HAL_PCD_EP_ClrStall>
 8011094:	4603      	mov	r3, r0
 8011096:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8011098:	7bbb      	ldrb	r3, [r7, #14]
 801109a:	2b03      	cmp	r3, #3
 801109c:	d816      	bhi.n	80110cc <USBD_LL_ClearStallEP+0x5c>
 801109e:	a201      	add	r2, pc, #4	; (adr r2, 80110a4 <USBD_LL_ClearStallEP+0x34>)
 80110a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a4:	080110b5 	.word	0x080110b5
 80110a8:	080110bb 	.word	0x080110bb
 80110ac:	080110c1 	.word	0x080110c1
 80110b0:	080110c7 	.word	0x080110c7
    case HAL_OK :
      usb_status = USBD_OK;
 80110b4:	2300      	movs	r3, #0
 80110b6:	73fb      	strb	r3, [r7, #15]
    break;
 80110b8:	e00b      	b.n	80110d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80110ba:	2302      	movs	r3, #2
 80110bc:	73fb      	strb	r3, [r7, #15]
    break;
 80110be:	e008      	b.n	80110d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80110c0:	2301      	movs	r3, #1
 80110c2:	73fb      	strb	r3, [r7, #15]
    break;
 80110c4:	e005      	b.n	80110d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80110c6:	2302      	movs	r3, #2
 80110c8:	73fb      	strb	r3, [r7, #15]
    break;
 80110ca:	e002      	b.n	80110d2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80110cc:	2302      	movs	r3, #2
 80110ce:	73fb      	strb	r3, [r7, #15]
    break;
 80110d0:	bf00      	nop
  }
  return usb_status; 
 80110d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3710      	adds	r7, #16
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	460b      	mov	r3, r1
 80110e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110ee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80110f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	da08      	bge.n	801110a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80110f8:	78fb      	ldrb	r3, [r7, #3]
 80110fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110fe:	68fa      	ldr	r2, [r7, #12]
 8011100:	015b      	lsls	r3, r3, #5
 8011102:	4413      	add	r3, r2
 8011104:	332a      	adds	r3, #42	; 0x2a
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	e008      	b.n	801111c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801110a:	78fb      	ldrb	r3, [r7, #3]
 801110c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011110:	68fa      	ldr	r2, [r7, #12]
 8011112:	015b      	lsls	r3, r3, #5
 8011114:	4413      	add	r3, r2
 8011116:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 801111a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801111c:	4618      	mov	r0, r3
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr

08011128 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	460b      	mov	r3, r1
 8011132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011134:	2300      	movs	r3, #0
 8011136:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011138:	2300      	movs	r3, #0
 801113a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011142:	78fa      	ldrb	r2, [r7, #3]
 8011144:	4611      	mov	r1, r2
 8011146:	4618      	mov	r0, r3
 8011148:	f7f5 fcab 	bl	8006aa2 <HAL_PCD_SetAddress>
 801114c:	4603      	mov	r3, r0
 801114e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8011150:	7bbb      	ldrb	r3, [r7, #14]
 8011152:	2b03      	cmp	r3, #3
 8011154:	d816      	bhi.n	8011184 <USBD_LL_SetUSBAddress+0x5c>
 8011156:	a201      	add	r2, pc, #4	; (adr r2, 801115c <USBD_LL_SetUSBAddress+0x34>)
 8011158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801115c:	0801116d 	.word	0x0801116d
 8011160:	08011173 	.word	0x08011173
 8011164:	08011179 	.word	0x08011179
 8011168:	0801117f 	.word	0x0801117f
    case HAL_OK :
      usb_status = USBD_OK;
 801116c:	2300      	movs	r3, #0
 801116e:	73fb      	strb	r3, [r7, #15]
    break;
 8011170:	e00b      	b.n	801118a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011172:	2302      	movs	r3, #2
 8011174:	73fb      	strb	r3, [r7, #15]
    break;
 8011176:	e008      	b.n	801118a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011178:	2301      	movs	r3, #1
 801117a:	73fb      	strb	r3, [r7, #15]
    break;
 801117c:	e005      	b.n	801118a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801117e:	2302      	movs	r3, #2
 8011180:	73fb      	strb	r3, [r7, #15]
    break;
 8011182:	e002      	b.n	801118a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8011184:	2302      	movs	r3, #2
 8011186:	73fb      	strb	r3, [r7, #15]
    break;
 8011188:	bf00      	nop
  }
  return usb_status;  
 801118a:	7bfb      	ldrb	r3, [r7, #15]
}
 801118c:	4618      	mov	r0, r3
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b086      	sub	sp, #24
 8011198:	af00      	add	r7, sp, #0
 801119a:	60f8      	str	r0, [r7, #12]
 801119c:	607a      	str	r2, [r7, #4]
 801119e:	461a      	mov	r2, r3
 80111a0:	460b      	mov	r3, r1
 80111a2:	72fb      	strb	r3, [r7, #11]
 80111a4:	4613      	mov	r3, r2
 80111a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111a8:	2300      	movs	r3, #0
 80111aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111ac:	2300      	movs	r3, #0
 80111ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80111b6:	893b      	ldrh	r3, [r7, #8]
 80111b8:	7af9      	ldrb	r1, [r7, #11]
 80111ba:	687a      	ldr	r2, [r7, #4]
 80111bc:	f7f5 fd87 	bl	8006cce <HAL_PCD_EP_Transmit>
 80111c0:	4603      	mov	r3, r0
 80111c2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80111c4:	7dbb      	ldrb	r3, [r7, #22]
 80111c6:	2b03      	cmp	r3, #3
 80111c8:	d816      	bhi.n	80111f8 <USBD_LL_Transmit+0x64>
 80111ca:	a201      	add	r2, pc, #4	; (adr r2, 80111d0 <USBD_LL_Transmit+0x3c>)
 80111cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111d0:	080111e1 	.word	0x080111e1
 80111d4:	080111e7 	.word	0x080111e7
 80111d8:	080111ed 	.word	0x080111ed
 80111dc:	080111f3 	.word	0x080111f3
    case HAL_OK :
      usb_status = USBD_OK;
 80111e0:	2300      	movs	r3, #0
 80111e2:	75fb      	strb	r3, [r7, #23]
    break;
 80111e4:	e00b      	b.n	80111fe <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80111e6:	2302      	movs	r3, #2
 80111e8:	75fb      	strb	r3, [r7, #23]
    break;
 80111ea:	e008      	b.n	80111fe <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80111ec:	2301      	movs	r3, #1
 80111ee:	75fb      	strb	r3, [r7, #23]
    break;
 80111f0:	e005      	b.n	80111fe <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80111f2:	2302      	movs	r3, #2
 80111f4:	75fb      	strb	r3, [r7, #23]
    break;
 80111f6:	e002      	b.n	80111fe <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80111f8:	2302      	movs	r3, #2
 80111fa:	75fb      	strb	r3, [r7, #23]
    break;
 80111fc:	bf00      	nop
  }
  return usb_status;    
 80111fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3718      	adds	r7, #24
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b086      	sub	sp, #24
 801120c:	af00      	add	r7, sp, #0
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	607a      	str	r2, [r7, #4]
 8011212:	461a      	mov	r2, r3
 8011214:	460b      	mov	r3, r1
 8011216:	72fb      	strb	r3, [r7, #11]
 8011218:	4613      	mov	r3, r2
 801121a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801121c:	2300      	movs	r3, #0
 801121e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011220:	2300      	movs	r3, #0
 8011222:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801122a:	893b      	ldrh	r3, [r7, #8]
 801122c:	7af9      	ldrb	r1, [r7, #11]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	f7f5 fcfe 	bl	8006c30 <HAL_PCD_EP_Receive>
 8011234:	4603      	mov	r3, r0
 8011236:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8011238:	7dbb      	ldrb	r3, [r7, #22]
 801123a:	2b03      	cmp	r3, #3
 801123c:	d816      	bhi.n	801126c <USBD_LL_PrepareReceive+0x64>
 801123e:	a201      	add	r2, pc, #4	; (adr r2, 8011244 <USBD_LL_PrepareReceive+0x3c>)
 8011240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011244:	08011255 	.word	0x08011255
 8011248:	0801125b 	.word	0x0801125b
 801124c:	08011261 	.word	0x08011261
 8011250:	08011267 	.word	0x08011267
    case HAL_OK :
      usb_status = USBD_OK;
 8011254:	2300      	movs	r3, #0
 8011256:	75fb      	strb	r3, [r7, #23]
    break;
 8011258:	e00b      	b.n	8011272 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801125a:	2302      	movs	r3, #2
 801125c:	75fb      	strb	r3, [r7, #23]
    break;
 801125e:	e008      	b.n	8011272 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011260:	2301      	movs	r3, #1
 8011262:	75fb      	strb	r3, [r7, #23]
    break;
 8011264:	e005      	b.n	8011272 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011266:	2302      	movs	r3, #2
 8011268:	75fb      	strb	r3, [r7, #23]
    break;
 801126a:	e002      	b.n	8011272 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 801126c:	2302      	movs	r3, #2
 801126e:	75fb      	strb	r3, [r7, #23]
    break;
 8011270:	bf00      	nop
  }
  return usb_status; 
 8011272:	7dfb      	ldrb	r3, [r7, #23]
}
 8011274:	4618      	mov	r0, r3
 8011276:	3718      	adds	r7, #24
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	460b      	mov	r3, r1
 8011286:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801128e:	78fa      	ldrb	r2, [r7, #3]
 8011290:	4611      	mov	r1, r2
 8011292:	4618      	mov	r0, r3
 8011294:	f7f5 fd06 	bl	8006ca4 <HAL_PCD_EP_GetRxCount>
 8011298:	4603      	mov	r3, r0
}
 801129a:	4618      	mov	r0, r3
 801129c:	3708      	adds	r7, #8
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}
	...

080112a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	460b      	mov	r3, r1
 80112ae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80112b0:	78fb      	ldrb	r3, [r7, #3]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d002      	beq.n	80112bc <HAL_PCDEx_LPM_Callback+0x18>
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d013      	beq.n	80112e2 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80112ba:	e023      	b.n	8011304 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	699b      	ldr	r3, [r3, #24]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d007      	beq.n	80112d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80112c4:	f000 f83c 	bl	8011340 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80112c8:	4b10      	ldr	r3, [pc, #64]	; (801130c <HAL_PCDEx_LPM_Callback+0x68>)
 80112ca:	691b      	ldr	r3, [r3, #16]
 80112cc:	4a0f      	ldr	r2, [pc, #60]	; (801130c <HAL_PCDEx_LPM_Callback+0x68>)
 80112ce:	f023 0306 	bic.w	r3, r3, #6
 80112d2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fc f8b6 	bl	800d44c <USBD_LL_Resume>
    break;
 80112e0:	e010      	b.n	8011304 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fc f89a 	bl	800d422 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	699b      	ldr	r3, [r3, #24]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d005      	beq.n	8011302 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80112f6:	4b05      	ldr	r3, [pc, #20]	; (801130c <HAL_PCDEx_LPM_Callback+0x68>)
 80112f8:	691b      	ldr	r3, [r3, #16]
 80112fa:	4a04      	ldr	r2, [pc, #16]	; (801130c <HAL_PCDEx_LPM_Callback+0x68>)
 80112fc:	f043 0306 	orr.w	r3, r3, #6
 8011300:	6113      	str	r3, [r2, #16]
    break;   
 8011302:	bf00      	nop
}
 8011304:	bf00      	nop
 8011306:	3708      	adds	r7, #8
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	e000ed00 	.word	0xe000ed00

08011310 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011310:	b480      	push	{r7}
 8011312:	b083      	sub	sp, #12
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011318:	4b03      	ldr	r3, [pc, #12]	; (8011328 <USBD_static_malloc+0x18>)
}
 801131a:	4618      	mov	r0, r3
 801131c:	370c      	adds	r7, #12
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr
 8011326:	bf00      	nop
 8011328:	200003dc 	.word	0x200003dc

0801132c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801132c:	b480      	push	{r7}
 801132e:	b083      	sub	sp, #12
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]

}
 8011334:	bf00      	nop
 8011336:	370c      	adds	r7, #12
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr

08011340 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011344:	f7f1 ffc2 	bl	80032cc <SystemClock_Config>
}
 8011348:	bf00      	nop
 801134a:	bd80      	pop	{r7, pc}

0801134c <atof>:
 801134c:	2100      	movs	r1, #0
 801134e:	f001 b8f3 	b.w	8012538 <strtod>

08011352 <atoi>:
 8011352:	220a      	movs	r2, #10
 8011354:	2100      	movs	r1, #0
 8011356:	f001 b991 	b.w	801267c <strtol>
	...

0801135c <__errno>:
 801135c:	4b01      	ldr	r3, [pc, #4]	; (8011364 <__errno+0x8>)
 801135e:	6818      	ldr	r0, [r3, #0]
 8011360:	4770      	bx	lr
 8011362:	bf00      	nop
 8011364:	200001b0 	.word	0x200001b0

08011368 <__libc_init_array>:
 8011368:	b570      	push	{r4, r5, r6, lr}
 801136a:	4e0d      	ldr	r6, [pc, #52]	; (80113a0 <__libc_init_array+0x38>)
 801136c:	4c0d      	ldr	r4, [pc, #52]	; (80113a4 <__libc_init_array+0x3c>)
 801136e:	1ba4      	subs	r4, r4, r6
 8011370:	10a4      	asrs	r4, r4, #2
 8011372:	2500      	movs	r5, #0
 8011374:	42a5      	cmp	r5, r4
 8011376:	d109      	bne.n	801138c <__libc_init_array+0x24>
 8011378:	4e0b      	ldr	r6, [pc, #44]	; (80113a8 <__libc_init_array+0x40>)
 801137a:	4c0c      	ldr	r4, [pc, #48]	; (80113ac <__libc_init_array+0x44>)
 801137c:	f003 fd32 	bl	8014de4 <_init>
 8011380:	1ba4      	subs	r4, r4, r6
 8011382:	10a4      	asrs	r4, r4, #2
 8011384:	2500      	movs	r5, #0
 8011386:	42a5      	cmp	r5, r4
 8011388:	d105      	bne.n	8011396 <__libc_init_array+0x2e>
 801138a:	bd70      	pop	{r4, r5, r6, pc}
 801138c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011390:	4798      	blx	r3
 8011392:	3501      	adds	r5, #1
 8011394:	e7ee      	b.n	8011374 <__libc_init_array+0xc>
 8011396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801139a:	4798      	blx	r3
 801139c:	3501      	adds	r5, #1
 801139e:	e7f2      	b.n	8011386 <__libc_init_array+0x1e>
 80113a0:	080154d4 	.word	0x080154d4
 80113a4:	080154d4 	.word	0x080154d4
 80113a8:	080154d4 	.word	0x080154d4
 80113ac:	080154d8 	.word	0x080154d8

080113b0 <memcpy>:
 80113b0:	b510      	push	{r4, lr}
 80113b2:	1e43      	subs	r3, r0, #1
 80113b4:	440a      	add	r2, r1
 80113b6:	4291      	cmp	r1, r2
 80113b8:	d100      	bne.n	80113bc <memcpy+0xc>
 80113ba:	bd10      	pop	{r4, pc}
 80113bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80113c4:	e7f7      	b.n	80113b6 <memcpy+0x6>

080113c6 <memset>:
 80113c6:	4402      	add	r2, r0
 80113c8:	4603      	mov	r3, r0
 80113ca:	4293      	cmp	r3, r2
 80113cc:	d100      	bne.n	80113d0 <memset+0xa>
 80113ce:	4770      	bx	lr
 80113d0:	f803 1b01 	strb.w	r1, [r3], #1
 80113d4:	e7f9      	b.n	80113ca <memset+0x4>
	...

080113d8 <_scanf_float>:
 80113d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113dc:	469a      	mov	sl, r3
 80113de:	688b      	ldr	r3, [r1, #8]
 80113e0:	4616      	mov	r6, r2
 80113e2:	1e5a      	subs	r2, r3, #1
 80113e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80113e8:	b087      	sub	sp, #28
 80113ea:	bf83      	ittte	hi
 80113ec:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80113f0:	189b      	addhi	r3, r3, r2
 80113f2:	9301      	strhi	r3, [sp, #4]
 80113f4:	2300      	movls	r3, #0
 80113f6:	bf86      	itte	hi
 80113f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80113fc:	608b      	strhi	r3, [r1, #8]
 80113fe:	9301      	strls	r3, [sp, #4]
 8011400:	680b      	ldr	r3, [r1, #0]
 8011402:	4688      	mov	r8, r1
 8011404:	f04f 0b00 	mov.w	fp, #0
 8011408:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801140c:	f848 3b1c 	str.w	r3, [r8], #28
 8011410:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8011414:	4607      	mov	r7, r0
 8011416:	460c      	mov	r4, r1
 8011418:	4645      	mov	r5, r8
 801141a:	465a      	mov	r2, fp
 801141c:	46d9      	mov	r9, fp
 801141e:	f8cd b008 	str.w	fp, [sp, #8]
 8011422:	68a1      	ldr	r1, [r4, #8]
 8011424:	b181      	cbz	r1, 8011448 <_scanf_float+0x70>
 8011426:	6833      	ldr	r3, [r6, #0]
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	2b49      	cmp	r3, #73	; 0x49
 801142c:	d071      	beq.n	8011512 <_scanf_float+0x13a>
 801142e:	d84d      	bhi.n	80114cc <_scanf_float+0xf4>
 8011430:	2b39      	cmp	r3, #57	; 0x39
 8011432:	d840      	bhi.n	80114b6 <_scanf_float+0xde>
 8011434:	2b31      	cmp	r3, #49	; 0x31
 8011436:	f080 8088 	bcs.w	801154a <_scanf_float+0x172>
 801143a:	2b2d      	cmp	r3, #45	; 0x2d
 801143c:	f000 8090 	beq.w	8011560 <_scanf_float+0x188>
 8011440:	d815      	bhi.n	801146e <_scanf_float+0x96>
 8011442:	2b2b      	cmp	r3, #43	; 0x2b
 8011444:	f000 808c 	beq.w	8011560 <_scanf_float+0x188>
 8011448:	f1b9 0f00 	cmp.w	r9, #0
 801144c:	d003      	beq.n	8011456 <_scanf_float+0x7e>
 801144e:	6823      	ldr	r3, [r4, #0]
 8011450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011454:	6023      	str	r3, [r4, #0]
 8011456:	3a01      	subs	r2, #1
 8011458:	2a01      	cmp	r2, #1
 801145a:	f200 80ea 	bhi.w	8011632 <_scanf_float+0x25a>
 801145e:	4545      	cmp	r5, r8
 8011460:	f200 80dc 	bhi.w	801161c <_scanf_float+0x244>
 8011464:	2601      	movs	r6, #1
 8011466:	4630      	mov	r0, r6
 8011468:	b007      	add	sp, #28
 801146a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801146e:	2b2e      	cmp	r3, #46	; 0x2e
 8011470:	f000 809f 	beq.w	80115b2 <_scanf_float+0x1da>
 8011474:	2b30      	cmp	r3, #48	; 0x30
 8011476:	d1e7      	bne.n	8011448 <_scanf_float+0x70>
 8011478:	6820      	ldr	r0, [r4, #0]
 801147a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801147e:	d064      	beq.n	801154a <_scanf_float+0x172>
 8011480:	9b01      	ldr	r3, [sp, #4]
 8011482:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011486:	6020      	str	r0, [r4, #0]
 8011488:	f109 0901 	add.w	r9, r9, #1
 801148c:	b11b      	cbz	r3, 8011496 <_scanf_float+0xbe>
 801148e:	3b01      	subs	r3, #1
 8011490:	3101      	adds	r1, #1
 8011492:	9301      	str	r3, [sp, #4]
 8011494:	60a1      	str	r1, [r4, #8]
 8011496:	68a3      	ldr	r3, [r4, #8]
 8011498:	3b01      	subs	r3, #1
 801149a:	60a3      	str	r3, [r4, #8]
 801149c:	6923      	ldr	r3, [r4, #16]
 801149e:	3301      	adds	r3, #1
 80114a0:	6123      	str	r3, [r4, #16]
 80114a2:	6873      	ldr	r3, [r6, #4]
 80114a4:	3b01      	subs	r3, #1
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	6073      	str	r3, [r6, #4]
 80114aa:	f340 80ac 	ble.w	8011606 <_scanf_float+0x22e>
 80114ae:	6833      	ldr	r3, [r6, #0]
 80114b0:	3301      	adds	r3, #1
 80114b2:	6033      	str	r3, [r6, #0]
 80114b4:	e7b5      	b.n	8011422 <_scanf_float+0x4a>
 80114b6:	2b45      	cmp	r3, #69	; 0x45
 80114b8:	f000 8085 	beq.w	80115c6 <_scanf_float+0x1ee>
 80114bc:	2b46      	cmp	r3, #70	; 0x46
 80114be:	d06a      	beq.n	8011596 <_scanf_float+0x1be>
 80114c0:	2b41      	cmp	r3, #65	; 0x41
 80114c2:	d1c1      	bne.n	8011448 <_scanf_float+0x70>
 80114c4:	2a01      	cmp	r2, #1
 80114c6:	d1bf      	bne.n	8011448 <_scanf_float+0x70>
 80114c8:	2202      	movs	r2, #2
 80114ca:	e046      	b.n	801155a <_scanf_float+0x182>
 80114cc:	2b65      	cmp	r3, #101	; 0x65
 80114ce:	d07a      	beq.n	80115c6 <_scanf_float+0x1ee>
 80114d0:	d818      	bhi.n	8011504 <_scanf_float+0x12c>
 80114d2:	2b54      	cmp	r3, #84	; 0x54
 80114d4:	d066      	beq.n	80115a4 <_scanf_float+0x1cc>
 80114d6:	d811      	bhi.n	80114fc <_scanf_float+0x124>
 80114d8:	2b4e      	cmp	r3, #78	; 0x4e
 80114da:	d1b5      	bne.n	8011448 <_scanf_float+0x70>
 80114dc:	2a00      	cmp	r2, #0
 80114de:	d146      	bne.n	801156e <_scanf_float+0x196>
 80114e0:	f1b9 0f00 	cmp.w	r9, #0
 80114e4:	d145      	bne.n	8011572 <_scanf_float+0x19a>
 80114e6:	6821      	ldr	r1, [r4, #0]
 80114e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80114ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80114f0:	d13f      	bne.n	8011572 <_scanf_float+0x19a>
 80114f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80114f6:	6021      	str	r1, [r4, #0]
 80114f8:	2201      	movs	r2, #1
 80114fa:	e02e      	b.n	801155a <_scanf_float+0x182>
 80114fc:	2b59      	cmp	r3, #89	; 0x59
 80114fe:	d01e      	beq.n	801153e <_scanf_float+0x166>
 8011500:	2b61      	cmp	r3, #97	; 0x61
 8011502:	e7de      	b.n	80114c2 <_scanf_float+0xea>
 8011504:	2b6e      	cmp	r3, #110	; 0x6e
 8011506:	d0e9      	beq.n	80114dc <_scanf_float+0x104>
 8011508:	d815      	bhi.n	8011536 <_scanf_float+0x15e>
 801150a:	2b66      	cmp	r3, #102	; 0x66
 801150c:	d043      	beq.n	8011596 <_scanf_float+0x1be>
 801150e:	2b69      	cmp	r3, #105	; 0x69
 8011510:	d19a      	bne.n	8011448 <_scanf_float+0x70>
 8011512:	f1bb 0f00 	cmp.w	fp, #0
 8011516:	d138      	bne.n	801158a <_scanf_float+0x1b2>
 8011518:	f1b9 0f00 	cmp.w	r9, #0
 801151c:	d197      	bne.n	801144e <_scanf_float+0x76>
 801151e:	6821      	ldr	r1, [r4, #0]
 8011520:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011524:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011528:	d195      	bne.n	8011456 <_scanf_float+0x7e>
 801152a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801152e:	6021      	str	r1, [r4, #0]
 8011530:	f04f 0b01 	mov.w	fp, #1
 8011534:	e011      	b.n	801155a <_scanf_float+0x182>
 8011536:	2b74      	cmp	r3, #116	; 0x74
 8011538:	d034      	beq.n	80115a4 <_scanf_float+0x1cc>
 801153a:	2b79      	cmp	r3, #121	; 0x79
 801153c:	d184      	bne.n	8011448 <_scanf_float+0x70>
 801153e:	f1bb 0f07 	cmp.w	fp, #7
 8011542:	d181      	bne.n	8011448 <_scanf_float+0x70>
 8011544:	f04f 0b08 	mov.w	fp, #8
 8011548:	e007      	b.n	801155a <_scanf_float+0x182>
 801154a:	eb12 0f0b 	cmn.w	r2, fp
 801154e:	f47f af7b 	bne.w	8011448 <_scanf_float+0x70>
 8011552:	6821      	ldr	r1, [r4, #0]
 8011554:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011558:	6021      	str	r1, [r4, #0]
 801155a:	702b      	strb	r3, [r5, #0]
 801155c:	3501      	adds	r5, #1
 801155e:	e79a      	b.n	8011496 <_scanf_float+0xbe>
 8011560:	6821      	ldr	r1, [r4, #0]
 8011562:	0608      	lsls	r0, r1, #24
 8011564:	f57f af70 	bpl.w	8011448 <_scanf_float+0x70>
 8011568:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801156c:	e7f4      	b.n	8011558 <_scanf_float+0x180>
 801156e:	2a02      	cmp	r2, #2
 8011570:	d047      	beq.n	8011602 <_scanf_float+0x22a>
 8011572:	f1bb 0f01 	cmp.w	fp, #1
 8011576:	d003      	beq.n	8011580 <_scanf_float+0x1a8>
 8011578:	f1bb 0f04 	cmp.w	fp, #4
 801157c:	f47f af64 	bne.w	8011448 <_scanf_float+0x70>
 8011580:	f10b 0b01 	add.w	fp, fp, #1
 8011584:	fa5f fb8b 	uxtb.w	fp, fp
 8011588:	e7e7      	b.n	801155a <_scanf_float+0x182>
 801158a:	f1bb 0f03 	cmp.w	fp, #3
 801158e:	d0f7      	beq.n	8011580 <_scanf_float+0x1a8>
 8011590:	f1bb 0f05 	cmp.w	fp, #5
 8011594:	e7f2      	b.n	801157c <_scanf_float+0x1a4>
 8011596:	f1bb 0f02 	cmp.w	fp, #2
 801159a:	f47f af55 	bne.w	8011448 <_scanf_float+0x70>
 801159e:	f04f 0b03 	mov.w	fp, #3
 80115a2:	e7da      	b.n	801155a <_scanf_float+0x182>
 80115a4:	f1bb 0f06 	cmp.w	fp, #6
 80115a8:	f47f af4e 	bne.w	8011448 <_scanf_float+0x70>
 80115ac:	f04f 0b07 	mov.w	fp, #7
 80115b0:	e7d3      	b.n	801155a <_scanf_float+0x182>
 80115b2:	6821      	ldr	r1, [r4, #0]
 80115b4:	0588      	lsls	r0, r1, #22
 80115b6:	f57f af47 	bpl.w	8011448 <_scanf_float+0x70>
 80115ba:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80115be:	6021      	str	r1, [r4, #0]
 80115c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80115c4:	e7c9      	b.n	801155a <_scanf_float+0x182>
 80115c6:	6821      	ldr	r1, [r4, #0]
 80115c8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80115cc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80115d0:	d006      	beq.n	80115e0 <_scanf_float+0x208>
 80115d2:	0548      	lsls	r0, r1, #21
 80115d4:	f57f af38 	bpl.w	8011448 <_scanf_float+0x70>
 80115d8:	f1b9 0f00 	cmp.w	r9, #0
 80115dc:	f43f af3b 	beq.w	8011456 <_scanf_float+0x7e>
 80115e0:	0588      	lsls	r0, r1, #22
 80115e2:	bf58      	it	pl
 80115e4:	9802      	ldrpl	r0, [sp, #8]
 80115e6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80115ea:	bf58      	it	pl
 80115ec:	eba9 0000 	subpl.w	r0, r9, r0
 80115f0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80115f4:	bf58      	it	pl
 80115f6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80115fa:	6021      	str	r1, [r4, #0]
 80115fc:	f04f 0900 	mov.w	r9, #0
 8011600:	e7ab      	b.n	801155a <_scanf_float+0x182>
 8011602:	2203      	movs	r2, #3
 8011604:	e7a9      	b.n	801155a <_scanf_float+0x182>
 8011606:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801160a:	9205      	str	r2, [sp, #20]
 801160c:	4631      	mov	r1, r6
 801160e:	4638      	mov	r0, r7
 8011610:	4798      	blx	r3
 8011612:	9a05      	ldr	r2, [sp, #20]
 8011614:	2800      	cmp	r0, #0
 8011616:	f43f af04 	beq.w	8011422 <_scanf_float+0x4a>
 801161a:	e715      	b.n	8011448 <_scanf_float+0x70>
 801161c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011620:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011624:	4632      	mov	r2, r6
 8011626:	4638      	mov	r0, r7
 8011628:	4798      	blx	r3
 801162a:	6923      	ldr	r3, [r4, #16]
 801162c:	3b01      	subs	r3, #1
 801162e:	6123      	str	r3, [r4, #16]
 8011630:	e715      	b.n	801145e <_scanf_float+0x86>
 8011632:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8011636:	2b06      	cmp	r3, #6
 8011638:	d80a      	bhi.n	8011650 <_scanf_float+0x278>
 801163a:	f1bb 0f02 	cmp.w	fp, #2
 801163e:	d968      	bls.n	8011712 <_scanf_float+0x33a>
 8011640:	f1ab 0b03 	sub.w	fp, fp, #3
 8011644:	fa5f fb8b 	uxtb.w	fp, fp
 8011648:	eba5 0b0b 	sub.w	fp, r5, fp
 801164c:	455d      	cmp	r5, fp
 801164e:	d14b      	bne.n	80116e8 <_scanf_float+0x310>
 8011650:	6823      	ldr	r3, [r4, #0]
 8011652:	05da      	lsls	r2, r3, #23
 8011654:	d51f      	bpl.n	8011696 <_scanf_float+0x2be>
 8011656:	055b      	lsls	r3, r3, #21
 8011658:	d468      	bmi.n	801172c <_scanf_float+0x354>
 801165a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801165e:	6923      	ldr	r3, [r4, #16]
 8011660:	2965      	cmp	r1, #101	; 0x65
 8011662:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8011666:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801166a:	6123      	str	r3, [r4, #16]
 801166c:	d00d      	beq.n	801168a <_scanf_float+0x2b2>
 801166e:	2945      	cmp	r1, #69	; 0x45
 8011670:	d00b      	beq.n	801168a <_scanf_float+0x2b2>
 8011672:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011676:	4632      	mov	r2, r6
 8011678:	4638      	mov	r0, r7
 801167a:	4798      	blx	r3
 801167c:	6923      	ldr	r3, [r4, #16]
 801167e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8011682:	3b01      	subs	r3, #1
 8011684:	f1a5 0b02 	sub.w	fp, r5, #2
 8011688:	6123      	str	r3, [r4, #16]
 801168a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801168e:	4632      	mov	r2, r6
 8011690:	4638      	mov	r0, r7
 8011692:	4798      	blx	r3
 8011694:	465d      	mov	r5, fp
 8011696:	6826      	ldr	r6, [r4, #0]
 8011698:	f016 0610 	ands.w	r6, r6, #16
 801169c:	d17a      	bne.n	8011794 <_scanf_float+0x3bc>
 801169e:	702e      	strb	r6, [r5, #0]
 80116a0:	6823      	ldr	r3, [r4, #0]
 80116a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80116a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116aa:	d142      	bne.n	8011732 <_scanf_float+0x35a>
 80116ac:	9b02      	ldr	r3, [sp, #8]
 80116ae:	eba9 0303 	sub.w	r3, r9, r3
 80116b2:	425a      	negs	r2, r3
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d149      	bne.n	801174c <_scanf_float+0x374>
 80116b8:	2200      	movs	r2, #0
 80116ba:	4641      	mov	r1, r8
 80116bc:	4638      	mov	r0, r7
 80116be:	f000 ff2b 	bl	8012518 <_strtod_r>
 80116c2:	6825      	ldr	r5, [r4, #0]
 80116c4:	f8da 3000 	ldr.w	r3, [sl]
 80116c8:	f015 0f02 	tst.w	r5, #2
 80116cc:	f103 0204 	add.w	r2, r3, #4
 80116d0:	ec59 8b10 	vmov	r8, r9, d0
 80116d4:	f8ca 2000 	str.w	r2, [sl]
 80116d8:	d043      	beq.n	8011762 <_scanf_float+0x38a>
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	e9c3 8900 	strd	r8, r9, [r3]
 80116e0:	68e3      	ldr	r3, [r4, #12]
 80116e2:	3301      	adds	r3, #1
 80116e4:	60e3      	str	r3, [r4, #12]
 80116e6:	e6be      	b.n	8011466 <_scanf_float+0x8e>
 80116e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80116ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80116f0:	4632      	mov	r2, r6
 80116f2:	4638      	mov	r0, r7
 80116f4:	4798      	blx	r3
 80116f6:	6923      	ldr	r3, [r4, #16]
 80116f8:	3b01      	subs	r3, #1
 80116fa:	6123      	str	r3, [r4, #16]
 80116fc:	e7a6      	b.n	801164c <_scanf_float+0x274>
 80116fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011702:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011706:	4632      	mov	r2, r6
 8011708:	4638      	mov	r0, r7
 801170a:	4798      	blx	r3
 801170c:	6923      	ldr	r3, [r4, #16]
 801170e:	3b01      	subs	r3, #1
 8011710:	6123      	str	r3, [r4, #16]
 8011712:	4545      	cmp	r5, r8
 8011714:	d8f3      	bhi.n	80116fe <_scanf_float+0x326>
 8011716:	e6a5      	b.n	8011464 <_scanf_float+0x8c>
 8011718:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801171c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011720:	4632      	mov	r2, r6
 8011722:	4638      	mov	r0, r7
 8011724:	4798      	blx	r3
 8011726:	6923      	ldr	r3, [r4, #16]
 8011728:	3b01      	subs	r3, #1
 801172a:	6123      	str	r3, [r4, #16]
 801172c:	4545      	cmp	r5, r8
 801172e:	d8f3      	bhi.n	8011718 <_scanf_float+0x340>
 8011730:	e698      	b.n	8011464 <_scanf_float+0x8c>
 8011732:	9b03      	ldr	r3, [sp, #12]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d0bf      	beq.n	80116b8 <_scanf_float+0x2e0>
 8011738:	9904      	ldr	r1, [sp, #16]
 801173a:	230a      	movs	r3, #10
 801173c:	4632      	mov	r2, r6
 801173e:	3101      	adds	r1, #1
 8011740:	4638      	mov	r0, r7
 8011742:	f000 ff89 	bl	8012658 <_strtol_r>
 8011746:	9b03      	ldr	r3, [sp, #12]
 8011748:	9d04      	ldr	r5, [sp, #16]
 801174a:	1ac2      	subs	r2, r0, r3
 801174c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011750:	429d      	cmp	r5, r3
 8011752:	bf28      	it	cs
 8011754:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8011758:	490f      	ldr	r1, [pc, #60]	; (8011798 <_scanf_float+0x3c0>)
 801175a:	4628      	mov	r0, r5
 801175c:	f000 f83c 	bl	80117d8 <siprintf>
 8011760:	e7aa      	b.n	80116b8 <_scanf_float+0x2e0>
 8011762:	f015 0504 	ands.w	r5, r5, #4
 8011766:	d1b8      	bne.n	80116da <_scanf_float+0x302>
 8011768:	681f      	ldr	r7, [r3, #0]
 801176a:	ee10 2a10 	vmov	r2, s0
 801176e:	464b      	mov	r3, r9
 8011770:	ee10 0a10 	vmov	r0, s0
 8011774:	4649      	mov	r1, r9
 8011776:	f7ef f9e9 	bl	8000b4c <__aeabi_dcmpun>
 801177a:	b128      	cbz	r0, 8011788 <_scanf_float+0x3b0>
 801177c:	4628      	mov	r0, r5
 801177e:	f000 f825 	bl	80117cc <nanf>
 8011782:	ed87 0a00 	vstr	s0, [r7]
 8011786:	e7ab      	b.n	80116e0 <_scanf_float+0x308>
 8011788:	4640      	mov	r0, r8
 801178a:	4649      	mov	r1, r9
 801178c:	f7ef fa3c 	bl	8000c08 <__aeabi_d2f>
 8011790:	6038      	str	r0, [r7, #0]
 8011792:	e7a5      	b.n	80116e0 <_scanf_float+0x308>
 8011794:	2600      	movs	r6, #0
 8011796:	e666      	b.n	8011466 <_scanf_float+0x8e>
 8011798:	080151a8 	.word	0x080151a8

0801179c <iprintf>:
 801179c:	b40f      	push	{r0, r1, r2, r3}
 801179e:	4b0a      	ldr	r3, [pc, #40]	; (80117c8 <iprintf+0x2c>)
 80117a0:	b513      	push	{r0, r1, r4, lr}
 80117a2:	681c      	ldr	r4, [r3, #0]
 80117a4:	b124      	cbz	r4, 80117b0 <iprintf+0x14>
 80117a6:	69a3      	ldr	r3, [r4, #24]
 80117a8:	b913      	cbnz	r3, 80117b0 <iprintf+0x14>
 80117aa:	4620      	mov	r0, r4
 80117ac:	f000 ffde 	bl	801276c <__sinit>
 80117b0:	ab05      	add	r3, sp, #20
 80117b2:	9a04      	ldr	r2, [sp, #16]
 80117b4:	68a1      	ldr	r1, [r4, #8]
 80117b6:	9301      	str	r3, [sp, #4]
 80117b8:	4620      	mov	r0, r4
 80117ba:	f002 fb73 	bl	8013ea4 <_vfiprintf_r>
 80117be:	b002      	add	sp, #8
 80117c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117c4:	b004      	add	sp, #16
 80117c6:	4770      	bx	lr
 80117c8:	200001b0 	.word	0x200001b0

080117cc <nanf>:
 80117cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80117d4 <nanf+0x8>
 80117d0:	4770      	bx	lr
 80117d2:	bf00      	nop
 80117d4:	7fc00000 	.word	0x7fc00000

080117d8 <siprintf>:
 80117d8:	b40e      	push	{r1, r2, r3}
 80117da:	b500      	push	{lr}
 80117dc:	b09c      	sub	sp, #112	; 0x70
 80117de:	ab1d      	add	r3, sp, #116	; 0x74
 80117e0:	9002      	str	r0, [sp, #8]
 80117e2:	9006      	str	r0, [sp, #24]
 80117e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80117e8:	4809      	ldr	r0, [pc, #36]	; (8011810 <siprintf+0x38>)
 80117ea:	9107      	str	r1, [sp, #28]
 80117ec:	9104      	str	r1, [sp, #16]
 80117ee:	4909      	ldr	r1, [pc, #36]	; (8011814 <siprintf+0x3c>)
 80117f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80117f4:	9105      	str	r1, [sp, #20]
 80117f6:	6800      	ldr	r0, [r0, #0]
 80117f8:	9301      	str	r3, [sp, #4]
 80117fa:	a902      	add	r1, sp, #8
 80117fc:	f002 f886 	bl	801390c <_svfiprintf_r>
 8011800:	9b02      	ldr	r3, [sp, #8]
 8011802:	2200      	movs	r2, #0
 8011804:	701a      	strb	r2, [r3, #0]
 8011806:	b01c      	add	sp, #112	; 0x70
 8011808:	f85d eb04 	ldr.w	lr, [sp], #4
 801180c:	b003      	add	sp, #12
 801180e:	4770      	bx	lr
 8011810:	200001b0 	.word	0x200001b0
 8011814:	ffff0208 	.word	0xffff0208

08011818 <siscanf>:
 8011818:	b40e      	push	{r1, r2, r3}
 801181a:	b530      	push	{r4, r5, lr}
 801181c:	b09c      	sub	sp, #112	; 0x70
 801181e:	ac1f      	add	r4, sp, #124	; 0x7c
 8011820:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011824:	f854 5b04 	ldr.w	r5, [r4], #4
 8011828:	f8ad 2014 	strh.w	r2, [sp, #20]
 801182c:	9002      	str	r0, [sp, #8]
 801182e:	9006      	str	r0, [sp, #24]
 8011830:	f7ee fcd8 	bl	80001e4 <strlen>
 8011834:	4b0b      	ldr	r3, [pc, #44]	; (8011864 <siscanf+0x4c>)
 8011836:	9003      	str	r0, [sp, #12]
 8011838:	9007      	str	r0, [sp, #28]
 801183a:	930b      	str	r3, [sp, #44]	; 0x2c
 801183c:	480a      	ldr	r0, [pc, #40]	; (8011868 <siscanf+0x50>)
 801183e:	9401      	str	r4, [sp, #4]
 8011840:	2300      	movs	r3, #0
 8011842:	930f      	str	r3, [sp, #60]	; 0x3c
 8011844:	9314      	str	r3, [sp, #80]	; 0x50
 8011846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801184a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801184e:	462a      	mov	r2, r5
 8011850:	4623      	mov	r3, r4
 8011852:	a902      	add	r1, sp, #8
 8011854:	6800      	ldr	r0, [r0, #0]
 8011856:	f002 f9ab 	bl	8013bb0 <__ssvfiscanf_r>
 801185a:	b01c      	add	sp, #112	; 0x70
 801185c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011860:	b003      	add	sp, #12
 8011862:	4770      	bx	lr
 8011864:	0801188f 	.word	0x0801188f
 8011868:	200001b0 	.word	0x200001b0

0801186c <__sread>:
 801186c:	b510      	push	{r4, lr}
 801186e:	460c      	mov	r4, r1
 8011870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011874:	f002 ff0c 	bl	8014690 <_read_r>
 8011878:	2800      	cmp	r0, #0
 801187a:	bfab      	itete	ge
 801187c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801187e:	89a3      	ldrhlt	r3, [r4, #12]
 8011880:	181b      	addge	r3, r3, r0
 8011882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011886:	bfac      	ite	ge
 8011888:	6563      	strge	r3, [r4, #84]	; 0x54
 801188a:	81a3      	strhlt	r3, [r4, #12]
 801188c:	bd10      	pop	{r4, pc}

0801188e <__seofread>:
 801188e:	2000      	movs	r0, #0
 8011890:	4770      	bx	lr

08011892 <__swrite>:
 8011892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011896:	461f      	mov	r7, r3
 8011898:	898b      	ldrh	r3, [r1, #12]
 801189a:	05db      	lsls	r3, r3, #23
 801189c:	4605      	mov	r5, r0
 801189e:	460c      	mov	r4, r1
 80118a0:	4616      	mov	r6, r2
 80118a2:	d505      	bpl.n	80118b0 <__swrite+0x1e>
 80118a4:	2302      	movs	r3, #2
 80118a6:	2200      	movs	r2, #0
 80118a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118ac:	f001 fb22 	bl	8012ef4 <_lseek_r>
 80118b0:	89a3      	ldrh	r3, [r4, #12]
 80118b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80118ba:	81a3      	strh	r3, [r4, #12]
 80118bc:	4632      	mov	r2, r6
 80118be:	463b      	mov	r3, r7
 80118c0:	4628      	mov	r0, r5
 80118c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118c6:	f000 beef 	b.w	80126a8 <_write_r>

080118ca <__sseek>:
 80118ca:	b510      	push	{r4, lr}
 80118cc:	460c      	mov	r4, r1
 80118ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118d2:	f001 fb0f 	bl	8012ef4 <_lseek_r>
 80118d6:	1c43      	adds	r3, r0, #1
 80118d8:	89a3      	ldrh	r3, [r4, #12]
 80118da:	bf15      	itete	ne
 80118dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80118de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80118e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80118e6:	81a3      	strheq	r3, [r4, #12]
 80118e8:	bf18      	it	ne
 80118ea:	81a3      	strhne	r3, [r4, #12]
 80118ec:	bd10      	pop	{r4, pc}

080118ee <__sclose>:
 80118ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118f2:	f000 beeb 	b.w	80126cc <_close_r>

080118f6 <sulp>:
 80118f6:	b570      	push	{r4, r5, r6, lr}
 80118f8:	4604      	mov	r4, r0
 80118fa:	460d      	mov	r5, r1
 80118fc:	ec45 4b10 	vmov	d0, r4, r5
 8011900:	4616      	mov	r6, r2
 8011902:	f001 fde7 	bl	80134d4 <__ulp>
 8011906:	ec51 0b10 	vmov	r0, r1, d0
 801190a:	b17e      	cbz	r6, 801192c <sulp+0x36>
 801190c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011910:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011914:	2b00      	cmp	r3, #0
 8011916:	dd09      	ble.n	801192c <sulp+0x36>
 8011918:	051b      	lsls	r3, r3, #20
 801191a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801191e:	2400      	movs	r4, #0
 8011920:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011924:	4622      	mov	r2, r4
 8011926:	462b      	mov	r3, r5
 8011928:	f7ee fe76 	bl	8000618 <__aeabi_dmul>
 801192c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011930 <_strtod_l>:
 8011930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011934:	461f      	mov	r7, r3
 8011936:	b0a1      	sub	sp, #132	; 0x84
 8011938:	2300      	movs	r3, #0
 801193a:	4681      	mov	r9, r0
 801193c:	4638      	mov	r0, r7
 801193e:	460e      	mov	r6, r1
 8011940:	9217      	str	r2, [sp, #92]	; 0x5c
 8011942:	931c      	str	r3, [sp, #112]	; 0x70
 8011944:	f001 fad4 	bl	8012ef0 <__localeconv_l>
 8011948:	4680      	mov	r8, r0
 801194a:	6800      	ldr	r0, [r0, #0]
 801194c:	f7ee fc4a 	bl	80001e4 <strlen>
 8011950:	f04f 0a00 	mov.w	sl, #0
 8011954:	4604      	mov	r4, r0
 8011956:	f04f 0b00 	mov.w	fp, #0
 801195a:	961b      	str	r6, [sp, #108]	; 0x6c
 801195c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801195e:	781a      	ldrb	r2, [r3, #0]
 8011960:	2a0d      	cmp	r2, #13
 8011962:	d832      	bhi.n	80119ca <_strtod_l+0x9a>
 8011964:	2a09      	cmp	r2, #9
 8011966:	d236      	bcs.n	80119d6 <_strtod_l+0xa6>
 8011968:	2a00      	cmp	r2, #0
 801196a:	d03e      	beq.n	80119ea <_strtod_l+0xba>
 801196c:	2300      	movs	r3, #0
 801196e:	930d      	str	r3, [sp, #52]	; 0x34
 8011970:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011972:	782b      	ldrb	r3, [r5, #0]
 8011974:	2b30      	cmp	r3, #48	; 0x30
 8011976:	f040 80ac 	bne.w	8011ad2 <_strtod_l+0x1a2>
 801197a:	786b      	ldrb	r3, [r5, #1]
 801197c:	2b58      	cmp	r3, #88	; 0x58
 801197e:	d001      	beq.n	8011984 <_strtod_l+0x54>
 8011980:	2b78      	cmp	r3, #120	; 0x78
 8011982:	d167      	bne.n	8011a54 <_strtod_l+0x124>
 8011984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011986:	9301      	str	r3, [sp, #4]
 8011988:	ab1c      	add	r3, sp, #112	; 0x70
 801198a:	9300      	str	r3, [sp, #0]
 801198c:	9702      	str	r7, [sp, #8]
 801198e:	ab1d      	add	r3, sp, #116	; 0x74
 8011990:	4a88      	ldr	r2, [pc, #544]	; (8011bb4 <_strtod_l+0x284>)
 8011992:	a91b      	add	r1, sp, #108	; 0x6c
 8011994:	4648      	mov	r0, r9
 8011996:	f000 ffc2 	bl	801291e <__gethex>
 801199a:	f010 0407 	ands.w	r4, r0, #7
 801199e:	4606      	mov	r6, r0
 80119a0:	d005      	beq.n	80119ae <_strtod_l+0x7e>
 80119a2:	2c06      	cmp	r4, #6
 80119a4:	d12b      	bne.n	80119fe <_strtod_l+0xce>
 80119a6:	3501      	adds	r5, #1
 80119a8:	2300      	movs	r3, #0
 80119aa:	951b      	str	r5, [sp, #108]	; 0x6c
 80119ac:	930d      	str	r3, [sp, #52]	; 0x34
 80119ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	f040 859a 	bne.w	80124ea <_strtod_l+0xbba>
 80119b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119b8:	b1e3      	cbz	r3, 80119f4 <_strtod_l+0xc4>
 80119ba:	4652      	mov	r2, sl
 80119bc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80119c0:	ec43 2b10 	vmov	d0, r2, r3
 80119c4:	b021      	add	sp, #132	; 0x84
 80119c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ca:	2a2b      	cmp	r2, #43	; 0x2b
 80119cc:	d015      	beq.n	80119fa <_strtod_l+0xca>
 80119ce:	2a2d      	cmp	r2, #45	; 0x2d
 80119d0:	d004      	beq.n	80119dc <_strtod_l+0xac>
 80119d2:	2a20      	cmp	r2, #32
 80119d4:	d1ca      	bne.n	801196c <_strtod_l+0x3c>
 80119d6:	3301      	adds	r3, #1
 80119d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80119da:	e7bf      	b.n	801195c <_strtod_l+0x2c>
 80119dc:	2201      	movs	r2, #1
 80119de:	920d      	str	r2, [sp, #52]	; 0x34
 80119e0:	1c5a      	adds	r2, r3, #1
 80119e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80119e4:	785b      	ldrb	r3, [r3, #1]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d1c2      	bne.n	8011970 <_strtod_l+0x40>
 80119ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f040 8579 	bne.w	80124e6 <_strtod_l+0xbb6>
 80119f4:	4652      	mov	r2, sl
 80119f6:	465b      	mov	r3, fp
 80119f8:	e7e2      	b.n	80119c0 <_strtod_l+0x90>
 80119fa:	2200      	movs	r2, #0
 80119fc:	e7ef      	b.n	80119de <_strtod_l+0xae>
 80119fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011a00:	b13a      	cbz	r2, 8011a12 <_strtod_l+0xe2>
 8011a02:	2135      	movs	r1, #53	; 0x35
 8011a04:	a81e      	add	r0, sp, #120	; 0x78
 8011a06:	f001 fe5d 	bl	80136c4 <__copybits>
 8011a0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011a0c:	4648      	mov	r0, r9
 8011a0e:	f001 fac9 	bl	8012fa4 <_Bfree>
 8011a12:	3c01      	subs	r4, #1
 8011a14:	2c04      	cmp	r4, #4
 8011a16:	d806      	bhi.n	8011a26 <_strtod_l+0xf6>
 8011a18:	e8df f004 	tbb	[pc, r4]
 8011a1c:	1714030a 	.word	0x1714030a
 8011a20:	0a          	.byte	0x0a
 8011a21:	00          	.byte	0x00
 8011a22:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8011a26:	0730      	lsls	r0, r6, #28
 8011a28:	d5c1      	bpl.n	80119ae <_strtod_l+0x7e>
 8011a2a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011a2e:	e7be      	b.n	80119ae <_strtod_l+0x7e>
 8011a30:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8011a34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011a36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011a3a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011a3e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011a42:	e7f0      	b.n	8011a26 <_strtod_l+0xf6>
 8011a44:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011bb8 <_strtod_l+0x288>
 8011a48:	e7ed      	b.n	8011a26 <_strtod_l+0xf6>
 8011a4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011a4e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011a52:	e7e8      	b.n	8011a26 <_strtod_l+0xf6>
 8011a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a56:	1c5a      	adds	r2, r3, #1
 8011a58:	921b      	str	r2, [sp, #108]	; 0x6c
 8011a5a:	785b      	ldrb	r3, [r3, #1]
 8011a5c:	2b30      	cmp	r3, #48	; 0x30
 8011a5e:	d0f9      	beq.n	8011a54 <_strtod_l+0x124>
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d0a4      	beq.n	80119ae <_strtod_l+0x7e>
 8011a64:	2301      	movs	r3, #1
 8011a66:	2500      	movs	r5, #0
 8011a68:	9306      	str	r3, [sp, #24]
 8011a6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a6c:	9308      	str	r3, [sp, #32]
 8011a6e:	9507      	str	r5, [sp, #28]
 8011a70:	9505      	str	r5, [sp, #20]
 8011a72:	220a      	movs	r2, #10
 8011a74:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011a76:	7807      	ldrb	r7, [r0, #0]
 8011a78:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011a7c:	b2d9      	uxtb	r1, r3
 8011a7e:	2909      	cmp	r1, #9
 8011a80:	d929      	bls.n	8011ad6 <_strtod_l+0x1a6>
 8011a82:	4622      	mov	r2, r4
 8011a84:	f8d8 1000 	ldr.w	r1, [r8]
 8011a88:	f002 fe56 	bl	8014738 <strncmp>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d031      	beq.n	8011af4 <_strtod_l+0x1c4>
 8011a90:	2000      	movs	r0, #0
 8011a92:	9c05      	ldr	r4, [sp, #20]
 8011a94:	9004      	str	r0, [sp, #16]
 8011a96:	463b      	mov	r3, r7
 8011a98:	4602      	mov	r2, r0
 8011a9a:	2b65      	cmp	r3, #101	; 0x65
 8011a9c:	d001      	beq.n	8011aa2 <_strtod_l+0x172>
 8011a9e:	2b45      	cmp	r3, #69	; 0x45
 8011aa0:	d114      	bne.n	8011acc <_strtod_l+0x19c>
 8011aa2:	b924      	cbnz	r4, 8011aae <_strtod_l+0x17e>
 8011aa4:	b910      	cbnz	r0, 8011aac <_strtod_l+0x17c>
 8011aa6:	9b06      	ldr	r3, [sp, #24]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d09e      	beq.n	80119ea <_strtod_l+0xba>
 8011aac:	2400      	movs	r4, #0
 8011aae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011ab0:	1c73      	adds	r3, r6, #1
 8011ab2:	931b      	str	r3, [sp, #108]	; 0x6c
 8011ab4:	7873      	ldrb	r3, [r6, #1]
 8011ab6:	2b2b      	cmp	r3, #43	; 0x2b
 8011ab8:	d078      	beq.n	8011bac <_strtod_l+0x27c>
 8011aba:	2b2d      	cmp	r3, #45	; 0x2d
 8011abc:	d070      	beq.n	8011ba0 <_strtod_l+0x270>
 8011abe:	f04f 0c00 	mov.w	ip, #0
 8011ac2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8011ac6:	2f09      	cmp	r7, #9
 8011ac8:	d97c      	bls.n	8011bc4 <_strtod_l+0x294>
 8011aca:	961b      	str	r6, [sp, #108]	; 0x6c
 8011acc:	f04f 0e00 	mov.w	lr, #0
 8011ad0:	e09a      	b.n	8011c08 <_strtod_l+0x2d8>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	e7c7      	b.n	8011a66 <_strtod_l+0x136>
 8011ad6:	9905      	ldr	r1, [sp, #20]
 8011ad8:	2908      	cmp	r1, #8
 8011ada:	bfdd      	ittte	le
 8011adc:	9907      	ldrle	r1, [sp, #28]
 8011ade:	fb02 3301 	mlale	r3, r2, r1, r3
 8011ae2:	9307      	strle	r3, [sp, #28]
 8011ae4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011ae8:	9b05      	ldr	r3, [sp, #20]
 8011aea:	3001      	adds	r0, #1
 8011aec:	3301      	adds	r3, #1
 8011aee:	9305      	str	r3, [sp, #20]
 8011af0:	901b      	str	r0, [sp, #108]	; 0x6c
 8011af2:	e7bf      	b.n	8011a74 <_strtod_l+0x144>
 8011af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011af6:	191a      	adds	r2, r3, r4
 8011af8:	921b      	str	r2, [sp, #108]	; 0x6c
 8011afa:	9a05      	ldr	r2, [sp, #20]
 8011afc:	5d1b      	ldrb	r3, [r3, r4]
 8011afe:	2a00      	cmp	r2, #0
 8011b00:	d037      	beq.n	8011b72 <_strtod_l+0x242>
 8011b02:	9c05      	ldr	r4, [sp, #20]
 8011b04:	4602      	mov	r2, r0
 8011b06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011b0a:	2909      	cmp	r1, #9
 8011b0c:	d913      	bls.n	8011b36 <_strtod_l+0x206>
 8011b0e:	2101      	movs	r1, #1
 8011b10:	9104      	str	r1, [sp, #16]
 8011b12:	e7c2      	b.n	8011a9a <_strtod_l+0x16a>
 8011b14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b16:	1c5a      	adds	r2, r3, #1
 8011b18:	921b      	str	r2, [sp, #108]	; 0x6c
 8011b1a:	785b      	ldrb	r3, [r3, #1]
 8011b1c:	3001      	adds	r0, #1
 8011b1e:	2b30      	cmp	r3, #48	; 0x30
 8011b20:	d0f8      	beq.n	8011b14 <_strtod_l+0x1e4>
 8011b22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011b26:	2a08      	cmp	r2, #8
 8011b28:	f200 84e4 	bhi.w	80124f4 <_strtod_l+0xbc4>
 8011b2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011b2e:	9208      	str	r2, [sp, #32]
 8011b30:	4602      	mov	r2, r0
 8011b32:	2000      	movs	r0, #0
 8011b34:	4604      	mov	r4, r0
 8011b36:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011b3a:	f100 0101 	add.w	r1, r0, #1
 8011b3e:	d012      	beq.n	8011b66 <_strtod_l+0x236>
 8011b40:	440a      	add	r2, r1
 8011b42:	eb00 0c04 	add.w	ip, r0, r4
 8011b46:	4621      	mov	r1, r4
 8011b48:	270a      	movs	r7, #10
 8011b4a:	458c      	cmp	ip, r1
 8011b4c:	d113      	bne.n	8011b76 <_strtod_l+0x246>
 8011b4e:	1821      	adds	r1, r4, r0
 8011b50:	2908      	cmp	r1, #8
 8011b52:	f104 0401 	add.w	r4, r4, #1
 8011b56:	4404      	add	r4, r0
 8011b58:	dc19      	bgt.n	8011b8e <_strtod_l+0x25e>
 8011b5a:	9b07      	ldr	r3, [sp, #28]
 8011b5c:	210a      	movs	r1, #10
 8011b5e:	fb01 e303 	mla	r3, r1, r3, lr
 8011b62:	9307      	str	r3, [sp, #28]
 8011b64:	2100      	movs	r1, #0
 8011b66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b68:	1c58      	adds	r0, r3, #1
 8011b6a:	901b      	str	r0, [sp, #108]	; 0x6c
 8011b6c:	785b      	ldrb	r3, [r3, #1]
 8011b6e:	4608      	mov	r0, r1
 8011b70:	e7c9      	b.n	8011b06 <_strtod_l+0x1d6>
 8011b72:	9805      	ldr	r0, [sp, #20]
 8011b74:	e7d3      	b.n	8011b1e <_strtod_l+0x1ee>
 8011b76:	2908      	cmp	r1, #8
 8011b78:	f101 0101 	add.w	r1, r1, #1
 8011b7c:	dc03      	bgt.n	8011b86 <_strtod_l+0x256>
 8011b7e:	9b07      	ldr	r3, [sp, #28]
 8011b80:	437b      	muls	r3, r7
 8011b82:	9307      	str	r3, [sp, #28]
 8011b84:	e7e1      	b.n	8011b4a <_strtod_l+0x21a>
 8011b86:	2910      	cmp	r1, #16
 8011b88:	bfd8      	it	le
 8011b8a:	437d      	mulle	r5, r7
 8011b8c:	e7dd      	b.n	8011b4a <_strtod_l+0x21a>
 8011b8e:	2c10      	cmp	r4, #16
 8011b90:	bfdc      	itt	le
 8011b92:	210a      	movle	r1, #10
 8011b94:	fb01 e505 	mlale	r5, r1, r5, lr
 8011b98:	e7e4      	b.n	8011b64 <_strtod_l+0x234>
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	9304      	str	r3, [sp, #16]
 8011b9e:	e781      	b.n	8011aa4 <_strtod_l+0x174>
 8011ba0:	f04f 0c01 	mov.w	ip, #1
 8011ba4:	1cb3      	adds	r3, r6, #2
 8011ba6:	931b      	str	r3, [sp, #108]	; 0x6c
 8011ba8:	78b3      	ldrb	r3, [r6, #2]
 8011baa:	e78a      	b.n	8011ac2 <_strtod_l+0x192>
 8011bac:	f04f 0c00 	mov.w	ip, #0
 8011bb0:	e7f8      	b.n	8011ba4 <_strtod_l+0x274>
 8011bb2:	bf00      	nop
 8011bb4:	080151bc 	.word	0x080151bc
 8011bb8:	7ff00000 	.word	0x7ff00000
 8011bbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011bbe:	1c5f      	adds	r7, r3, #1
 8011bc0:	971b      	str	r7, [sp, #108]	; 0x6c
 8011bc2:	785b      	ldrb	r3, [r3, #1]
 8011bc4:	2b30      	cmp	r3, #48	; 0x30
 8011bc6:	d0f9      	beq.n	8011bbc <_strtod_l+0x28c>
 8011bc8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011bcc:	2f08      	cmp	r7, #8
 8011bce:	f63f af7d 	bhi.w	8011acc <_strtod_l+0x19c>
 8011bd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011bd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8011bda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011bdc:	1c5f      	adds	r7, r3, #1
 8011bde:	971b      	str	r7, [sp, #108]	; 0x6c
 8011be0:	785b      	ldrb	r3, [r3, #1]
 8011be2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8011be6:	f1b8 0f09 	cmp.w	r8, #9
 8011bea:	d937      	bls.n	8011c5c <_strtod_l+0x32c>
 8011bec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011bee:	1a7f      	subs	r7, r7, r1
 8011bf0:	2f08      	cmp	r7, #8
 8011bf2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011bf6:	dc37      	bgt.n	8011c68 <_strtod_l+0x338>
 8011bf8:	45be      	cmp	lr, r7
 8011bfa:	bfa8      	it	ge
 8011bfc:	46be      	movge	lr, r7
 8011bfe:	f1bc 0f00 	cmp.w	ip, #0
 8011c02:	d001      	beq.n	8011c08 <_strtod_l+0x2d8>
 8011c04:	f1ce 0e00 	rsb	lr, lr, #0
 8011c08:	2c00      	cmp	r4, #0
 8011c0a:	d151      	bne.n	8011cb0 <_strtod_l+0x380>
 8011c0c:	2800      	cmp	r0, #0
 8011c0e:	f47f aece 	bne.w	80119ae <_strtod_l+0x7e>
 8011c12:	9a06      	ldr	r2, [sp, #24]
 8011c14:	2a00      	cmp	r2, #0
 8011c16:	f47f aeca 	bne.w	80119ae <_strtod_l+0x7e>
 8011c1a:	9a04      	ldr	r2, [sp, #16]
 8011c1c:	2a00      	cmp	r2, #0
 8011c1e:	f47f aee4 	bne.w	80119ea <_strtod_l+0xba>
 8011c22:	2b4e      	cmp	r3, #78	; 0x4e
 8011c24:	d027      	beq.n	8011c76 <_strtod_l+0x346>
 8011c26:	dc21      	bgt.n	8011c6c <_strtod_l+0x33c>
 8011c28:	2b49      	cmp	r3, #73	; 0x49
 8011c2a:	f47f aede 	bne.w	80119ea <_strtod_l+0xba>
 8011c2e:	49a0      	ldr	r1, [pc, #640]	; (8011eb0 <_strtod_l+0x580>)
 8011c30:	a81b      	add	r0, sp, #108	; 0x6c
 8011c32:	f001 f8a7 	bl	8012d84 <__match>
 8011c36:	2800      	cmp	r0, #0
 8011c38:	f43f aed7 	beq.w	80119ea <_strtod_l+0xba>
 8011c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c3e:	499d      	ldr	r1, [pc, #628]	; (8011eb4 <_strtod_l+0x584>)
 8011c40:	3b01      	subs	r3, #1
 8011c42:	a81b      	add	r0, sp, #108	; 0x6c
 8011c44:	931b      	str	r3, [sp, #108]	; 0x6c
 8011c46:	f001 f89d 	bl	8012d84 <__match>
 8011c4a:	b910      	cbnz	r0, 8011c52 <_strtod_l+0x322>
 8011c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c4e:	3301      	adds	r3, #1
 8011c50:	931b      	str	r3, [sp, #108]	; 0x6c
 8011c52:	f8df b274 	ldr.w	fp, [pc, #628]	; 8011ec8 <_strtod_l+0x598>
 8011c56:	f04f 0a00 	mov.w	sl, #0
 8011c5a:	e6a8      	b.n	80119ae <_strtod_l+0x7e>
 8011c5c:	210a      	movs	r1, #10
 8011c5e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011c62:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011c66:	e7b8      	b.n	8011bda <_strtod_l+0x2aa>
 8011c68:	46be      	mov	lr, r7
 8011c6a:	e7c8      	b.n	8011bfe <_strtod_l+0x2ce>
 8011c6c:	2b69      	cmp	r3, #105	; 0x69
 8011c6e:	d0de      	beq.n	8011c2e <_strtod_l+0x2fe>
 8011c70:	2b6e      	cmp	r3, #110	; 0x6e
 8011c72:	f47f aeba 	bne.w	80119ea <_strtod_l+0xba>
 8011c76:	4990      	ldr	r1, [pc, #576]	; (8011eb8 <_strtod_l+0x588>)
 8011c78:	a81b      	add	r0, sp, #108	; 0x6c
 8011c7a:	f001 f883 	bl	8012d84 <__match>
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	f43f aeb3 	beq.w	80119ea <_strtod_l+0xba>
 8011c84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	2b28      	cmp	r3, #40	; 0x28
 8011c8a:	d10e      	bne.n	8011caa <_strtod_l+0x37a>
 8011c8c:	aa1e      	add	r2, sp, #120	; 0x78
 8011c8e:	498b      	ldr	r1, [pc, #556]	; (8011ebc <_strtod_l+0x58c>)
 8011c90:	a81b      	add	r0, sp, #108	; 0x6c
 8011c92:	f001 f88b 	bl	8012dac <__hexnan>
 8011c96:	2805      	cmp	r0, #5
 8011c98:	d107      	bne.n	8011caa <_strtod_l+0x37a>
 8011c9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011c9c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011ca0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011ca4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011ca8:	e681      	b.n	80119ae <_strtod_l+0x7e>
 8011caa:	f8df b224 	ldr.w	fp, [pc, #548]	; 8011ed0 <_strtod_l+0x5a0>
 8011cae:	e7d2      	b.n	8011c56 <_strtod_l+0x326>
 8011cb0:	ebae 0302 	sub.w	r3, lr, r2
 8011cb4:	9306      	str	r3, [sp, #24]
 8011cb6:	9b05      	ldr	r3, [sp, #20]
 8011cb8:	9807      	ldr	r0, [sp, #28]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	bf08      	it	eq
 8011cbe:	4623      	moveq	r3, r4
 8011cc0:	2c10      	cmp	r4, #16
 8011cc2:	9305      	str	r3, [sp, #20]
 8011cc4:	46a0      	mov	r8, r4
 8011cc6:	bfa8      	it	ge
 8011cc8:	f04f 0810 	movge.w	r8, #16
 8011ccc:	f7ee fc2a 	bl	8000524 <__aeabi_ui2d>
 8011cd0:	2c09      	cmp	r4, #9
 8011cd2:	4682      	mov	sl, r0
 8011cd4:	468b      	mov	fp, r1
 8011cd6:	dc13      	bgt.n	8011d00 <_strtod_l+0x3d0>
 8011cd8:	9b06      	ldr	r3, [sp, #24]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	f43f ae67 	beq.w	80119ae <_strtod_l+0x7e>
 8011ce0:	9b06      	ldr	r3, [sp, #24]
 8011ce2:	dd7a      	ble.n	8011dda <_strtod_l+0x4aa>
 8011ce4:	2b16      	cmp	r3, #22
 8011ce6:	dc61      	bgt.n	8011dac <_strtod_l+0x47c>
 8011ce8:	4a75      	ldr	r2, [pc, #468]	; (8011ec0 <_strtod_l+0x590>)
 8011cea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011cee:	e9de 0100 	ldrd	r0, r1, [lr]
 8011cf2:	4652      	mov	r2, sl
 8011cf4:	465b      	mov	r3, fp
 8011cf6:	f7ee fc8f 	bl	8000618 <__aeabi_dmul>
 8011cfa:	4682      	mov	sl, r0
 8011cfc:	468b      	mov	fp, r1
 8011cfe:	e656      	b.n	80119ae <_strtod_l+0x7e>
 8011d00:	4b6f      	ldr	r3, [pc, #444]	; (8011ec0 <_strtod_l+0x590>)
 8011d02:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011d06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011d0a:	f7ee fc85 	bl	8000618 <__aeabi_dmul>
 8011d0e:	4606      	mov	r6, r0
 8011d10:	4628      	mov	r0, r5
 8011d12:	460f      	mov	r7, r1
 8011d14:	f7ee fc06 	bl	8000524 <__aeabi_ui2d>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	460b      	mov	r3, r1
 8011d1c:	4630      	mov	r0, r6
 8011d1e:	4639      	mov	r1, r7
 8011d20:	f7ee fac4 	bl	80002ac <__adddf3>
 8011d24:	2c0f      	cmp	r4, #15
 8011d26:	4682      	mov	sl, r0
 8011d28:	468b      	mov	fp, r1
 8011d2a:	ddd5      	ble.n	8011cd8 <_strtod_l+0x3a8>
 8011d2c:	9b06      	ldr	r3, [sp, #24]
 8011d2e:	eba4 0808 	sub.w	r8, r4, r8
 8011d32:	4498      	add	r8, r3
 8011d34:	f1b8 0f00 	cmp.w	r8, #0
 8011d38:	f340 8096 	ble.w	8011e68 <_strtod_l+0x538>
 8011d3c:	f018 030f 	ands.w	r3, r8, #15
 8011d40:	d00a      	beq.n	8011d58 <_strtod_l+0x428>
 8011d42:	495f      	ldr	r1, [pc, #380]	; (8011ec0 <_strtod_l+0x590>)
 8011d44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011d48:	4652      	mov	r2, sl
 8011d4a:	465b      	mov	r3, fp
 8011d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d50:	f7ee fc62 	bl	8000618 <__aeabi_dmul>
 8011d54:	4682      	mov	sl, r0
 8011d56:	468b      	mov	fp, r1
 8011d58:	f038 080f 	bics.w	r8, r8, #15
 8011d5c:	d073      	beq.n	8011e46 <_strtod_l+0x516>
 8011d5e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011d62:	dd47      	ble.n	8011df4 <_strtod_l+0x4c4>
 8011d64:	2400      	movs	r4, #0
 8011d66:	46a0      	mov	r8, r4
 8011d68:	9407      	str	r4, [sp, #28]
 8011d6a:	9405      	str	r4, [sp, #20]
 8011d6c:	2322      	movs	r3, #34	; 0x22
 8011d6e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011ec8 <_strtod_l+0x598>
 8011d72:	f8c9 3000 	str.w	r3, [r9]
 8011d76:	f04f 0a00 	mov.w	sl, #0
 8011d7a:	9b07      	ldr	r3, [sp, #28]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	f43f ae16 	beq.w	80119ae <_strtod_l+0x7e>
 8011d82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011d84:	4648      	mov	r0, r9
 8011d86:	f001 f90d 	bl	8012fa4 <_Bfree>
 8011d8a:	9905      	ldr	r1, [sp, #20]
 8011d8c:	4648      	mov	r0, r9
 8011d8e:	f001 f909 	bl	8012fa4 <_Bfree>
 8011d92:	4641      	mov	r1, r8
 8011d94:	4648      	mov	r0, r9
 8011d96:	f001 f905 	bl	8012fa4 <_Bfree>
 8011d9a:	9907      	ldr	r1, [sp, #28]
 8011d9c:	4648      	mov	r0, r9
 8011d9e:	f001 f901 	bl	8012fa4 <_Bfree>
 8011da2:	4621      	mov	r1, r4
 8011da4:	4648      	mov	r0, r9
 8011da6:	f001 f8fd 	bl	8012fa4 <_Bfree>
 8011daa:	e600      	b.n	80119ae <_strtod_l+0x7e>
 8011dac:	9a06      	ldr	r2, [sp, #24]
 8011dae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011db2:	4293      	cmp	r3, r2
 8011db4:	dbba      	blt.n	8011d2c <_strtod_l+0x3fc>
 8011db6:	4d42      	ldr	r5, [pc, #264]	; (8011ec0 <_strtod_l+0x590>)
 8011db8:	f1c4 040f 	rsb	r4, r4, #15
 8011dbc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011dc0:	4652      	mov	r2, sl
 8011dc2:	465b      	mov	r3, fp
 8011dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dc8:	f7ee fc26 	bl	8000618 <__aeabi_dmul>
 8011dcc:	9b06      	ldr	r3, [sp, #24]
 8011dce:	1b1c      	subs	r4, r3, r4
 8011dd0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011dd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011dd8:	e78d      	b.n	8011cf6 <_strtod_l+0x3c6>
 8011dda:	f113 0f16 	cmn.w	r3, #22
 8011dde:	dba5      	blt.n	8011d2c <_strtod_l+0x3fc>
 8011de0:	4a37      	ldr	r2, [pc, #220]	; (8011ec0 <_strtod_l+0x590>)
 8011de2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8011de6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011dea:	4650      	mov	r0, sl
 8011dec:	4659      	mov	r1, fp
 8011dee:	f7ee fd3d 	bl	800086c <__aeabi_ddiv>
 8011df2:	e782      	b.n	8011cfa <_strtod_l+0x3ca>
 8011df4:	2300      	movs	r3, #0
 8011df6:	4e33      	ldr	r6, [pc, #204]	; (8011ec4 <_strtod_l+0x594>)
 8011df8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011dfc:	4650      	mov	r0, sl
 8011dfe:	4659      	mov	r1, fp
 8011e00:	461d      	mov	r5, r3
 8011e02:	f1b8 0f01 	cmp.w	r8, #1
 8011e06:	dc21      	bgt.n	8011e4c <_strtod_l+0x51c>
 8011e08:	b10b      	cbz	r3, 8011e0e <_strtod_l+0x4de>
 8011e0a:	4682      	mov	sl, r0
 8011e0c:	468b      	mov	fp, r1
 8011e0e:	4b2d      	ldr	r3, [pc, #180]	; (8011ec4 <_strtod_l+0x594>)
 8011e10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011e14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011e18:	4652      	mov	r2, sl
 8011e1a:	465b      	mov	r3, fp
 8011e1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011e20:	f7ee fbfa 	bl	8000618 <__aeabi_dmul>
 8011e24:	4b28      	ldr	r3, [pc, #160]	; (8011ec8 <_strtod_l+0x598>)
 8011e26:	460a      	mov	r2, r1
 8011e28:	400b      	ands	r3, r1
 8011e2a:	4928      	ldr	r1, [pc, #160]	; (8011ecc <_strtod_l+0x59c>)
 8011e2c:	428b      	cmp	r3, r1
 8011e2e:	4682      	mov	sl, r0
 8011e30:	d898      	bhi.n	8011d64 <_strtod_l+0x434>
 8011e32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011e36:	428b      	cmp	r3, r1
 8011e38:	bf86      	itte	hi
 8011e3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011ed4 <_strtod_l+0x5a4>
 8011e3e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8011e42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011e46:	2300      	movs	r3, #0
 8011e48:	9304      	str	r3, [sp, #16]
 8011e4a:	e077      	b.n	8011f3c <_strtod_l+0x60c>
 8011e4c:	f018 0f01 	tst.w	r8, #1
 8011e50:	d006      	beq.n	8011e60 <_strtod_l+0x530>
 8011e52:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8011e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5a:	f7ee fbdd 	bl	8000618 <__aeabi_dmul>
 8011e5e:	2301      	movs	r3, #1
 8011e60:	3501      	adds	r5, #1
 8011e62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011e66:	e7cc      	b.n	8011e02 <_strtod_l+0x4d2>
 8011e68:	d0ed      	beq.n	8011e46 <_strtod_l+0x516>
 8011e6a:	f1c8 0800 	rsb	r8, r8, #0
 8011e6e:	f018 020f 	ands.w	r2, r8, #15
 8011e72:	d00a      	beq.n	8011e8a <_strtod_l+0x55a>
 8011e74:	4b12      	ldr	r3, [pc, #72]	; (8011ec0 <_strtod_l+0x590>)
 8011e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e7a:	4650      	mov	r0, sl
 8011e7c:	4659      	mov	r1, fp
 8011e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e82:	f7ee fcf3 	bl	800086c <__aeabi_ddiv>
 8011e86:	4682      	mov	sl, r0
 8011e88:	468b      	mov	fp, r1
 8011e8a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011e8e:	d0da      	beq.n	8011e46 <_strtod_l+0x516>
 8011e90:	f1b8 0f1f 	cmp.w	r8, #31
 8011e94:	dd20      	ble.n	8011ed8 <_strtod_l+0x5a8>
 8011e96:	2400      	movs	r4, #0
 8011e98:	46a0      	mov	r8, r4
 8011e9a:	9407      	str	r4, [sp, #28]
 8011e9c:	9405      	str	r4, [sp, #20]
 8011e9e:	2322      	movs	r3, #34	; 0x22
 8011ea0:	f04f 0a00 	mov.w	sl, #0
 8011ea4:	f04f 0b00 	mov.w	fp, #0
 8011ea8:	f8c9 3000 	str.w	r3, [r9]
 8011eac:	e765      	b.n	8011d7a <_strtod_l+0x44a>
 8011eae:	bf00      	nop
 8011eb0:	080151ad 	.word	0x080151ad
 8011eb4:	080151b0 	.word	0x080151b0
 8011eb8:	080151b6 	.word	0x080151b6
 8011ebc:	080151d0 	.word	0x080151d0
 8011ec0:	080152a8 	.word	0x080152a8
 8011ec4:	08015280 	.word	0x08015280
 8011ec8:	7ff00000 	.word	0x7ff00000
 8011ecc:	7ca00000 	.word	0x7ca00000
 8011ed0:	fff80000 	.word	0xfff80000
 8011ed4:	7fefffff 	.word	0x7fefffff
 8011ed8:	f018 0310 	ands.w	r3, r8, #16
 8011edc:	bf18      	it	ne
 8011ede:	236a      	movne	r3, #106	; 0x6a
 8011ee0:	4da0      	ldr	r5, [pc, #640]	; (8012164 <_strtod_l+0x834>)
 8011ee2:	9304      	str	r3, [sp, #16]
 8011ee4:	4650      	mov	r0, sl
 8011ee6:	4659      	mov	r1, fp
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f1b8 0f00 	cmp.w	r8, #0
 8011eee:	f300 810a 	bgt.w	8012106 <_strtod_l+0x7d6>
 8011ef2:	b10b      	cbz	r3, 8011ef8 <_strtod_l+0x5c8>
 8011ef4:	4682      	mov	sl, r0
 8011ef6:	468b      	mov	fp, r1
 8011ef8:	9b04      	ldr	r3, [sp, #16]
 8011efa:	b1bb      	cbz	r3, 8011f2c <_strtod_l+0x5fc>
 8011efc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011f00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	4659      	mov	r1, fp
 8011f08:	dd10      	ble.n	8011f2c <_strtod_l+0x5fc>
 8011f0a:	2b1f      	cmp	r3, #31
 8011f0c:	f340 8107 	ble.w	801211e <_strtod_l+0x7ee>
 8011f10:	2b34      	cmp	r3, #52	; 0x34
 8011f12:	bfde      	ittt	le
 8011f14:	3b20      	suble	r3, #32
 8011f16:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8011f1a:	fa02 f303 	lslle.w	r3, r2, r3
 8011f1e:	f04f 0a00 	mov.w	sl, #0
 8011f22:	bfcc      	ite	gt
 8011f24:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011f28:	ea03 0b01 	andle.w	fp, r3, r1
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	2300      	movs	r3, #0
 8011f30:	4650      	mov	r0, sl
 8011f32:	4659      	mov	r1, fp
 8011f34:	f7ee fdd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d1ac      	bne.n	8011e96 <_strtod_l+0x566>
 8011f3c:	9b07      	ldr	r3, [sp, #28]
 8011f3e:	9300      	str	r3, [sp, #0]
 8011f40:	9a05      	ldr	r2, [sp, #20]
 8011f42:	9908      	ldr	r1, [sp, #32]
 8011f44:	4623      	mov	r3, r4
 8011f46:	4648      	mov	r0, r9
 8011f48:	f001 f87e 	bl	8013048 <__s2b>
 8011f4c:	9007      	str	r0, [sp, #28]
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	f43f af08 	beq.w	8011d64 <_strtod_l+0x434>
 8011f54:	9a06      	ldr	r2, [sp, #24]
 8011f56:	9b06      	ldr	r3, [sp, #24]
 8011f58:	2a00      	cmp	r2, #0
 8011f5a:	f1c3 0300 	rsb	r3, r3, #0
 8011f5e:	bfa8      	it	ge
 8011f60:	2300      	movge	r3, #0
 8011f62:	930e      	str	r3, [sp, #56]	; 0x38
 8011f64:	2400      	movs	r4, #0
 8011f66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011f6a:	9316      	str	r3, [sp, #88]	; 0x58
 8011f6c:	46a0      	mov	r8, r4
 8011f6e:	9b07      	ldr	r3, [sp, #28]
 8011f70:	4648      	mov	r0, r9
 8011f72:	6859      	ldr	r1, [r3, #4]
 8011f74:	f000 ffe2 	bl	8012f3c <_Balloc>
 8011f78:	9005      	str	r0, [sp, #20]
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	f43f aef6 	beq.w	8011d6c <_strtod_l+0x43c>
 8011f80:	9b07      	ldr	r3, [sp, #28]
 8011f82:	691a      	ldr	r2, [r3, #16]
 8011f84:	3202      	adds	r2, #2
 8011f86:	f103 010c 	add.w	r1, r3, #12
 8011f8a:	0092      	lsls	r2, r2, #2
 8011f8c:	300c      	adds	r0, #12
 8011f8e:	f7ff fa0f 	bl	80113b0 <memcpy>
 8011f92:	aa1e      	add	r2, sp, #120	; 0x78
 8011f94:	a91d      	add	r1, sp, #116	; 0x74
 8011f96:	ec4b ab10 	vmov	d0, sl, fp
 8011f9a:	4648      	mov	r0, r9
 8011f9c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011fa0:	f001 fb0e 	bl	80135c0 <__d2b>
 8011fa4:	901c      	str	r0, [sp, #112]	; 0x70
 8011fa6:	2800      	cmp	r0, #0
 8011fa8:	f43f aee0 	beq.w	8011d6c <_strtod_l+0x43c>
 8011fac:	2101      	movs	r1, #1
 8011fae:	4648      	mov	r0, r9
 8011fb0:	f001 f8d6 	bl	8013160 <__i2b>
 8011fb4:	4680      	mov	r8, r0
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	f43f aed8 	beq.w	8011d6c <_strtod_l+0x43c>
 8011fbc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011fbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011fc0:	2e00      	cmp	r6, #0
 8011fc2:	bfab      	itete	ge
 8011fc4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011fc6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011fc8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8011fca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8011fcc:	bfac      	ite	ge
 8011fce:	18f7      	addge	r7, r6, r3
 8011fd0:	1b9d      	sublt	r5, r3, r6
 8011fd2:	9b04      	ldr	r3, [sp, #16]
 8011fd4:	1af6      	subs	r6, r6, r3
 8011fd6:	4416      	add	r6, r2
 8011fd8:	4b63      	ldr	r3, [pc, #396]	; (8012168 <_strtod_l+0x838>)
 8011fda:	3e01      	subs	r6, #1
 8011fdc:	429e      	cmp	r6, r3
 8011fde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011fe2:	f280 80af 	bge.w	8012144 <_strtod_l+0x814>
 8011fe6:	1b9b      	subs	r3, r3, r6
 8011fe8:	2b1f      	cmp	r3, #31
 8011fea:	eba2 0203 	sub.w	r2, r2, r3
 8011fee:	f04f 0101 	mov.w	r1, #1
 8011ff2:	f300 809b 	bgt.w	801212c <_strtod_l+0x7fc>
 8011ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8011ffa:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8012000:	18be      	adds	r6, r7, r2
 8012002:	9b04      	ldr	r3, [sp, #16]
 8012004:	42b7      	cmp	r7, r6
 8012006:	4415      	add	r5, r2
 8012008:	441d      	add	r5, r3
 801200a:	463b      	mov	r3, r7
 801200c:	bfa8      	it	ge
 801200e:	4633      	movge	r3, r6
 8012010:	42ab      	cmp	r3, r5
 8012012:	bfa8      	it	ge
 8012014:	462b      	movge	r3, r5
 8012016:	2b00      	cmp	r3, #0
 8012018:	bfc2      	ittt	gt
 801201a:	1af6      	subgt	r6, r6, r3
 801201c:	1aed      	subgt	r5, r5, r3
 801201e:	1aff      	subgt	r7, r7, r3
 8012020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012022:	b1bb      	cbz	r3, 8012054 <_strtod_l+0x724>
 8012024:	4641      	mov	r1, r8
 8012026:	461a      	mov	r2, r3
 8012028:	4648      	mov	r0, r9
 801202a:	f001 f939 	bl	80132a0 <__pow5mult>
 801202e:	4680      	mov	r8, r0
 8012030:	2800      	cmp	r0, #0
 8012032:	f43f ae9b 	beq.w	8011d6c <_strtod_l+0x43c>
 8012036:	4601      	mov	r1, r0
 8012038:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801203a:	4648      	mov	r0, r9
 801203c:	f001 f899 	bl	8013172 <__multiply>
 8012040:	900c      	str	r0, [sp, #48]	; 0x30
 8012042:	2800      	cmp	r0, #0
 8012044:	f43f ae92 	beq.w	8011d6c <_strtod_l+0x43c>
 8012048:	991c      	ldr	r1, [sp, #112]	; 0x70
 801204a:	4648      	mov	r0, r9
 801204c:	f000 ffaa 	bl	8012fa4 <_Bfree>
 8012050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012052:	931c      	str	r3, [sp, #112]	; 0x70
 8012054:	2e00      	cmp	r6, #0
 8012056:	dc7a      	bgt.n	801214e <_strtod_l+0x81e>
 8012058:	9b06      	ldr	r3, [sp, #24]
 801205a:	2b00      	cmp	r3, #0
 801205c:	dd08      	ble.n	8012070 <_strtod_l+0x740>
 801205e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012060:	9905      	ldr	r1, [sp, #20]
 8012062:	4648      	mov	r0, r9
 8012064:	f001 f91c 	bl	80132a0 <__pow5mult>
 8012068:	9005      	str	r0, [sp, #20]
 801206a:	2800      	cmp	r0, #0
 801206c:	f43f ae7e 	beq.w	8011d6c <_strtod_l+0x43c>
 8012070:	2d00      	cmp	r5, #0
 8012072:	dd08      	ble.n	8012086 <_strtod_l+0x756>
 8012074:	462a      	mov	r2, r5
 8012076:	9905      	ldr	r1, [sp, #20]
 8012078:	4648      	mov	r0, r9
 801207a:	f001 f95f 	bl	801333c <__lshift>
 801207e:	9005      	str	r0, [sp, #20]
 8012080:	2800      	cmp	r0, #0
 8012082:	f43f ae73 	beq.w	8011d6c <_strtod_l+0x43c>
 8012086:	2f00      	cmp	r7, #0
 8012088:	dd08      	ble.n	801209c <_strtod_l+0x76c>
 801208a:	4641      	mov	r1, r8
 801208c:	463a      	mov	r2, r7
 801208e:	4648      	mov	r0, r9
 8012090:	f001 f954 	bl	801333c <__lshift>
 8012094:	4680      	mov	r8, r0
 8012096:	2800      	cmp	r0, #0
 8012098:	f43f ae68 	beq.w	8011d6c <_strtod_l+0x43c>
 801209c:	9a05      	ldr	r2, [sp, #20]
 801209e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80120a0:	4648      	mov	r0, r9
 80120a2:	f001 f9b9 	bl	8013418 <__mdiff>
 80120a6:	4604      	mov	r4, r0
 80120a8:	2800      	cmp	r0, #0
 80120aa:	f43f ae5f 	beq.w	8011d6c <_strtod_l+0x43c>
 80120ae:	68c3      	ldr	r3, [r0, #12]
 80120b0:	930c      	str	r3, [sp, #48]	; 0x30
 80120b2:	2300      	movs	r3, #0
 80120b4:	60c3      	str	r3, [r0, #12]
 80120b6:	4641      	mov	r1, r8
 80120b8:	f001 f994 	bl	80133e4 <__mcmp>
 80120bc:	2800      	cmp	r0, #0
 80120be:	da55      	bge.n	801216c <_strtod_l+0x83c>
 80120c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120c2:	b9e3      	cbnz	r3, 80120fe <_strtod_l+0x7ce>
 80120c4:	f1ba 0f00 	cmp.w	sl, #0
 80120c8:	d119      	bne.n	80120fe <_strtod_l+0x7ce>
 80120ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120ce:	b9b3      	cbnz	r3, 80120fe <_strtod_l+0x7ce>
 80120d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80120d4:	0d1b      	lsrs	r3, r3, #20
 80120d6:	051b      	lsls	r3, r3, #20
 80120d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80120dc:	d90f      	bls.n	80120fe <_strtod_l+0x7ce>
 80120de:	6963      	ldr	r3, [r4, #20]
 80120e0:	b913      	cbnz	r3, 80120e8 <_strtod_l+0x7b8>
 80120e2:	6923      	ldr	r3, [r4, #16]
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	dd0a      	ble.n	80120fe <_strtod_l+0x7ce>
 80120e8:	4621      	mov	r1, r4
 80120ea:	2201      	movs	r2, #1
 80120ec:	4648      	mov	r0, r9
 80120ee:	f001 f925 	bl	801333c <__lshift>
 80120f2:	4641      	mov	r1, r8
 80120f4:	4604      	mov	r4, r0
 80120f6:	f001 f975 	bl	80133e4 <__mcmp>
 80120fa:	2800      	cmp	r0, #0
 80120fc:	dc67      	bgt.n	80121ce <_strtod_l+0x89e>
 80120fe:	9b04      	ldr	r3, [sp, #16]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d171      	bne.n	80121e8 <_strtod_l+0x8b8>
 8012104:	e63d      	b.n	8011d82 <_strtod_l+0x452>
 8012106:	f018 0f01 	tst.w	r8, #1
 801210a:	d004      	beq.n	8012116 <_strtod_l+0x7e6>
 801210c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012110:	f7ee fa82 	bl	8000618 <__aeabi_dmul>
 8012114:	2301      	movs	r3, #1
 8012116:	ea4f 0868 	mov.w	r8, r8, asr #1
 801211a:	3508      	adds	r5, #8
 801211c:	e6e5      	b.n	8011eea <_strtod_l+0x5ba>
 801211e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012122:	fa02 f303 	lsl.w	r3, r2, r3
 8012126:	ea03 0a0a 	and.w	sl, r3, sl
 801212a:	e6ff      	b.n	8011f2c <_strtod_l+0x5fc>
 801212c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012130:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012134:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012138:	36e2      	adds	r6, #226	; 0xe2
 801213a:	fa01 f306 	lsl.w	r3, r1, r6
 801213e:	930a      	str	r3, [sp, #40]	; 0x28
 8012140:	910f      	str	r1, [sp, #60]	; 0x3c
 8012142:	e75d      	b.n	8012000 <_strtod_l+0x6d0>
 8012144:	2300      	movs	r3, #0
 8012146:	930a      	str	r3, [sp, #40]	; 0x28
 8012148:	2301      	movs	r3, #1
 801214a:	930f      	str	r3, [sp, #60]	; 0x3c
 801214c:	e758      	b.n	8012000 <_strtod_l+0x6d0>
 801214e:	4632      	mov	r2, r6
 8012150:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012152:	4648      	mov	r0, r9
 8012154:	f001 f8f2 	bl	801333c <__lshift>
 8012158:	901c      	str	r0, [sp, #112]	; 0x70
 801215a:	2800      	cmp	r0, #0
 801215c:	f47f af7c 	bne.w	8012058 <_strtod_l+0x728>
 8012160:	e604      	b.n	8011d6c <_strtod_l+0x43c>
 8012162:	bf00      	nop
 8012164:	080151e8 	.word	0x080151e8
 8012168:	fffffc02 	.word	0xfffffc02
 801216c:	465d      	mov	r5, fp
 801216e:	f040 8086 	bne.w	801227e <_strtod_l+0x94e>
 8012172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012178:	b32a      	cbz	r2, 80121c6 <_strtod_l+0x896>
 801217a:	4aaf      	ldr	r2, [pc, #700]	; (8012438 <_strtod_l+0xb08>)
 801217c:	4293      	cmp	r3, r2
 801217e:	d153      	bne.n	8012228 <_strtod_l+0x8f8>
 8012180:	9b04      	ldr	r3, [sp, #16]
 8012182:	4650      	mov	r0, sl
 8012184:	b1d3      	cbz	r3, 80121bc <_strtod_l+0x88c>
 8012186:	4aad      	ldr	r2, [pc, #692]	; (801243c <_strtod_l+0xb0c>)
 8012188:	402a      	ands	r2, r5
 801218a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801218e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012192:	d816      	bhi.n	80121c2 <_strtod_l+0x892>
 8012194:	0d12      	lsrs	r2, r2, #20
 8012196:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801219a:	fa01 f303 	lsl.w	r3, r1, r3
 801219e:	4298      	cmp	r0, r3
 80121a0:	d142      	bne.n	8012228 <_strtod_l+0x8f8>
 80121a2:	4ba7      	ldr	r3, [pc, #668]	; (8012440 <_strtod_l+0xb10>)
 80121a4:	429d      	cmp	r5, r3
 80121a6:	d102      	bne.n	80121ae <_strtod_l+0x87e>
 80121a8:	3001      	adds	r0, #1
 80121aa:	f43f addf 	beq.w	8011d6c <_strtod_l+0x43c>
 80121ae:	4ba3      	ldr	r3, [pc, #652]	; (801243c <_strtod_l+0xb0c>)
 80121b0:	402b      	ands	r3, r5
 80121b2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80121b6:	f04f 0a00 	mov.w	sl, #0
 80121ba:	e7a0      	b.n	80120fe <_strtod_l+0x7ce>
 80121bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121c0:	e7ed      	b.n	801219e <_strtod_l+0x86e>
 80121c2:	460b      	mov	r3, r1
 80121c4:	e7eb      	b.n	801219e <_strtod_l+0x86e>
 80121c6:	bb7b      	cbnz	r3, 8012228 <_strtod_l+0x8f8>
 80121c8:	f1ba 0f00 	cmp.w	sl, #0
 80121cc:	d12c      	bne.n	8012228 <_strtod_l+0x8f8>
 80121ce:	9904      	ldr	r1, [sp, #16]
 80121d0:	4a9a      	ldr	r2, [pc, #616]	; (801243c <_strtod_l+0xb0c>)
 80121d2:	465b      	mov	r3, fp
 80121d4:	b1f1      	cbz	r1, 8012214 <_strtod_l+0x8e4>
 80121d6:	ea02 010b 	and.w	r1, r2, fp
 80121da:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80121de:	dc19      	bgt.n	8012214 <_strtod_l+0x8e4>
 80121e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80121e4:	f77f ae5b 	ble.w	8011e9e <_strtod_l+0x56e>
 80121e8:	4a96      	ldr	r2, [pc, #600]	; (8012444 <_strtod_l+0xb14>)
 80121ea:	2300      	movs	r3, #0
 80121ec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80121f0:	4650      	mov	r0, sl
 80121f2:	4659      	mov	r1, fp
 80121f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80121f8:	f7ee fa0e 	bl	8000618 <__aeabi_dmul>
 80121fc:	4682      	mov	sl, r0
 80121fe:	468b      	mov	fp, r1
 8012200:	2900      	cmp	r1, #0
 8012202:	f47f adbe 	bne.w	8011d82 <_strtod_l+0x452>
 8012206:	2800      	cmp	r0, #0
 8012208:	f47f adbb 	bne.w	8011d82 <_strtod_l+0x452>
 801220c:	2322      	movs	r3, #34	; 0x22
 801220e:	f8c9 3000 	str.w	r3, [r9]
 8012212:	e5b6      	b.n	8011d82 <_strtod_l+0x452>
 8012214:	4013      	ands	r3, r2
 8012216:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801221a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801221e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012222:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012226:	e76a      	b.n	80120fe <_strtod_l+0x7ce>
 8012228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801222a:	b193      	cbz	r3, 8012252 <_strtod_l+0x922>
 801222c:	422b      	tst	r3, r5
 801222e:	f43f af66 	beq.w	80120fe <_strtod_l+0x7ce>
 8012232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012234:	9a04      	ldr	r2, [sp, #16]
 8012236:	4650      	mov	r0, sl
 8012238:	4659      	mov	r1, fp
 801223a:	b173      	cbz	r3, 801225a <_strtod_l+0x92a>
 801223c:	f7ff fb5b 	bl	80118f6 <sulp>
 8012240:	4602      	mov	r2, r0
 8012242:	460b      	mov	r3, r1
 8012244:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012248:	f7ee f830 	bl	80002ac <__adddf3>
 801224c:	4682      	mov	sl, r0
 801224e:	468b      	mov	fp, r1
 8012250:	e755      	b.n	80120fe <_strtod_l+0x7ce>
 8012252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012254:	ea13 0f0a 	tst.w	r3, sl
 8012258:	e7e9      	b.n	801222e <_strtod_l+0x8fe>
 801225a:	f7ff fb4c 	bl	80118f6 <sulp>
 801225e:	4602      	mov	r2, r0
 8012260:	460b      	mov	r3, r1
 8012262:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012266:	f7ee f81f 	bl	80002a8 <__aeabi_dsub>
 801226a:	2200      	movs	r2, #0
 801226c:	2300      	movs	r3, #0
 801226e:	4682      	mov	sl, r0
 8012270:	468b      	mov	fp, r1
 8012272:	f7ee fc39 	bl	8000ae8 <__aeabi_dcmpeq>
 8012276:	2800      	cmp	r0, #0
 8012278:	f47f ae11 	bne.w	8011e9e <_strtod_l+0x56e>
 801227c:	e73f      	b.n	80120fe <_strtod_l+0x7ce>
 801227e:	4641      	mov	r1, r8
 8012280:	4620      	mov	r0, r4
 8012282:	f001 f9ec 	bl	801365e <__ratio>
 8012286:	ec57 6b10 	vmov	r6, r7, d0
 801228a:	2200      	movs	r2, #0
 801228c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012290:	ee10 0a10 	vmov	r0, s0
 8012294:	4639      	mov	r1, r7
 8012296:	f7ee fc3b 	bl	8000b10 <__aeabi_dcmple>
 801229a:	2800      	cmp	r0, #0
 801229c:	d077      	beq.n	801238e <_strtod_l+0xa5e>
 801229e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d04a      	beq.n	801233a <_strtod_l+0xa0a>
 80122a4:	4b68      	ldr	r3, [pc, #416]	; (8012448 <_strtod_l+0xb18>)
 80122a6:	2200      	movs	r2, #0
 80122a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80122ac:	4f66      	ldr	r7, [pc, #408]	; (8012448 <_strtod_l+0xb18>)
 80122ae:	2600      	movs	r6, #0
 80122b0:	4b62      	ldr	r3, [pc, #392]	; (801243c <_strtod_l+0xb0c>)
 80122b2:	402b      	ands	r3, r5
 80122b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80122b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80122b8:	4b64      	ldr	r3, [pc, #400]	; (801244c <_strtod_l+0xb1c>)
 80122ba:	429a      	cmp	r2, r3
 80122bc:	f040 80ce 	bne.w	801245c <_strtod_l+0xb2c>
 80122c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80122c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80122c8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80122cc:	ec4b ab10 	vmov	d0, sl, fp
 80122d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80122d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80122d8:	f001 f8fc 	bl	80134d4 <__ulp>
 80122dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80122e0:	ec53 2b10 	vmov	r2, r3, d0
 80122e4:	f7ee f998 	bl	8000618 <__aeabi_dmul>
 80122e8:	4652      	mov	r2, sl
 80122ea:	465b      	mov	r3, fp
 80122ec:	f7ed ffde 	bl	80002ac <__adddf3>
 80122f0:	460b      	mov	r3, r1
 80122f2:	4952      	ldr	r1, [pc, #328]	; (801243c <_strtod_l+0xb0c>)
 80122f4:	4a56      	ldr	r2, [pc, #344]	; (8012450 <_strtod_l+0xb20>)
 80122f6:	4019      	ands	r1, r3
 80122f8:	4291      	cmp	r1, r2
 80122fa:	4682      	mov	sl, r0
 80122fc:	d95b      	bls.n	80123b6 <_strtod_l+0xa86>
 80122fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012300:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012304:	4293      	cmp	r3, r2
 8012306:	d103      	bne.n	8012310 <_strtod_l+0x9e0>
 8012308:	9b08      	ldr	r3, [sp, #32]
 801230a:	3301      	adds	r3, #1
 801230c:	f43f ad2e 	beq.w	8011d6c <_strtod_l+0x43c>
 8012310:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8012440 <_strtod_l+0xb10>
 8012314:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012318:	991c      	ldr	r1, [sp, #112]	; 0x70
 801231a:	4648      	mov	r0, r9
 801231c:	f000 fe42 	bl	8012fa4 <_Bfree>
 8012320:	9905      	ldr	r1, [sp, #20]
 8012322:	4648      	mov	r0, r9
 8012324:	f000 fe3e 	bl	8012fa4 <_Bfree>
 8012328:	4641      	mov	r1, r8
 801232a:	4648      	mov	r0, r9
 801232c:	f000 fe3a 	bl	8012fa4 <_Bfree>
 8012330:	4621      	mov	r1, r4
 8012332:	4648      	mov	r0, r9
 8012334:	f000 fe36 	bl	8012fa4 <_Bfree>
 8012338:	e619      	b.n	8011f6e <_strtod_l+0x63e>
 801233a:	f1ba 0f00 	cmp.w	sl, #0
 801233e:	d11a      	bne.n	8012376 <_strtod_l+0xa46>
 8012340:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012344:	b9eb      	cbnz	r3, 8012382 <_strtod_l+0xa52>
 8012346:	2200      	movs	r2, #0
 8012348:	4b3f      	ldr	r3, [pc, #252]	; (8012448 <_strtod_l+0xb18>)
 801234a:	4630      	mov	r0, r6
 801234c:	4639      	mov	r1, r7
 801234e:	f7ee fbd5 	bl	8000afc <__aeabi_dcmplt>
 8012352:	b9c8      	cbnz	r0, 8012388 <_strtod_l+0xa58>
 8012354:	4630      	mov	r0, r6
 8012356:	4639      	mov	r1, r7
 8012358:	2200      	movs	r2, #0
 801235a:	4b3e      	ldr	r3, [pc, #248]	; (8012454 <_strtod_l+0xb24>)
 801235c:	f7ee f95c 	bl	8000618 <__aeabi_dmul>
 8012360:	4606      	mov	r6, r0
 8012362:	460f      	mov	r7, r1
 8012364:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012368:	9618      	str	r6, [sp, #96]	; 0x60
 801236a:	9319      	str	r3, [sp, #100]	; 0x64
 801236c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8012370:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012374:	e79c      	b.n	80122b0 <_strtod_l+0x980>
 8012376:	f1ba 0f01 	cmp.w	sl, #1
 801237a:	d102      	bne.n	8012382 <_strtod_l+0xa52>
 801237c:	2d00      	cmp	r5, #0
 801237e:	f43f ad8e 	beq.w	8011e9e <_strtod_l+0x56e>
 8012382:	2200      	movs	r2, #0
 8012384:	4b34      	ldr	r3, [pc, #208]	; (8012458 <_strtod_l+0xb28>)
 8012386:	e78f      	b.n	80122a8 <_strtod_l+0x978>
 8012388:	2600      	movs	r6, #0
 801238a:	4f32      	ldr	r7, [pc, #200]	; (8012454 <_strtod_l+0xb24>)
 801238c:	e7ea      	b.n	8012364 <_strtod_l+0xa34>
 801238e:	4b31      	ldr	r3, [pc, #196]	; (8012454 <_strtod_l+0xb24>)
 8012390:	4630      	mov	r0, r6
 8012392:	4639      	mov	r1, r7
 8012394:	2200      	movs	r2, #0
 8012396:	f7ee f93f 	bl	8000618 <__aeabi_dmul>
 801239a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801239c:	4606      	mov	r6, r0
 801239e:	460f      	mov	r7, r1
 80123a0:	b933      	cbnz	r3, 80123b0 <_strtod_l+0xa80>
 80123a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123a6:	9010      	str	r0, [sp, #64]	; 0x40
 80123a8:	9311      	str	r3, [sp, #68]	; 0x44
 80123aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80123ae:	e7df      	b.n	8012370 <_strtod_l+0xa40>
 80123b0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80123b4:	e7f9      	b.n	80123aa <_strtod_l+0xa7a>
 80123b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80123ba:	9b04      	ldr	r3, [sp, #16]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d1ab      	bne.n	8012318 <_strtod_l+0x9e8>
 80123c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80123c4:	0d1b      	lsrs	r3, r3, #20
 80123c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80123c8:	051b      	lsls	r3, r3, #20
 80123ca:	429a      	cmp	r2, r3
 80123cc:	465d      	mov	r5, fp
 80123ce:	d1a3      	bne.n	8012318 <_strtod_l+0x9e8>
 80123d0:	4639      	mov	r1, r7
 80123d2:	4630      	mov	r0, r6
 80123d4:	f7ee fbd0 	bl	8000b78 <__aeabi_d2iz>
 80123d8:	f7ee f8b4 	bl	8000544 <__aeabi_i2d>
 80123dc:	460b      	mov	r3, r1
 80123de:	4602      	mov	r2, r0
 80123e0:	4639      	mov	r1, r7
 80123e2:	4630      	mov	r0, r6
 80123e4:	f7ed ff60 	bl	80002a8 <__aeabi_dsub>
 80123e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123ea:	4606      	mov	r6, r0
 80123ec:	460f      	mov	r7, r1
 80123ee:	b933      	cbnz	r3, 80123fe <_strtod_l+0xace>
 80123f0:	f1ba 0f00 	cmp.w	sl, #0
 80123f4:	d103      	bne.n	80123fe <_strtod_l+0xace>
 80123f6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80123fa:	2d00      	cmp	r5, #0
 80123fc:	d06d      	beq.n	80124da <_strtod_l+0xbaa>
 80123fe:	a30a      	add	r3, pc, #40	; (adr r3, 8012428 <_strtod_l+0xaf8>)
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	4630      	mov	r0, r6
 8012406:	4639      	mov	r1, r7
 8012408:	f7ee fb78 	bl	8000afc <__aeabi_dcmplt>
 801240c:	2800      	cmp	r0, #0
 801240e:	f47f acb8 	bne.w	8011d82 <_strtod_l+0x452>
 8012412:	a307      	add	r3, pc, #28	; (adr r3, 8012430 <_strtod_l+0xb00>)
 8012414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012418:	4630      	mov	r0, r6
 801241a:	4639      	mov	r1, r7
 801241c:	f7ee fb8c 	bl	8000b38 <__aeabi_dcmpgt>
 8012420:	2800      	cmp	r0, #0
 8012422:	f43f af79 	beq.w	8012318 <_strtod_l+0x9e8>
 8012426:	e4ac      	b.n	8011d82 <_strtod_l+0x452>
 8012428:	94a03595 	.word	0x94a03595
 801242c:	3fdfffff 	.word	0x3fdfffff
 8012430:	35afe535 	.word	0x35afe535
 8012434:	3fe00000 	.word	0x3fe00000
 8012438:	000fffff 	.word	0x000fffff
 801243c:	7ff00000 	.word	0x7ff00000
 8012440:	7fefffff 	.word	0x7fefffff
 8012444:	39500000 	.word	0x39500000
 8012448:	3ff00000 	.word	0x3ff00000
 801244c:	7fe00000 	.word	0x7fe00000
 8012450:	7c9fffff 	.word	0x7c9fffff
 8012454:	3fe00000 	.word	0x3fe00000
 8012458:	bff00000 	.word	0xbff00000
 801245c:	9b04      	ldr	r3, [sp, #16]
 801245e:	b333      	cbz	r3, 80124ae <_strtod_l+0xb7e>
 8012460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012462:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012466:	d822      	bhi.n	80124ae <_strtod_l+0xb7e>
 8012468:	a327      	add	r3, pc, #156	; (adr r3, 8012508 <_strtod_l+0xbd8>)
 801246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246e:	4630      	mov	r0, r6
 8012470:	4639      	mov	r1, r7
 8012472:	f7ee fb4d 	bl	8000b10 <__aeabi_dcmple>
 8012476:	b1a0      	cbz	r0, 80124a2 <_strtod_l+0xb72>
 8012478:	4639      	mov	r1, r7
 801247a:	4630      	mov	r0, r6
 801247c:	f7ee fba4 	bl	8000bc8 <__aeabi_d2uiz>
 8012480:	2800      	cmp	r0, #0
 8012482:	bf08      	it	eq
 8012484:	2001      	moveq	r0, #1
 8012486:	f7ee f84d 	bl	8000524 <__aeabi_ui2d>
 801248a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801248c:	4606      	mov	r6, r0
 801248e:	460f      	mov	r7, r1
 8012490:	bb03      	cbnz	r3, 80124d4 <_strtod_l+0xba4>
 8012492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012496:	9012      	str	r0, [sp, #72]	; 0x48
 8012498:	9313      	str	r3, [sp, #76]	; 0x4c
 801249a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801249e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80124a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80124a6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80124aa:	1a9b      	subs	r3, r3, r2
 80124ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80124ae:	ed9d 0b08 	vldr	d0, [sp, #32]
 80124b2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80124b6:	f001 f80d 	bl	80134d4 <__ulp>
 80124ba:	4650      	mov	r0, sl
 80124bc:	ec53 2b10 	vmov	r2, r3, d0
 80124c0:	4659      	mov	r1, fp
 80124c2:	f7ee f8a9 	bl	8000618 <__aeabi_dmul>
 80124c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80124ca:	f7ed feef 	bl	80002ac <__adddf3>
 80124ce:	4682      	mov	sl, r0
 80124d0:	468b      	mov	fp, r1
 80124d2:	e772      	b.n	80123ba <_strtod_l+0xa8a>
 80124d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80124d8:	e7df      	b.n	801249a <_strtod_l+0xb6a>
 80124da:	a30d      	add	r3, pc, #52	; (adr r3, 8012510 <_strtod_l+0xbe0>)
 80124dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e0:	f7ee fb0c 	bl	8000afc <__aeabi_dcmplt>
 80124e4:	e79c      	b.n	8012420 <_strtod_l+0xaf0>
 80124e6:	2300      	movs	r3, #0
 80124e8:	930d      	str	r3, [sp, #52]	; 0x34
 80124ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80124ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80124ee:	6013      	str	r3, [r2, #0]
 80124f0:	f7ff ba61 	b.w	80119b6 <_strtod_l+0x86>
 80124f4:	2b65      	cmp	r3, #101	; 0x65
 80124f6:	f04f 0200 	mov.w	r2, #0
 80124fa:	f43f ab4e 	beq.w	8011b9a <_strtod_l+0x26a>
 80124fe:	2101      	movs	r1, #1
 8012500:	4614      	mov	r4, r2
 8012502:	9104      	str	r1, [sp, #16]
 8012504:	f7ff bacb 	b.w	8011a9e <_strtod_l+0x16e>
 8012508:	ffc00000 	.word	0xffc00000
 801250c:	41dfffff 	.word	0x41dfffff
 8012510:	94a03595 	.word	0x94a03595
 8012514:	3fcfffff 	.word	0x3fcfffff

08012518 <_strtod_r>:
 8012518:	4b05      	ldr	r3, [pc, #20]	; (8012530 <_strtod_r+0x18>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	b410      	push	{r4}
 801251e:	6a1b      	ldr	r3, [r3, #32]
 8012520:	4c04      	ldr	r4, [pc, #16]	; (8012534 <_strtod_r+0x1c>)
 8012522:	2b00      	cmp	r3, #0
 8012524:	bf08      	it	eq
 8012526:	4623      	moveq	r3, r4
 8012528:	f85d 4b04 	ldr.w	r4, [sp], #4
 801252c:	f7ff ba00 	b.w	8011930 <_strtod_l>
 8012530:	200001b0 	.word	0x200001b0
 8012534:	20000214 	.word	0x20000214

08012538 <strtod>:
 8012538:	4b07      	ldr	r3, [pc, #28]	; (8012558 <strtod+0x20>)
 801253a:	4a08      	ldr	r2, [pc, #32]	; (801255c <strtod+0x24>)
 801253c:	b410      	push	{r4}
 801253e:	681c      	ldr	r4, [r3, #0]
 8012540:	6a23      	ldr	r3, [r4, #32]
 8012542:	2b00      	cmp	r3, #0
 8012544:	bf08      	it	eq
 8012546:	4613      	moveq	r3, r2
 8012548:	460a      	mov	r2, r1
 801254a:	4601      	mov	r1, r0
 801254c:	4620      	mov	r0, r4
 801254e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012552:	f7ff b9ed 	b.w	8011930 <_strtod_l>
 8012556:	bf00      	nop
 8012558:	200001b0 	.word	0x200001b0
 801255c:	20000214 	.word	0x20000214

08012560 <_strtol_l.isra.0>:
 8012560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012564:	4680      	mov	r8, r0
 8012566:	4689      	mov	r9, r1
 8012568:	4692      	mov	sl, r2
 801256a:	461e      	mov	r6, r3
 801256c:	460f      	mov	r7, r1
 801256e:	463d      	mov	r5, r7
 8012570:	9808      	ldr	r0, [sp, #32]
 8012572:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012576:	f000 fca9 	bl	8012ecc <__locale_ctype_ptr_l>
 801257a:	4420      	add	r0, r4
 801257c:	7843      	ldrb	r3, [r0, #1]
 801257e:	f013 0308 	ands.w	r3, r3, #8
 8012582:	d132      	bne.n	80125ea <_strtol_l.isra.0+0x8a>
 8012584:	2c2d      	cmp	r4, #45	; 0x2d
 8012586:	d132      	bne.n	80125ee <_strtol_l.isra.0+0x8e>
 8012588:	787c      	ldrb	r4, [r7, #1]
 801258a:	1cbd      	adds	r5, r7, #2
 801258c:	2201      	movs	r2, #1
 801258e:	2e00      	cmp	r6, #0
 8012590:	d05d      	beq.n	801264e <_strtol_l.isra.0+0xee>
 8012592:	2e10      	cmp	r6, #16
 8012594:	d109      	bne.n	80125aa <_strtol_l.isra.0+0x4a>
 8012596:	2c30      	cmp	r4, #48	; 0x30
 8012598:	d107      	bne.n	80125aa <_strtol_l.isra.0+0x4a>
 801259a:	782b      	ldrb	r3, [r5, #0]
 801259c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80125a0:	2b58      	cmp	r3, #88	; 0x58
 80125a2:	d14f      	bne.n	8012644 <_strtol_l.isra.0+0xe4>
 80125a4:	786c      	ldrb	r4, [r5, #1]
 80125a6:	2610      	movs	r6, #16
 80125a8:	3502      	adds	r5, #2
 80125aa:	2a00      	cmp	r2, #0
 80125ac:	bf14      	ite	ne
 80125ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80125b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80125b6:	2700      	movs	r7, #0
 80125b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80125bc:	4638      	mov	r0, r7
 80125be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80125c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80125c6:	2b09      	cmp	r3, #9
 80125c8:	d817      	bhi.n	80125fa <_strtol_l.isra.0+0x9a>
 80125ca:	461c      	mov	r4, r3
 80125cc:	42a6      	cmp	r6, r4
 80125ce:	dd23      	ble.n	8012618 <_strtol_l.isra.0+0xb8>
 80125d0:	1c7b      	adds	r3, r7, #1
 80125d2:	d007      	beq.n	80125e4 <_strtol_l.isra.0+0x84>
 80125d4:	4584      	cmp	ip, r0
 80125d6:	d31c      	bcc.n	8012612 <_strtol_l.isra.0+0xb2>
 80125d8:	d101      	bne.n	80125de <_strtol_l.isra.0+0x7e>
 80125da:	45a6      	cmp	lr, r4
 80125dc:	db19      	blt.n	8012612 <_strtol_l.isra.0+0xb2>
 80125de:	fb00 4006 	mla	r0, r0, r6, r4
 80125e2:	2701      	movs	r7, #1
 80125e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125e8:	e7eb      	b.n	80125c2 <_strtol_l.isra.0+0x62>
 80125ea:	462f      	mov	r7, r5
 80125ec:	e7bf      	b.n	801256e <_strtol_l.isra.0+0xe>
 80125ee:	2c2b      	cmp	r4, #43	; 0x2b
 80125f0:	bf04      	itt	eq
 80125f2:	1cbd      	addeq	r5, r7, #2
 80125f4:	787c      	ldrbeq	r4, [r7, #1]
 80125f6:	461a      	mov	r2, r3
 80125f8:	e7c9      	b.n	801258e <_strtol_l.isra.0+0x2e>
 80125fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80125fe:	2b19      	cmp	r3, #25
 8012600:	d801      	bhi.n	8012606 <_strtol_l.isra.0+0xa6>
 8012602:	3c37      	subs	r4, #55	; 0x37
 8012604:	e7e2      	b.n	80125cc <_strtol_l.isra.0+0x6c>
 8012606:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801260a:	2b19      	cmp	r3, #25
 801260c:	d804      	bhi.n	8012618 <_strtol_l.isra.0+0xb8>
 801260e:	3c57      	subs	r4, #87	; 0x57
 8012610:	e7dc      	b.n	80125cc <_strtol_l.isra.0+0x6c>
 8012612:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012616:	e7e5      	b.n	80125e4 <_strtol_l.isra.0+0x84>
 8012618:	1c7b      	adds	r3, r7, #1
 801261a:	d108      	bne.n	801262e <_strtol_l.isra.0+0xce>
 801261c:	2322      	movs	r3, #34	; 0x22
 801261e:	f8c8 3000 	str.w	r3, [r8]
 8012622:	4608      	mov	r0, r1
 8012624:	f1ba 0f00 	cmp.w	sl, #0
 8012628:	d107      	bne.n	801263a <_strtol_l.isra.0+0xda>
 801262a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801262e:	b102      	cbz	r2, 8012632 <_strtol_l.isra.0+0xd2>
 8012630:	4240      	negs	r0, r0
 8012632:	f1ba 0f00 	cmp.w	sl, #0
 8012636:	d0f8      	beq.n	801262a <_strtol_l.isra.0+0xca>
 8012638:	b10f      	cbz	r7, 801263e <_strtol_l.isra.0+0xde>
 801263a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801263e:	f8ca 9000 	str.w	r9, [sl]
 8012642:	e7f2      	b.n	801262a <_strtol_l.isra.0+0xca>
 8012644:	2430      	movs	r4, #48	; 0x30
 8012646:	2e00      	cmp	r6, #0
 8012648:	d1af      	bne.n	80125aa <_strtol_l.isra.0+0x4a>
 801264a:	2608      	movs	r6, #8
 801264c:	e7ad      	b.n	80125aa <_strtol_l.isra.0+0x4a>
 801264e:	2c30      	cmp	r4, #48	; 0x30
 8012650:	d0a3      	beq.n	801259a <_strtol_l.isra.0+0x3a>
 8012652:	260a      	movs	r6, #10
 8012654:	e7a9      	b.n	80125aa <_strtol_l.isra.0+0x4a>
	...

08012658 <_strtol_r>:
 8012658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801265a:	4c06      	ldr	r4, [pc, #24]	; (8012674 <_strtol_r+0x1c>)
 801265c:	4d06      	ldr	r5, [pc, #24]	; (8012678 <_strtol_r+0x20>)
 801265e:	6824      	ldr	r4, [r4, #0]
 8012660:	6a24      	ldr	r4, [r4, #32]
 8012662:	2c00      	cmp	r4, #0
 8012664:	bf08      	it	eq
 8012666:	462c      	moveq	r4, r5
 8012668:	9400      	str	r4, [sp, #0]
 801266a:	f7ff ff79 	bl	8012560 <_strtol_l.isra.0>
 801266e:	b003      	add	sp, #12
 8012670:	bd30      	pop	{r4, r5, pc}
 8012672:	bf00      	nop
 8012674:	200001b0 	.word	0x200001b0
 8012678:	20000214 	.word	0x20000214

0801267c <strtol>:
 801267c:	4b08      	ldr	r3, [pc, #32]	; (80126a0 <strtol+0x24>)
 801267e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012680:	681c      	ldr	r4, [r3, #0]
 8012682:	4d08      	ldr	r5, [pc, #32]	; (80126a4 <strtol+0x28>)
 8012684:	6a23      	ldr	r3, [r4, #32]
 8012686:	2b00      	cmp	r3, #0
 8012688:	bf08      	it	eq
 801268a:	462b      	moveq	r3, r5
 801268c:	9300      	str	r3, [sp, #0]
 801268e:	4613      	mov	r3, r2
 8012690:	460a      	mov	r2, r1
 8012692:	4601      	mov	r1, r0
 8012694:	4620      	mov	r0, r4
 8012696:	f7ff ff63 	bl	8012560 <_strtol_l.isra.0>
 801269a:	b003      	add	sp, #12
 801269c:	bd30      	pop	{r4, r5, pc}
 801269e:	bf00      	nop
 80126a0:	200001b0 	.word	0x200001b0
 80126a4:	20000214 	.word	0x20000214

080126a8 <_write_r>:
 80126a8:	b538      	push	{r3, r4, r5, lr}
 80126aa:	4c07      	ldr	r4, [pc, #28]	; (80126c8 <_write_r+0x20>)
 80126ac:	4605      	mov	r5, r0
 80126ae:	4608      	mov	r0, r1
 80126b0:	4611      	mov	r1, r2
 80126b2:	2200      	movs	r2, #0
 80126b4:	6022      	str	r2, [r4, #0]
 80126b6:	461a      	mov	r2, r3
 80126b8:	f7f0 ffbd 	bl	8003636 <_write>
 80126bc:	1c43      	adds	r3, r0, #1
 80126be:	d102      	bne.n	80126c6 <_write_r+0x1e>
 80126c0:	6823      	ldr	r3, [r4, #0]
 80126c2:	b103      	cbz	r3, 80126c6 <_write_r+0x1e>
 80126c4:	602b      	str	r3, [r5, #0]
 80126c6:	bd38      	pop	{r3, r4, r5, pc}
 80126c8:	20002618 	.word	0x20002618

080126cc <_close_r>:
 80126cc:	b538      	push	{r3, r4, r5, lr}
 80126ce:	4c06      	ldr	r4, [pc, #24]	; (80126e8 <_close_r+0x1c>)
 80126d0:	2300      	movs	r3, #0
 80126d2:	4605      	mov	r5, r0
 80126d4:	4608      	mov	r0, r1
 80126d6:	6023      	str	r3, [r4, #0]
 80126d8:	f7f0 ffc9 	bl	800366e <_close>
 80126dc:	1c43      	adds	r3, r0, #1
 80126de:	d102      	bne.n	80126e6 <_close_r+0x1a>
 80126e0:	6823      	ldr	r3, [r4, #0]
 80126e2:	b103      	cbz	r3, 80126e6 <_close_r+0x1a>
 80126e4:	602b      	str	r3, [r5, #0]
 80126e6:	bd38      	pop	{r3, r4, r5, pc}
 80126e8:	20002618 	.word	0x20002618

080126ec <std>:
 80126ec:	2300      	movs	r3, #0
 80126ee:	b510      	push	{r4, lr}
 80126f0:	4604      	mov	r4, r0
 80126f2:	e9c0 3300 	strd	r3, r3, [r0]
 80126f6:	6083      	str	r3, [r0, #8]
 80126f8:	8181      	strh	r1, [r0, #12]
 80126fa:	6643      	str	r3, [r0, #100]	; 0x64
 80126fc:	81c2      	strh	r2, [r0, #14]
 80126fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012702:	6183      	str	r3, [r0, #24]
 8012704:	4619      	mov	r1, r3
 8012706:	2208      	movs	r2, #8
 8012708:	305c      	adds	r0, #92	; 0x5c
 801270a:	f7fe fe5c 	bl	80113c6 <memset>
 801270e:	4b05      	ldr	r3, [pc, #20]	; (8012724 <std+0x38>)
 8012710:	6263      	str	r3, [r4, #36]	; 0x24
 8012712:	4b05      	ldr	r3, [pc, #20]	; (8012728 <std+0x3c>)
 8012714:	62a3      	str	r3, [r4, #40]	; 0x28
 8012716:	4b05      	ldr	r3, [pc, #20]	; (801272c <std+0x40>)
 8012718:	62e3      	str	r3, [r4, #44]	; 0x2c
 801271a:	4b05      	ldr	r3, [pc, #20]	; (8012730 <std+0x44>)
 801271c:	6224      	str	r4, [r4, #32]
 801271e:	6323      	str	r3, [r4, #48]	; 0x30
 8012720:	bd10      	pop	{r4, pc}
 8012722:	bf00      	nop
 8012724:	0801186d 	.word	0x0801186d
 8012728:	08011893 	.word	0x08011893
 801272c:	080118cb 	.word	0x080118cb
 8012730:	080118ef 	.word	0x080118ef

08012734 <_cleanup_r>:
 8012734:	4901      	ldr	r1, [pc, #4]	; (801273c <_cleanup_r+0x8>)
 8012736:	f000 b885 	b.w	8012844 <_fwalk_reent>
 801273a:	bf00      	nop
 801273c:	08014b91 	.word	0x08014b91

08012740 <__sfmoreglue>:
 8012740:	b570      	push	{r4, r5, r6, lr}
 8012742:	1e4a      	subs	r2, r1, #1
 8012744:	2568      	movs	r5, #104	; 0x68
 8012746:	4355      	muls	r5, r2
 8012748:	460e      	mov	r6, r1
 801274a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801274e:	f001 f803 	bl	8013758 <_malloc_r>
 8012752:	4604      	mov	r4, r0
 8012754:	b140      	cbz	r0, 8012768 <__sfmoreglue+0x28>
 8012756:	2100      	movs	r1, #0
 8012758:	e9c0 1600 	strd	r1, r6, [r0]
 801275c:	300c      	adds	r0, #12
 801275e:	60a0      	str	r0, [r4, #8]
 8012760:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012764:	f7fe fe2f 	bl	80113c6 <memset>
 8012768:	4620      	mov	r0, r4
 801276a:	bd70      	pop	{r4, r5, r6, pc}

0801276c <__sinit>:
 801276c:	6983      	ldr	r3, [r0, #24]
 801276e:	b510      	push	{r4, lr}
 8012770:	4604      	mov	r4, r0
 8012772:	bb33      	cbnz	r3, 80127c2 <__sinit+0x56>
 8012774:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012778:	6503      	str	r3, [r0, #80]	; 0x50
 801277a:	4b12      	ldr	r3, [pc, #72]	; (80127c4 <__sinit+0x58>)
 801277c:	4a12      	ldr	r2, [pc, #72]	; (80127c8 <__sinit+0x5c>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	6282      	str	r2, [r0, #40]	; 0x28
 8012782:	4298      	cmp	r0, r3
 8012784:	bf04      	itt	eq
 8012786:	2301      	moveq	r3, #1
 8012788:	6183      	streq	r3, [r0, #24]
 801278a:	f000 f81f 	bl	80127cc <__sfp>
 801278e:	6060      	str	r0, [r4, #4]
 8012790:	4620      	mov	r0, r4
 8012792:	f000 f81b 	bl	80127cc <__sfp>
 8012796:	60a0      	str	r0, [r4, #8]
 8012798:	4620      	mov	r0, r4
 801279a:	f000 f817 	bl	80127cc <__sfp>
 801279e:	2200      	movs	r2, #0
 80127a0:	60e0      	str	r0, [r4, #12]
 80127a2:	2104      	movs	r1, #4
 80127a4:	6860      	ldr	r0, [r4, #4]
 80127a6:	f7ff ffa1 	bl	80126ec <std>
 80127aa:	2201      	movs	r2, #1
 80127ac:	2109      	movs	r1, #9
 80127ae:	68a0      	ldr	r0, [r4, #8]
 80127b0:	f7ff ff9c 	bl	80126ec <std>
 80127b4:	2202      	movs	r2, #2
 80127b6:	2112      	movs	r1, #18
 80127b8:	68e0      	ldr	r0, [r4, #12]
 80127ba:	f7ff ff97 	bl	80126ec <std>
 80127be:	2301      	movs	r3, #1
 80127c0:	61a3      	str	r3, [r4, #24]
 80127c2:	bd10      	pop	{r4, pc}
 80127c4:	080151a4 	.word	0x080151a4
 80127c8:	08012735 	.word	0x08012735

080127cc <__sfp>:
 80127cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ce:	4b1b      	ldr	r3, [pc, #108]	; (801283c <__sfp+0x70>)
 80127d0:	681e      	ldr	r6, [r3, #0]
 80127d2:	69b3      	ldr	r3, [r6, #24]
 80127d4:	4607      	mov	r7, r0
 80127d6:	b913      	cbnz	r3, 80127de <__sfp+0x12>
 80127d8:	4630      	mov	r0, r6
 80127da:	f7ff ffc7 	bl	801276c <__sinit>
 80127de:	3648      	adds	r6, #72	; 0x48
 80127e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80127e4:	3b01      	subs	r3, #1
 80127e6:	d503      	bpl.n	80127f0 <__sfp+0x24>
 80127e8:	6833      	ldr	r3, [r6, #0]
 80127ea:	b133      	cbz	r3, 80127fa <__sfp+0x2e>
 80127ec:	6836      	ldr	r6, [r6, #0]
 80127ee:	e7f7      	b.n	80127e0 <__sfp+0x14>
 80127f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80127f4:	b16d      	cbz	r5, 8012812 <__sfp+0x46>
 80127f6:	3468      	adds	r4, #104	; 0x68
 80127f8:	e7f4      	b.n	80127e4 <__sfp+0x18>
 80127fa:	2104      	movs	r1, #4
 80127fc:	4638      	mov	r0, r7
 80127fe:	f7ff ff9f 	bl	8012740 <__sfmoreglue>
 8012802:	6030      	str	r0, [r6, #0]
 8012804:	2800      	cmp	r0, #0
 8012806:	d1f1      	bne.n	80127ec <__sfp+0x20>
 8012808:	230c      	movs	r3, #12
 801280a:	603b      	str	r3, [r7, #0]
 801280c:	4604      	mov	r4, r0
 801280e:	4620      	mov	r0, r4
 8012810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012812:	4b0b      	ldr	r3, [pc, #44]	; (8012840 <__sfp+0x74>)
 8012814:	6665      	str	r5, [r4, #100]	; 0x64
 8012816:	e9c4 5500 	strd	r5, r5, [r4]
 801281a:	60a5      	str	r5, [r4, #8]
 801281c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012820:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012824:	2208      	movs	r2, #8
 8012826:	4629      	mov	r1, r5
 8012828:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801282c:	f7fe fdcb 	bl	80113c6 <memset>
 8012830:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012834:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012838:	e7e9      	b.n	801280e <__sfp+0x42>
 801283a:	bf00      	nop
 801283c:	080151a4 	.word	0x080151a4
 8012840:	ffff0001 	.word	0xffff0001

08012844 <_fwalk_reent>:
 8012844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012848:	4680      	mov	r8, r0
 801284a:	4689      	mov	r9, r1
 801284c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012850:	2600      	movs	r6, #0
 8012852:	b914      	cbnz	r4, 801285a <_fwalk_reent+0x16>
 8012854:	4630      	mov	r0, r6
 8012856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801285a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801285e:	3f01      	subs	r7, #1
 8012860:	d501      	bpl.n	8012866 <_fwalk_reent+0x22>
 8012862:	6824      	ldr	r4, [r4, #0]
 8012864:	e7f5      	b.n	8012852 <_fwalk_reent+0xe>
 8012866:	89ab      	ldrh	r3, [r5, #12]
 8012868:	2b01      	cmp	r3, #1
 801286a:	d907      	bls.n	801287c <_fwalk_reent+0x38>
 801286c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012870:	3301      	adds	r3, #1
 8012872:	d003      	beq.n	801287c <_fwalk_reent+0x38>
 8012874:	4629      	mov	r1, r5
 8012876:	4640      	mov	r0, r8
 8012878:	47c8      	blx	r9
 801287a:	4306      	orrs	r6, r0
 801287c:	3568      	adds	r5, #104	; 0x68
 801287e:	e7ee      	b.n	801285e <_fwalk_reent+0x1a>

08012880 <rshift>:
 8012880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012882:	6906      	ldr	r6, [r0, #16]
 8012884:	114b      	asrs	r3, r1, #5
 8012886:	429e      	cmp	r6, r3
 8012888:	f100 0414 	add.w	r4, r0, #20
 801288c:	dd30      	ble.n	80128f0 <rshift+0x70>
 801288e:	f011 011f 	ands.w	r1, r1, #31
 8012892:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012896:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801289a:	d108      	bne.n	80128ae <rshift+0x2e>
 801289c:	4621      	mov	r1, r4
 801289e:	42b2      	cmp	r2, r6
 80128a0:	460b      	mov	r3, r1
 80128a2:	d211      	bcs.n	80128c8 <rshift+0x48>
 80128a4:	f852 3b04 	ldr.w	r3, [r2], #4
 80128a8:	f841 3b04 	str.w	r3, [r1], #4
 80128ac:	e7f7      	b.n	801289e <rshift+0x1e>
 80128ae:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80128b2:	f1c1 0c20 	rsb	ip, r1, #32
 80128b6:	40cd      	lsrs	r5, r1
 80128b8:	3204      	adds	r2, #4
 80128ba:	4623      	mov	r3, r4
 80128bc:	42b2      	cmp	r2, r6
 80128be:	4617      	mov	r7, r2
 80128c0:	d30c      	bcc.n	80128dc <rshift+0x5c>
 80128c2:	601d      	str	r5, [r3, #0]
 80128c4:	b105      	cbz	r5, 80128c8 <rshift+0x48>
 80128c6:	3304      	adds	r3, #4
 80128c8:	1b1a      	subs	r2, r3, r4
 80128ca:	42a3      	cmp	r3, r4
 80128cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80128d0:	bf08      	it	eq
 80128d2:	2300      	moveq	r3, #0
 80128d4:	6102      	str	r2, [r0, #16]
 80128d6:	bf08      	it	eq
 80128d8:	6143      	streq	r3, [r0, #20]
 80128da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128dc:	683f      	ldr	r7, [r7, #0]
 80128de:	fa07 f70c 	lsl.w	r7, r7, ip
 80128e2:	433d      	orrs	r5, r7
 80128e4:	f843 5b04 	str.w	r5, [r3], #4
 80128e8:	f852 5b04 	ldr.w	r5, [r2], #4
 80128ec:	40cd      	lsrs	r5, r1
 80128ee:	e7e5      	b.n	80128bc <rshift+0x3c>
 80128f0:	4623      	mov	r3, r4
 80128f2:	e7e9      	b.n	80128c8 <rshift+0x48>

080128f4 <__hexdig_fun>:
 80128f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80128f8:	2b09      	cmp	r3, #9
 80128fa:	d802      	bhi.n	8012902 <__hexdig_fun+0xe>
 80128fc:	3820      	subs	r0, #32
 80128fe:	b2c0      	uxtb	r0, r0
 8012900:	4770      	bx	lr
 8012902:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012906:	2b05      	cmp	r3, #5
 8012908:	d801      	bhi.n	801290e <__hexdig_fun+0x1a>
 801290a:	3847      	subs	r0, #71	; 0x47
 801290c:	e7f7      	b.n	80128fe <__hexdig_fun+0xa>
 801290e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012912:	2b05      	cmp	r3, #5
 8012914:	d801      	bhi.n	801291a <__hexdig_fun+0x26>
 8012916:	3827      	subs	r0, #39	; 0x27
 8012918:	e7f1      	b.n	80128fe <__hexdig_fun+0xa>
 801291a:	2000      	movs	r0, #0
 801291c:	4770      	bx	lr

0801291e <__gethex>:
 801291e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012922:	b08b      	sub	sp, #44	; 0x2c
 8012924:	468a      	mov	sl, r1
 8012926:	9002      	str	r0, [sp, #8]
 8012928:	9816      	ldr	r0, [sp, #88]	; 0x58
 801292a:	9306      	str	r3, [sp, #24]
 801292c:	4690      	mov	r8, r2
 801292e:	f000 fadf 	bl	8012ef0 <__localeconv_l>
 8012932:	6803      	ldr	r3, [r0, #0]
 8012934:	9303      	str	r3, [sp, #12]
 8012936:	4618      	mov	r0, r3
 8012938:	f7ed fc54 	bl	80001e4 <strlen>
 801293c:	9b03      	ldr	r3, [sp, #12]
 801293e:	9001      	str	r0, [sp, #4]
 8012940:	4403      	add	r3, r0
 8012942:	f04f 0b00 	mov.w	fp, #0
 8012946:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801294a:	9307      	str	r3, [sp, #28]
 801294c:	f8da 3000 	ldr.w	r3, [sl]
 8012950:	3302      	adds	r3, #2
 8012952:	461f      	mov	r7, r3
 8012954:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012958:	2830      	cmp	r0, #48	; 0x30
 801295a:	d06c      	beq.n	8012a36 <__gethex+0x118>
 801295c:	f7ff ffca 	bl	80128f4 <__hexdig_fun>
 8012960:	4604      	mov	r4, r0
 8012962:	2800      	cmp	r0, #0
 8012964:	d16a      	bne.n	8012a3c <__gethex+0x11e>
 8012966:	9a01      	ldr	r2, [sp, #4]
 8012968:	9903      	ldr	r1, [sp, #12]
 801296a:	4638      	mov	r0, r7
 801296c:	f001 fee4 	bl	8014738 <strncmp>
 8012970:	2800      	cmp	r0, #0
 8012972:	d166      	bne.n	8012a42 <__gethex+0x124>
 8012974:	9b01      	ldr	r3, [sp, #4]
 8012976:	5cf8      	ldrb	r0, [r7, r3]
 8012978:	18fe      	adds	r6, r7, r3
 801297a:	f7ff ffbb 	bl	80128f4 <__hexdig_fun>
 801297e:	2800      	cmp	r0, #0
 8012980:	d062      	beq.n	8012a48 <__gethex+0x12a>
 8012982:	4633      	mov	r3, r6
 8012984:	7818      	ldrb	r0, [r3, #0]
 8012986:	2830      	cmp	r0, #48	; 0x30
 8012988:	461f      	mov	r7, r3
 801298a:	f103 0301 	add.w	r3, r3, #1
 801298e:	d0f9      	beq.n	8012984 <__gethex+0x66>
 8012990:	f7ff ffb0 	bl	80128f4 <__hexdig_fun>
 8012994:	fab0 f580 	clz	r5, r0
 8012998:	096d      	lsrs	r5, r5, #5
 801299a:	4634      	mov	r4, r6
 801299c:	f04f 0b01 	mov.w	fp, #1
 80129a0:	463a      	mov	r2, r7
 80129a2:	4616      	mov	r6, r2
 80129a4:	3201      	adds	r2, #1
 80129a6:	7830      	ldrb	r0, [r6, #0]
 80129a8:	f7ff ffa4 	bl	80128f4 <__hexdig_fun>
 80129ac:	2800      	cmp	r0, #0
 80129ae:	d1f8      	bne.n	80129a2 <__gethex+0x84>
 80129b0:	9a01      	ldr	r2, [sp, #4]
 80129b2:	9903      	ldr	r1, [sp, #12]
 80129b4:	4630      	mov	r0, r6
 80129b6:	f001 febf 	bl	8014738 <strncmp>
 80129ba:	b950      	cbnz	r0, 80129d2 <__gethex+0xb4>
 80129bc:	b954      	cbnz	r4, 80129d4 <__gethex+0xb6>
 80129be:	9b01      	ldr	r3, [sp, #4]
 80129c0:	18f4      	adds	r4, r6, r3
 80129c2:	4622      	mov	r2, r4
 80129c4:	4616      	mov	r6, r2
 80129c6:	3201      	adds	r2, #1
 80129c8:	7830      	ldrb	r0, [r6, #0]
 80129ca:	f7ff ff93 	bl	80128f4 <__hexdig_fun>
 80129ce:	2800      	cmp	r0, #0
 80129d0:	d1f8      	bne.n	80129c4 <__gethex+0xa6>
 80129d2:	b10c      	cbz	r4, 80129d8 <__gethex+0xba>
 80129d4:	1ba4      	subs	r4, r4, r6
 80129d6:	00a4      	lsls	r4, r4, #2
 80129d8:	7833      	ldrb	r3, [r6, #0]
 80129da:	2b50      	cmp	r3, #80	; 0x50
 80129dc:	d001      	beq.n	80129e2 <__gethex+0xc4>
 80129de:	2b70      	cmp	r3, #112	; 0x70
 80129e0:	d140      	bne.n	8012a64 <__gethex+0x146>
 80129e2:	7873      	ldrb	r3, [r6, #1]
 80129e4:	2b2b      	cmp	r3, #43	; 0x2b
 80129e6:	d031      	beq.n	8012a4c <__gethex+0x12e>
 80129e8:	2b2d      	cmp	r3, #45	; 0x2d
 80129ea:	d033      	beq.n	8012a54 <__gethex+0x136>
 80129ec:	1c71      	adds	r1, r6, #1
 80129ee:	f04f 0900 	mov.w	r9, #0
 80129f2:	7808      	ldrb	r0, [r1, #0]
 80129f4:	f7ff ff7e 	bl	80128f4 <__hexdig_fun>
 80129f8:	1e43      	subs	r3, r0, #1
 80129fa:	b2db      	uxtb	r3, r3
 80129fc:	2b18      	cmp	r3, #24
 80129fe:	d831      	bhi.n	8012a64 <__gethex+0x146>
 8012a00:	f1a0 0210 	sub.w	r2, r0, #16
 8012a04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012a08:	f7ff ff74 	bl	80128f4 <__hexdig_fun>
 8012a0c:	1e43      	subs	r3, r0, #1
 8012a0e:	b2db      	uxtb	r3, r3
 8012a10:	2b18      	cmp	r3, #24
 8012a12:	d922      	bls.n	8012a5a <__gethex+0x13c>
 8012a14:	f1b9 0f00 	cmp.w	r9, #0
 8012a18:	d000      	beq.n	8012a1c <__gethex+0xfe>
 8012a1a:	4252      	negs	r2, r2
 8012a1c:	4414      	add	r4, r2
 8012a1e:	f8ca 1000 	str.w	r1, [sl]
 8012a22:	b30d      	cbz	r5, 8012a68 <__gethex+0x14a>
 8012a24:	f1bb 0f00 	cmp.w	fp, #0
 8012a28:	bf0c      	ite	eq
 8012a2a:	2706      	moveq	r7, #6
 8012a2c:	2700      	movne	r7, #0
 8012a2e:	4638      	mov	r0, r7
 8012a30:	b00b      	add	sp, #44	; 0x2c
 8012a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a36:	f10b 0b01 	add.w	fp, fp, #1
 8012a3a:	e78a      	b.n	8012952 <__gethex+0x34>
 8012a3c:	2500      	movs	r5, #0
 8012a3e:	462c      	mov	r4, r5
 8012a40:	e7ae      	b.n	80129a0 <__gethex+0x82>
 8012a42:	463e      	mov	r6, r7
 8012a44:	2501      	movs	r5, #1
 8012a46:	e7c7      	b.n	80129d8 <__gethex+0xba>
 8012a48:	4604      	mov	r4, r0
 8012a4a:	e7fb      	b.n	8012a44 <__gethex+0x126>
 8012a4c:	f04f 0900 	mov.w	r9, #0
 8012a50:	1cb1      	adds	r1, r6, #2
 8012a52:	e7ce      	b.n	80129f2 <__gethex+0xd4>
 8012a54:	f04f 0901 	mov.w	r9, #1
 8012a58:	e7fa      	b.n	8012a50 <__gethex+0x132>
 8012a5a:	230a      	movs	r3, #10
 8012a5c:	fb03 0202 	mla	r2, r3, r2, r0
 8012a60:	3a10      	subs	r2, #16
 8012a62:	e7cf      	b.n	8012a04 <__gethex+0xe6>
 8012a64:	4631      	mov	r1, r6
 8012a66:	e7da      	b.n	8012a1e <__gethex+0x100>
 8012a68:	1bf3      	subs	r3, r6, r7
 8012a6a:	3b01      	subs	r3, #1
 8012a6c:	4629      	mov	r1, r5
 8012a6e:	2b07      	cmp	r3, #7
 8012a70:	dc49      	bgt.n	8012b06 <__gethex+0x1e8>
 8012a72:	9802      	ldr	r0, [sp, #8]
 8012a74:	f000 fa62 	bl	8012f3c <_Balloc>
 8012a78:	9b01      	ldr	r3, [sp, #4]
 8012a7a:	f100 0914 	add.w	r9, r0, #20
 8012a7e:	f04f 0b00 	mov.w	fp, #0
 8012a82:	f1c3 0301 	rsb	r3, r3, #1
 8012a86:	4605      	mov	r5, r0
 8012a88:	f8cd 9010 	str.w	r9, [sp, #16]
 8012a8c:	46da      	mov	sl, fp
 8012a8e:	9308      	str	r3, [sp, #32]
 8012a90:	42b7      	cmp	r7, r6
 8012a92:	d33b      	bcc.n	8012b0c <__gethex+0x1ee>
 8012a94:	9804      	ldr	r0, [sp, #16]
 8012a96:	f840 ab04 	str.w	sl, [r0], #4
 8012a9a:	eba0 0009 	sub.w	r0, r0, r9
 8012a9e:	1080      	asrs	r0, r0, #2
 8012aa0:	6128      	str	r0, [r5, #16]
 8012aa2:	0147      	lsls	r7, r0, #5
 8012aa4:	4650      	mov	r0, sl
 8012aa6:	f000 fb0d 	bl	80130c4 <__hi0bits>
 8012aaa:	f8d8 6000 	ldr.w	r6, [r8]
 8012aae:	1a3f      	subs	r7, r7, r0
 8012ab0:	42b7      	cmp	r7, r6
 8012ab2:	dd64      	ble.n	8012b7e <__gethex+0x260>
 8012ab4:	1bbf      	subs	r7, r7, r6
 8012ab6:	4639      	mov	r1, r7
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f000 fe1d 	bl	80136f8 <__any_on>
 8012abe:	4682      	mov	sl, r0
 8012ac0:	b178      	cbz	r0, 8012ae2 <__gethex+0x1c4>
 8012ac2:	1e7b      	subs	r3, r7, #1
 8012ac4:	1159      	asrs	r1, r3, #5
 8012ac6:	f003 021f 	and.w	r2, r3, #31
 8012aca:	f04f 0a01 	mov.w	sl, #1
 8012ace:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012ad2:	fa0a f202 	lsl.w	r2, sl, r2
 8012ad6:	420a      	tst	r2, r1
 8012ad8:	d003      	beq.n	8012ae2 <__gethex+0x1c4>
 8012ada:	4553      	cmp	r3, sl
 8012adc:	dc46      	bgt.n	8012b6c <__gethex+0x24e>
 8012ade:	f04f 0a02 	mov.w	sl, #2
 8012ae2:	4639      	mov	r1, r7
 8012ae4:	4628      	mov	r0, r5
 8012ae6:	f7ff fecb 	bl	8012880 <rshift>
 8012aea:	443c      	add	r4, r7
 8012aec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012af0:	42a3      	cmp	r3, r4
 8012af2:	da52      	bge.n	8012b9a <__gethex+0x27c>
 8012af4:	4629      	mov	r1, r5
 8012af6:	9802      	ldr	r0, [sp, #8]
 8012af8:	f000 fa54 	bl	8012fa4 <_Bfree>
 8012afc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012afe:	2300      	movs	r3, #0
 8012b00:	6013      	str	r3, [r2, #0]
 8012b02:	27a3      	movs	r7, #163	; 0xa3
 8012b04:	e793      	b.n	8012a2e <__gethex+0x110>
 8012b06:	3101      	adds	r1, #1
 8012b08:	105b      	asrs	r3, r3, #1
 8012b0a:	e7b0      	b.n	8012a6e <__gethex+0x150>
 8012b0c:	1e73      	subs	r3, r6, #1
 8012b0e:	9305      	str	r3, [sp, #20]
 8012b10:	9a07      	ldr	r2, [sp, #28]
 8012b12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d018      	beq.n	8012b4c <__gethex+0x22e>
 8012b1a:	f1bb 0f20 	cmp.w	fp, #32
 8012b1e:	d107      	bne.n	8012b30 <__gethex+0x212>
 8012b20:	9b04      	ldr	r3, [sp, #16]
 8012b22:	f8c3 a000 	str.w	sl, [r3]
 8012b26:	3304      	adds	r3, #4
 8012b28:	f04f 0a00 	mov.w	sl, #0
 8012b2c:	9304      	str	r3, [sp, #16]
 8012b2e:	46d3      	mov	fp, sl
 8012b30:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012b34:	f7ff fede 	bl	80128f4 <__hexdig_fun>
 8012b38:	f000 000f 	and.w	r0, r0, #15
 8012b3c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012b40:	ea4a 0a00 	orr.w	sl, sl, r0
 8012b44:	f10b 0b04 	add.w	fp, fp, #4
 8012b48:	9b05      	ldr	r3, [sp, #20]
 8012b4a:	e00d      	b.n	8012b68 <__gethex+0x24a>
 8012b4c:	9b05      	ldr	r3, [sp, #20]
 8012b4e:	9a08      	ldr	r2, [sp, #32]
 8012b50:	4413      	add	r3, r2
 8012b52:	42bb      	cmp	r3, r7
 8012b54:	d3e1      	bcc.n	8012b1a <__gethex+0x1fc>
 8012b56:	4618      	mov	r0, r3
 8012b58:	9a01      	ldr	r2, [sp, #4]
 8012b5a:	9903      	ldr	r1, [sp, #12]
 8012b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8012b5e:	f001 fdeb 	bl	8014738 <strncmp>
 8012b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b64:	2800      	cmp	r0, #0
 8012b66:	d1d8      	bne.n	8012b1a <__gethex+0x1fc>
 8012b68:	461e      	mov	r6, r3
 8012b6a:	e791      	b.n	8012a90 <__gethex+0x172>
 8012b6c:	1eb9      	subs	r1, r7, #2
 8012b6e:	4628      	mov	r0, r5
 8012b70:	f000 fdc2 	bl	80136f8 <__any_on>
 8012b74:	2800      	cmp	r0, #0
 8012b76:	d0b2      	beq.n	8012ade <__gethex+0x1c0>
 8012b78:	f04f 0a03 	mov.w	sl, #3
 8012b7c:	e7b1      	b.n	8012ae2 <__gethex+0x1c4>
 8012b7e:	da09      	bge.n	8012b94 <__gethex+0x276>
 8012b80:	1bf7      	subs	r7, r6, r7
 8012b82:	4629      	mov	r1, r5
 8012b84:	463a      	mov	r2, r7
 8012b86:	9802      	ldr	r0, [sp, #8]
 8012b88:	f000 fbd8 	bl	801333c <__lshift>
 8012b8c:	1be4      	subs	r4, r4, r7
 8012b8e:	4605      	mov	r5, r0
 8012b90:	f100 0914 	add.w	r9, r0, #20
 8012b94:	f04f 0a00 	mov.w	sl, #0
 8012b98:	e7a8      	b.n	8012aec <__gethex+0x1ce>
 8012b9a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012b9e:	42a0      	cmp	r0, r4
 8012ba0:	dd6a      	ble.n	8012c78 <__gethex+0x35a>
 8012ba2:	1b04      	subs	r4, r0, r4
 8012ba4:	42a6      	cmp	r6, r4
 8012ba6:	dc2e      	bgt.n	8012c06 <__gethex+0x2e8>
 8012ba8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012bac:	2b02      	cmp	r3, #2
 8012bae:	d022      	beq.n	8012bf6 <__gethex+0x2d8>
 8012bb0:	2b03      	cmp	r3, #3
 8012bb2:	d024      	beq.n	8012bfe <__gethex+0x2e0>
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d115      	bne.n	8012be4 <__gethex+0x2c6>
 8012bb8:	42a6      	cmp	r6, r4
 8012bba:	d113      	bne.n	8012be4 <__gethex+0x2c6>
 8012bbc:	2e01      	cmp	r6, #1
 8012bbe:	dc0b      	bgt.n	8012bd8 <__gethex+0x2ba>
 8012bc0:	9a06      	ldr	r2, [sp, #24]
 8012bc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012bc6:	6013      	str	r3, [r2, #0]
 8012bc8:	2301      	movs	r3, #1
 8012bca:	612b      	str	r3, [r5, #16]
 8012bcc:	f8c9 3000 	str.w	r3, [r9]
 8012bd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012bd2:	2762      	movs	r7, #98	; 0x62
 8012bd4:	601d      	str	r5, [r3, #0]
 8012bd6:	e72a      	b.n	8012a2e <__gethex+0x110>
 8012bd8:	1e71      	subs	r1, r6, #1
 8012bda:	4628      	mov	r0, r5
 8012bdc:	f000 fd8c 	bl	80136f8 <__any_on>
 8012be0:	2800      	cmp	r0, #0
 8012be2:	d1ed      	bne.n	8012bc0 <__gethex+0x2a2>
 8012be4:	4629      	mov	r1, r5
 8012be6:	9802      	ldr	r0, [sp, #8]
 8012be8:	f000 f9dc 	bl	8012fa4 <_Bfree>
 8012bec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012bee:	2300      	movs	r3, #0
 8012bf0:	6013      	str	r3, [r2, #0]
 8012bf2:	2750      	movs	r7, #80	; 0x50
 8012bf4:	e71b      	b.n	8012a2e <__gethex+0x110>
 8012bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d0e1      	beq.n	8012bc0 <__gethex+0x2a2>
 8012bfc:	e7f2      	b.n	8012be4 <__gethex+0x2c6>
 8012bfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d1dd      	bne.n	8012bc0 <__gethex+0x2a2>
 8012c04:	e7ee      	b.n	8012be4 <__gethex+0x2c6>
 8012c06:	1e67      	subs	r7, r4, #1
 8012c08:	f1ba 0f00 	cmp.w	sl, #0
 8012c0c:	d131      	bne.n	8012c72 <__gethex+0x354>
 8012c0e:	b127      	cbz	r7, 8012c1a <__gethex+0x2fc>
 8012c10:	4639      	mov	r1, r7
 8012c12:	4628      	mov	r0, r5
 8012c14:	f000 fd70 	bl	80136f8 <__any_on>
 8012c18:	4682      	mov	sl, r0
 8012c1a:	117a      	asrs	r2, r7, #5
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	f007 071f 	and.w	r7, r7, #31
 8012c22:	fa03 f707 	lsl.w	r7, r3, r7
 8012c26:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8012c2a:	4621      	mov	r1, r4
 8012c2c:	421f      	tst	r7, r3
 8012c2e:	4628      	mov	r0, r5
 8012c30:	bf18      	it	ne
 8012c32:	f04a 0a02 	orrne.w	sl, sl, #2
 8012c36:	1b36      	subs	r6, r6, r4
 8012c38:	f7ff fe22 	bl	8012880 <rshift>
 8012c3c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012c40:	2702      	movs	r7, #2
 8012c42:	f1ba 0f00 	cmp.w	sl, #0
 8012c46:	d048      	beq.n	8012cda <__gethex+0x3bc>
 8012c48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012c4c:	2b02      	cmp	r3, #2
 8012c4e:	d015      	beq.n	8012c7c <__gethex+0x35e>
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	d017      	beq.n	8012c84 <__gethex+0x366>
 8012c54:	2b01      	cmp	r3, #1
 8012c56:	d109      	bne.n	8012c6c <__gethex+0x34e>
 8012c58:	f01a 0f02 	tst.w	sl, #2
 8012c5c:	d006      	beq.n	8012c6c <__gethex+0x34e>
 8012c5e:	f8d9 3000 	ldr.w	r3, [r9]
 8012c62:	ea4a 0a03 	orr.w	sl, sl, r3
 8012c66:	f01a 0f01 	tst.w	sl, #1
 8012c6a:	d10e      	bne.n	8012c8a <__gethex+0x36c>
 8012c6c:	f047 0710 	orr.w	r7, r7, #16
 8012c70:	e033      	b.n	8012cda <__gethex+0x3bc>
 8012c72:	f04f 0a01 	mov.w	sl, #1
 8012c76:	e7d0      	b.n	8012c1a <__gethex+0x2fc>
 8012c78:	2701      	movs	r7, #1
 8012c7a:	e7e2      	b.n	8012c42 <__gethex+0x324>
 8012c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c7e:	f1c3 0301 	rsb	r3, r3, #1
 8012c82:	9315      	str	r3, [sp, #84]	; 0x54
 8012c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d0f0      	beq.n	8012c6c <__gethex+0x34e>
 8012c8a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8012c8e:	f105 0314 	add.w	r3, r5, #20
 8012c92:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012c96:	eb03 010a 	add.w	r1, r3, sl
 8012c9a:	f04f 0c00 	mov.w	ip, #0
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ca4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8012ca8:	d01c      	beq.n	8012ce4 <__gethex+0x3c6>
 8012caa:	3201      	adds	r2, #1
 8012cac:	6002      	str	r2, [r0, #0]
 8012cae:	2f02      	cmp	r7, #2
 8012cb0:	f105 0314 	add.w	r3, r5, #20
 8012cb4:	d138      	bne.n	8012d28 <__gethex+0x40a>
 8012cb6:	f8d8 2000 	ldr.w	r2, [r8]
 8012cba:	3a01      	subs	r2, #1
 8012cbc:	42b2      	cmp	r2, r6
 8012cbe:	d10a      	bne.n	8012cd6 <__gethex+0x3b8>
 8012cc0:	1171      	asrs	r1, r6, #5
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	f006 061f 	and.w	r6, r6, #31
 8012cc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ccc:	fa02 f606 	lsl.w	r6, r2, r6
 8012cd0:	421e      	tst	r6, r3
 8012cd2:	bf18      	it	ne
 8012cd4:	4617      	movne	r7, r2
 8012cd6:	f047 0720 	orr.w	r7, r7, #32
 8012cda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012cdc:	601d      	str	r5, [r3, #0]
 8012cde:	9b06      	ldr	r3, [sp, #24]
 8012ce0:	601c      	str	r4, [r3, #0]
 8012ce2:	e6a4      	b.n	8012a2e <__gethex+0x110>
 8012ce4:	4299      	cmp	r1, r3
 8012ce6:	f843 cc04 	str.w	ip, [r3, #-4]
 8012cea:	d8d8      	bhi.n	8012c9e <__gethex+0x380>
 8012cec:	68ab      	ldr	r3, [r5, #8]
 8012cee:	4599      	cmp	r9, r3
 8012cf0:	db12      	blt.n	8012d18 <__gethex+0x3fa>
 8012cf2:	6869      	ldr	r1, [r5, #4]
 8012cf4:	9802      	ldr	r0, [sp, #8]
 8012cf6:	3101      	adds	r1, #1
 8012cf8:	f000 f920 	bl	8012f3c <_Balloc>
 8012cfc:	692a      	ldr	r2, [r5, #16]
 8012cfe:	3202      	adds	r2, #2
 8012d00:	f105 010c 	add.w	r1, r5, #12
 8012d04:	4683      	mov	fp, r0
 8012d06:	0092      	lsls	r2, r2, #2
 8012d08:	300c      	adds	r0, #12
 8012d0a:	f7fe fb51 	bl	80113b0 <memcpy>
 8012d0e:	4629      	mov	r1, r5
 8012d10:	9802      	ldr	r0, [sp, #8]
 8012d12:	f000 f947 	bl	8012fa4 <_Bfree>
 8012d16:	465d      	mov	r5, fp
 8012d18:	692b      	ldr	r3, [r5, #16]
 8012d1a:	1c5a      	adds	r2, r3, #1
 8012d1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012d20:	612a      	str	r2, [r5, #16]
 8012d22:	2201      	movs	r2, #1
 8012d24:	615a      	str	r2, [r3, #20]
 8012d26:	e7c2      	b.n	8012cae <__gethex+0x390>
 8012d28:	692a      	ldr	r2, [r5, #16]
 8012d2a:	454a      	cmp	r2, r9
 8012d2c:	dd0b      	ble.n	8012d46 <__gethex+0x428>
 8012d2e:	2101      	movs	r1, #1
 8012d30:	4628      	mov	r0, r5
 8012d32:	f7ff fda5 	bl	8012880 <rshift>
 8012d36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012d3a:	3401      	adds	r4, #1
 8012d3c:	42a3      	cmp	r3, r4
 8012d3e:	f6ff aed9 	blt.w	8012af4 <__gethex+0x1d6>
 8012d42:	2701      	movs	r7, #1
 8012d44:	e7c7      	b.n	8012cd6 <__gethex+0x3b8>
 8012d46:	f016 061f 	ands.w	r6, r6, #31
 8012d4a:	d0fa      	beq.n	8012d42 <__gethex+0x424>
 8012d4c:	449a      	add	sl, r3
 8012d4e:	f1c6 0620 	rsb	r6, r6, #32
 8012d52:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012d56:	f000 f9b5 	bl	80130c4 <__hi0bits>
 8012d5a:	42b0      	cmp	r0, r6
 8012d5c:	dbe7      	blt.n	8012d2e <__gethex+0x410>
 8012d5e:	e7f0      	b.n	8012d42 <__gethex+0x424>

08012d60 <L_shift>:
 8012d60:	f1c2 0208 	rsb	r2, r2, #8
 8012d64:	0092      	lsls	r2, r2, #2
 8012d66:	b570      	push	{r4, r5, r6, lr}
 8012d68:	f1c2 0620 	rsb	r6, r2, #32
 8012d6c:	6843      	ldr	r3, [r0, #4]
 8012d6e:	6804      	ldr	r4, [r0, #0]
 8012d70:	fa03 f506 	lsl.w	r5, r3, r6
 8012d74:	432c      	orrs	r4, r5
 8012d76:	40d3      	lsrs	r3, r2
 8012d78:	6004      	str	r4, [r0, #0]
 8012d7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8012d7e:	4288      	cmp	r0, r1
 8012d80:	d3f4      	bcc.n	8012d6c <L_shift+0xc>
 8012d82:	bd70      	pop	{r4, r5, r6, pc}

08012d84 <__match>:
 8012d84:	b530      	push	{r4, r5, lr}
 8012d86:	6803      	ldr	r3, [r0, #0]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d8e:	b914      	cbnz	r4, 8012d96 <__match+0x12>
 8012d90:	6003      	str	r3, [r0, #0]
 8012d92:	2001      	movs	r0, #1
 8012d94:	bd30      	pop	{r4, r5, pc}
 8012d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012d9e:	2d19      	cmp	r5, #25
 8012da0:	bf98      	it	ls
 8012da2:	3220      	addls	r2, #32
 8012da4:	42a2      	cmp	r2, r4
 8012da6:	d0f0      	beq.n	8012d8a <__match+0x6>
 8012da8:	2000      	movs	r0, #0
 8012daa:	e7f3      	b.n	8012d94 <__match+0x10>

08012dac <__hexnan>:
 8012dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db0:	680b      	ldr	r3, [r1, #0]
 8012db2:	6801      	ldr	r1, [r0, #0]
 8012db4:	115f      	asrs	r7, r3, #5
 8012db6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8012dba:	f013 031f 	ands.w	r3, r3, #31
 8012dbe:	b087      	sub	sp, #28
 8012dc0:	bf18      	it	ne
 8012dc2:	3704      	addne	r7, #4
 8012dc4:	2500      	movs	r5, #0
 8012dc6:	1f3e      	subs	r6, r7, #4
 8012dc8:	4682      	mov	sl, r0
 8012dca:	4690      	mov	r8, r2
 8012dcc:	9301      	str	r3, [sp, #4]
 8012dce:	f847 5c04 	str.w	r5, [r7, #-4]
 8012dd2:	46b1      	mov	r9, r6
 8012dd4:	4634      	mov	r4, r6
 8012dd6:	9502      	str	r5, [sp, #8]
 8012dd8:	46ab      	mov	fp, r5
 8012dda:	784a      	ldrb	r2, [r1, #1]
 8012ddc:	1c4b      	adds	r3, r1, #1
 8012dde:	9303      	str	r3, [sp, #12]
 8012de0:	b342      	cbz	r2, 8012e34 <__hexnan+0x88>
 8012de2:	4610      	mov	r0, r2
 8012de4:	9105      	str	r1, [sp, #20]
 8012de6:	9204      	str	r2, [sp, #16]
 8012de8:	f7ff fd84 	bl	80128f4 <__hexdig_fun>
 8012dec:	2800      	cmp	r0, #0
 8012dee:	d143      	bne.n	8012e78 <__hexnan+0xcc>
 8012df0:	9a04      	ldr	r2, [sp, #16]
 8012df2:	9905      	ldr	r1, [sp, #20]
 8012df4:	2a20      	cmp	r2, #32
 8012df6:	d818      	bhi.n	8012e2a <__hexnan+0x7e>
 8012df8:	9b02      	ldr	r3, [sp, #8]
 8012dfa:	459b      	cmp	fp, r3
 8012dfc:	dd13      	ble.n	8012e26 <__hexnan+0x7a>
 8012dfe:	454c      	cmp	r4, r9
 8012e00:	d206      	bcs.n	8012e10 <__hexnan+0x64>
 8012e02:	2d07      	cmp	r5, #7
 8012e04:	dc04      	bgt.n	8012e10 <__hexnan+0x64>
 8012e06:	462a      	mov	r2, r5
 8012e08:	4649      	mov	r1, r9
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f7ff ffa8 	bl	8012d60 <L_shift>
 8012e10:	4544      	cmp	r4, r8
 8012e12:	d944      	bls.n	8012e9e <__hexnan+0xf2>
 8012e14:	2300      	movs	r3, #0
 8012e16:	f1a4 0904 	sub.w	r9, r4, #4
 8012e1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8012e1e:	f8cd b008 	str.w	fp, [sp, #8]
 8012e22:	464c      	mov	r4, r9
 8012e24:	461d      	mov	r5, r3
 8012e26:	9903      	ldr	r1, [sp, #12]
 8012e28:	e7d7      	b.n	8012dda <__hexnan+0x2e>
 8012e2a:	2a29      	cmp	r2, #41	; 0x29
 8012e2c:	d14a      	bne.n	8012ec4 <__hexnan+0x118>
 8012e2e:	3102      	adds	r1, #2
 8012e30:	f8ca 1000 	str.w	r1, [sl]
 8012e34:	f1bb 0f00 	cmp.w	fp, #0
 8012e38:	d044      	beq.n	8012ec4 <__hexnan+0x118>
 8012e3a:	454c      	cmp	r4, r9
 8012e3c:	d206      	bcs.n	8012e4c <__hexnan+0xa0>
 8012e3e:	2d07      	cmp	r5, #7
 8012e40:	dc04      	bgt.n	8012e4c <__hexnan+0xa0>
 8012e42:	462a      	mov	r2, r5
 8012e44:	4649      	mov	r1, r9
 8012e46:	4620      	mov	r0, r4
 8012e48:	f7ff ff8a 	bl	8012d60 <L_shift>
 8012e4c:	4544      	cmp	r4, r8
 8012e4e:	d928      	bls.n	8012ea2 <__hexnan+0xf6>
 8012e50:	4643      	mov	r3, r8
 8012e52:	f854 2b04 	ldr.w	r2, [r4], #4
 8012e56:	f843 2b04 	str.w	r2, [r3], #4
 8012e5a:	42a6      	cmp	r6, r4
 8012e5c:	d2f9      	bcs.n	8012e52 <__hexnan+0xa6>
 8012e5e:	2200      	movs	r2, #0
 8012e60:	f843 2b04 	str.w	r2, [r3], #4
 8012e64:	429e      	cmp	r6, r3
 8012e66:	d2fb      	bcs.n	8012e60 <__hexnan+0xb4>
 8012e68:	6833      	ldr	r3, [r6, #0]
 8012e6a:	b91b      	cbnz	r3, 8012e74 <__hexnan+0xc8>
 8012e6c:	4546      	cmp	r6, r8
 8012e6e:	d127      	bne.n	8012ec0 <__hexnan+0x114>
 8012e70:	2301      	movs	r3, #1
 8012e72:	6033      	str	r3, [r6, #0]
 8012e74:	2005      	movs	r0, #5
 8012e76:	e026      	b.n	8012ec6 <__hexnan+0x11a>
 8012e78:	3501      	adds	r5, #1
 8012e7a:	2d08      	cmp	r5, #8
 8012e7c:	f10b 0b01 	add.w	fp, fp, #1
 8012e80:	dd06      	ble.n	8012e90 <__hexnan+0xe4>
 8012e82:	4544      	cmp	r4, r8
 8012e84:	d9cf      	bls.n	8012e26 <__hexnan+0x7a>
 8012e86:	2300      	movs	r3, #0
 8012e88:	f844 3c04 	str.w	r3, [r4, #-4]
 8012e8c:	2501      	movs	r5, #1
 8012e8e:	3c04      	subs	r4, #4
 8012e90:	6822      	ldr	r2, [r4, #0]
 8012e92:	f000 000f 	and.w	r0, r0, #15
 8012e96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012e9a:	6020      	str	r0, [r4, #0]
 8012e9c:	e7c3      	b.n	8012e26 <__hexnan+0x7a>
 8012e9e:	2508      	movs	r5, #8
 8012ea0:	e7c1      	b.n	8012e26 <__hexnan+0x7a>
 8012ea2:	9b01      	ldr	r3, [sp, #4]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d0df      	beq.n	8012e68 <__hexnan+0xbc>
 8012ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012eac:	f1c3 0320 	rsb	r3, r3, #32
 8012eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8012eb4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8012eb8:	401a      	ands	r2, r3
 8012eba:	f847 2c04 	str.w	r2, [r7, #-4]
 8012ebe:	e7d3      	b.n	8012e68 <__hexnan+0xbc>
 8012ec0:	3e04      	subs	r6, #4
 8012ec2:	e7d1      	b.n	8012e68 <__hexnan+0xbc>
 8012ec4:	2004      	movs	r0, #4
 8012ec6:	b007      	add	sp, #28
 8012ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ecc <__locale_ctype_ptr_l>:
 8012ecc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012ed0:	4770      	bx	lr
	...

08012ed4 <__locale_ctype_ptr>:
 8012ed4:	4b04      	ldr	r3, [pc, #16]	; (8012ee8 <__locale_ctype_ptr+0x14>)
 8012ed6:	4a05      	ldr	r2, [pc, #20]	; (8012eec <__locale_ctype_ptr+0x18>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	6a1b      	ldr	r3, [r3, #32]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	bf08      	it	eq
 8012ee0:	4613      	moveq	r3, r2
 8012ee2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8012ee6:	4770      	bx	lr
 8012ee8:	200001b0 	.word	0x200001b0
 8012eec:	20000214 	.word	0x20000214

08012ef0 <__localeconv_l>:
 8012ef0:	30f0      	adds	r0, #240	; 0xf0
 8012ef2:	4770      	bx	lr

08012ef4 <_lseek_r>:
 8012ef4:	b538      	push	{r3, r4, r5, lr}
 8012ef6:	4c07      	ldr	r4, [pc, #28]	; (8012f14 <_lseek_r+0x20>)
 8012ef8:	4605      	mov	r5, r0
 8012efa:	4608      	mov	r0, r1
 8012efc:	4611      	mov	r1, r2
 8012efe:	2200      	movs	r2, #0
 8012f00:	6022      	str	r2, [r4, #0]
 8012f02:	461a      	mov	r2, r3
 8012f04:	f7f0 fbda 	bl	80036bc <_lseek>
 8012f08:	1c43      	adds	r3, r0, #1
 8012f0a:	d102      	bne.n	8012f12 <_lseek_r+0x1e>
 8012f0c:	6823      	ldr	r3, [r4, #0]
 8012f0e:	b103      	cbz	r3, 8012f12 <_lseek_r+0x1e>
 8012f10:	602b      	str	r3, [r5, #0]
 8012f12:	bd38      	pop	{r3, r4, r5, pc}
 8012f14:	20002618 	.word	0x20002618

08012f18 <__ascii_mbtowc>:
 8012f18:	b082      	sub	sp, #8
 8012f1a:	b901      	cbnz	r1, 8012f1e <__ascii_mbtowc+0x6>
 8012f1c:	a901      	add	r1, sp, #4
 8012f1e:	b142      	cbz	r2, 8012f32 <__ascii_mbtowc+0x1a>
 8012f20:	b14b      	cbz	r3, 8012f36 <__ascii_mbtowc+0x1e>
 8012f22:	7813      	ldrb	r3, [r2, #0]
 8012f24:	600b      	str	r3, [r1, #0]
 8012f26:	7812      	ldrb	r2, [r2, #0]
 8012f28:	1c10      	adds	r0, r2, #0
 8012f2a:	bf18      	it	ne
 8012f2c:	2001      	movne	r0, #1
 8012f2e:	b002      	add	sp, #8
 8012f30:	4770      	bx	lr
 8012f32:	4610      	mov	r0, r2
 8012f34:	e7fb      	b.n	8012f2e <__ascii_mbtowc+0x16>
 8012f36:	f06f 0001 	mvn.w	r0, #1
 8012f3a:	e7f8      	b.n	8012f2e <__ascii_mbtowc+0x16>

08012f3c <_Balloc>:
 8012f3c:	b570      	push	{r4, r5, r6, lr}
 8012f3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012f40:	4604      	mov	r4, r0
 8012f42:	460e      	mov	r6, r1
 8012f44:	b93d      	cbnz	r5, 8012f56 <_Balloc+0x1a>
 8012f46:	2010      	movs	r0, #16
 8012f48:	f001 feb0 	bl	8014cac <malloc>
 8012f4c:	6260      	str	r0, [r4, #36]	; 0x24
 8012f4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012f52:	6005      	str	r5, [r0, #0]
 8012f54:	60c5      	str	r5, [r0, #12]
 8012f56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012f58:	68eb      	ldr	r3, [r5, #12]
 8012f5a:	b183      	cbz	r3, 8012f7e <_Balloc+0x42>
 8012f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f5e:	68db      	ldr	r3, [r3, #12]
 8012f60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012f64:	b9b8      	cbnz	r0, 8012f96 <_Balloc+0x5a>
 8012f66:	2101      	movs	r1, #1
 8012f68:	fa01 f506 	lsl.w	r5, r1, r6
 8012f6c:	1d6a      	adds	r2, r5, #5
 8012f6e:	0092      	lsls	r2, r2, #2
 8012f70:	4620      	mov	r0, r4
 8012f72:	f000 fbe2 	bl	801373a <_calloc_r>
 8012f76:	b160      	cbz	r0, 8012f92 <_Balloc+0x56>
 8012f78:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012f7c:	e00e      	b.n	8012f9c <_Balloc+0x60>
 8012f7e:	2221      	movs	r2, #33	; 0x21
 8012f80:	2104      	movs	r1, #4
 8012f82:	4620      	mov	r0, r4
 8012f84:	f000 fbd9 	bl	801373a <_calloc_r>
 8012f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f8a:	60e8      	str	r0, [r5, #12]
 8012f8c:	68db      	ldr	r3, [r3, #12]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d1e4      	bne.n	8012f5c <_Balloc+0x20>
 8012f92:	2000      	movs	r0, #0
 8012f94:	bd70      	pop	{r4, r5, r6, pc}
 8012f96:	6802      	ldr	r2, [r0, #0]
 8012f98:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012fa2:	e7f7      	b.n	8012f94 <_Balloc+0x58>

08012fa4 <_Bfree>:
 8012fa4:	b570      	push	{r4, r5, r6, lr}
 8012fa6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012fa8:	4606      	mov	r6, r0
 8012faa:	460d      	mov	r5, r1
 8012fac:	b93c      	cbnz	r4, 8012fbe <_Bfree+0x1a>
 8012fae:	2010      	movs	r0, #16
 8012fb0:	f001 fe7c 	bl	8014cac <malloc>
 8012fb4:	6270      	str	r0, [r6, #36]	; 0x24
 8012fb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012fba:	6004      	str	r4, [r0, #0]
 8012fbc:	60c4      	str	r4, [r0, #12]
 8012fbe:	b13d      	cbz	r5, 8012fd0 <_Bfree+0x2c>
 8012fc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012fc2:	686a      	ldr	r2, [r5, #4]
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012fca:	6029      	str	r1, [r5, #0]
 8012fcc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012fd0:	bd70      	pop	{r4, r5, r6, pc}

08012fd2 <__multadd>:
 8012fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd6:	690d      	ldr	r5, [r1, #16]
 8012fd8:	461f      	mov	r7, r3
 8012fda:	4606      	mov	r6, r0
 8012fdc:	460c      	mov	r4, r1
 8012fde:	f101 0c14 	add.w	ip, r1, #20
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	f8dc 0000 	ldr.w	r0, [ip]
 8012fe8:	b281      	uxth	r1, r0
 8012fea:	fb02 7101 	mla	r1, r2, r1, r7
 8012fee:	0c0f      	lsrs	r7, r1, #16
 8012ff0:	0c00      	lsrs	r0, r0, #16
 8012ff2:	fb02 7000 	mla	r0, r2, r0, r7
 8012ff6:	b289      	uxth	r1, r1
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8012ffe:	429d      	cmp	r5, r3
 8013000:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013004:	f84c 1b04 	str.w	r1, [ip], #4
 8013008:	dcec      	bgt.n	8012fe4 <__multadd+0x12>
 801300a:	b1d7      	cbz	r7, 8013042 <__multadd+0x70>
 801300c:	68a3      	ldr	r3, [r4, #8]
 801300e:	42ab      	cmp	r3, r5
 8013010:	dc12      	bgt.n	8013038 <__multadd+0x66>
 8013012:	6861      	ldr	r1, [r4, #4]
 8013014:	4630      	mov	r0, r6
 8013016:	3101      	adds	r1, #1
 8013018:	f7ff ff90 	bl	8012f3c <_Balloc>
 801301c:	6922      	ldr	r2, [r4, #16]
 801301e:	3202      	adds	r2, #2
 8013020:	f104 010c 	add.w	r1, r4, #12
 8013024:	4680      	mov	r8, r0
 8013026:	0092      	lsls	r2, r2, #2
 8013028:	300c      	adds	r0, #12
 801302a:	f7fe f9c1 	bl	80113b0 <memcpy>
 801302e:	4621      	mov	r1, r4
 8013030:	4630      	mov	r0, r6
 8013032:	f7ff ffb7 	bl	8012fa4 <_Bfree>
 8013036:	4644      	mov	r4, r8
 8013038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801303c:	3501      	adds	r5, #1
 801303e:	615f      	str	r7, [r3, #20]
 8013040:	6125      	str	r5, [r4, #16]
 8013042:	4620      	mov	r0, r4
 8013044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013048 <__s2b>:
 8013048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801304c:	460c      	mov	r4, r1
 801304e:	4615      	mov	r5, r2
 8013050:	461f      	mov	r7, r3
 8013052:	2209      	movs	r2, #9
 8013054:	3308      	adds	r3, #8
 8013056:	4606      	mov	r6, r0
 8013058:	fb93 f3f2 	sdiv	r3, r3, r2
 801305c:	2100      	movs	r1, #0
 801305e:	2201      	movs	r2, #1
 8013060:	429a      	cmp	r2, r3
 8013062:	db20      	blt.n	80130a6 <__s2b+0x5e>
 8013064:	4630      	mov	r0, r6
 8013066:	f7ff ff69 	bl	8012f3c <_Balloc>
 801306a:	9b08      	ldr	r3, [sp, #32]
 801306c:	6143      	str	r3, [r0, #20]
 801306e:	2d09      	cmp	r5, #9
 8013070:	f04f 0301 	mov.w	r3, #1
 8013074:	6103      	str	r3, [r0, #16]
 8013076:	dd19      	ble.n	80130ac <__s2b+0x64>
 8013078:	f104 0809 	add.w	r8, r4, #9
 801307c:	46c1      	mov	r9, r8
 801307e:	442c      	add	r4, r5
 8013080:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013084:	4601      	mov	r1, r0
 8013086:	3b30      	subs	r3, #48	; 0x30
 8013088:	220a      	movs	r2, #10
 801308a:	4630      	mov	r0, r6
 801308c:	f7ff ffa1 	bl	8012fd2 <__multadd>
 8013090:	45a1      	cmp	r9, r4
 8013092:	d1f5      	bne.n	8013080 <__s2b+0x38>
 8013094:	eb08 0405 	add.w	r4, r8, r5
 8013098:	3c08      	subs	r4, #8
 801309a:	1b2d      	subs	r5, r5, r4
 801309c:	1963      	adds	r3, r4, r5
 801309e:	42bb      	cmp	r3, r7
 80130a0:	db07      	blt.n	80130b2 <__s2b+0x6a>
 80130a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130a6:	0052      	lsls	r2, r2, #1
 80130a8:	3101      	adds	r1, #1
 80130aa:	e7d9      	b.n	8013060 <__s2b+0x18>
 80130ac:	340a      	adds	r4, #10
 80130ae:	2509      	movs	r5, #9
 80130b0:	e7f3      	b.n	801309a <__s2b+0x52>
 80130b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80130b6:	4601      	mov	r1, r0
 80130b8:	3b30      	subs	r3, #48	; 0x30
 80130ba:	220a      	movs	r2, #10
 80130bc:	4630      	mov	r0, r6
 80130be:	f7ff ff88 	bl	8012fd2 <__multadd>
 80130c2:	e7eb      	b.n	801309c <__s2b+0x54>

080130c4 <__hi0bits>:
 80130c4:	0c02      	lsrs	r2, r0, #16
 80130c6:	0412      	lsls	r2, r2, #16
 80130c8:	4603      	mov	r3, r0
 80130ca:	b9b2      	cbnz	r2, 80130fa <__hi0bits+0x36>
 80130cc:	0403      	lsls	r3, r0, #16
 80130ce:	2010      	movs	r0, #16
 80130d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80130d4:	bf04      	itt	eq
 80130d6:	021b      	lsleq	r3, r3, #8
 80130d8:	3008      	addeq	r0, #8
 80130da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80130de:	bf04      	itt	eq
 80130e0:	011b      	lsleq	r3, r3, #4
 80130e2:	3004      	addeq	r0, #4
 80130e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80130e8:	bf04      	itt	eq
 80130ea:	009b      	lsleq	r3, r3, #2
 80130ec:	3002      	addeq	r0, #2
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	db06      	blt.n	8013100 <__hi0bits+0x3c>
 80130f2:	005b      	lsls	r3, r3, #1
 80130f4:	d503      	bpl.n	80130fe <__hi0bits+0x3a>
 80130f6:	3001      	adds	r0, #1
 80130f8:	4770      	bx	lr
 80130fa:	2000      	movs	r0, #0
 80130fc:	e7e8      	b.n	80130d0 <__hi0bits+0xc>
 80130fe:	2020      	movs	r0, #32
 8013100:	4770      	bx	lr

08013102 <__lo0bits>:
 8013102:	6803      	ldr	r3, [r0, #0]
 8013104:	f013 0207 	ands.w	r2, r3, #7
 8013108:	4601      	mov	r1, r0
 801310a:	d00b      	beq.n	8013124 <__lo0bits+0x22>
 801310c:	07da      	lsls	r2, r3, #31
 801310e:	d423      	bmi.n	8013158 <__lo0bits+0x56>
 8013110:	0798      	lsls	r0, r3, #30
 8013112:	bf49      	itett	mi
 8013114:	085b      	lsrmi	r3, r3, #1
 8013116:	089b      	lsrpl	r3, r3, #2
 8013118:	2001      	movmi	r0, #1
 801311a:	600b      	strmi	r3, [r1, #0]
 801311c:	bf5c      	itt	pl
 801311e:	600b      	strpl	r3, [r1, #0]
 8013120:	2002      	movpl	r0, #2
 8013122:	4770      	bx	lr
 8013124:	b298      	uxth	r0, r3
 8013126:	b9a8      	cbnz	r0, 8013154 <__lo0bits+0x52>
 8013128:	0c1b      	lsrs	r3, r3, #16
 801312a:	2010      	movs	r0, #16
 801312c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013130:	bf04      	itt	eq
 8013132:	0a1b      	lsreq	r3, r3, #8
 8013134:	3008      	addeq	r0, #8
 8013136:	071a      	lsls	r2, r3, #28
 8013138:	bf04      	itt	eq
 801313a:	091b      	lsreq	r3, r3, #4
 801313c:	3004      	addeq	r0, #4
 801313e:	079a      	lsls	r2, r3, #30
 8013140:	bf04      	itt	eq
 8013142:	089b      	lsreq	r3, r3, #2
 8013144:	3002      	addeq	r0, #2
 8013146:	07da      	lsls	r2, r3, #31
 8013148:	d402      	bmi.n	8013150 <__lo0bits+0x4e>
 801314a:	085b      	lsrs	r3, r3, #1
 801314c:	d006      	beq.n	801315c <__lo0bits+0x5a>
 801314e:	3001      	adds	r0, #1
 8013150:	600b      	str	r3, [r1, #0]
 8013152:	4770      	bx	lr
 8013154:	4610      	mov	r0, r2
 8013156:	e7e9      	b.n	801312c <__lo0bits+0x2a>
 8013158:	2000      	movs	r0, #0
 801315a:	4770      	bx	lr
 801315c:	2020      	movs	r0, #32
 801315e:	4770      	bx	lr

08013160 <__i2b>:
 8013160:	b510      	push	{r4, lr}
 8013162:	460c      	mov	r4, r1
 8013164:	2101      	movs	r1, #1
 8013166:	f7ff fee9 	bl	8012f3c <_Balloc>
 801316a:	2201      	movs	r2, #1
 801316c:	6144      	str	r4, [r0, #20]
 801316e:	6102      	str	r2, [r0, #16]
 8013170:	bd10      	pop	{r4, pc}

08013172 <__multiply>:
 8013172:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013176:	4614      	mov	r4, r2
 8013178:	690a      	ldr	r2, [r1, #16]
 801317a:	6923      	ldr	r3, [r4, #16]
 801317c:	429a      	cmp	r2, r3
 801317e:	bfb8      	it	lt
 8013180:	460b      	movlt	r3, r1
 8013182:	4688      	mov	r8, r1
 8013184:	bfbc      	itt	lt
 8013186:	46a0      	movlt	r8, r4
 8013188:	461c      	movlt	r4, r3
 801318a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801318e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013196:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801319a:	eb07 0609 	add.w	r6, r7, r9
 801319e:	42b3      	cmp	r3, r6
 80131a0:	bfb8      	it	lt
 80131a2:	3101      	addlt	r1, #1
 80131a4:	f7ff feca 	bl	8012f3c <_Balloc>
 80131a8:	f100 0514 	add.w	r5, r0, #20
 80131ac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80131b0:	462b      	mov	r3, r5
 80131b2:	2200      	movs	r2, #0
 80131b4:	4573      	cmp	r3, lr
 80131b6:	d316      	bcc.n	80131e6 <__multiply+0x74>
 80131b8:	f104 0214 	add.w	r2, r4, #20
 80131bc:	f108 0114 	add.w	r1, r8, #20
 80131c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80131c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	9b00      	ldr	r3, [sp, #0]
 80131cc:	9201      	str	r2, [sp, #4]
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d80c      	bhi.n	80131ec <__multiply+0x7a>
 80131d2:	2e00      	cmp	r6, #0
 80131d4:	dd03      	ble.n	80131de <__multiply+0x6c>
 80131d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d05d      	beq.n	801329a <__multiply+0x128>
 80131de:	6106      	str	r6, [r0, #16]
 80131e0:	b003      	add	sp, #12
 80131e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e6:	f843 2b04 	str.w	r2, [r3], #4
 80131ea:	e7e3      	b.n	80131b4 <__multiply+0x42>
 80131ec:	f8b2 b000 	ldrh.w	fp, [r2]
 80131f0:	f1bb 0f00 	cmp.w	fp, #0
 80131f4:	d023      	beq.n	801323e <__multiply+0xcc>
 80131f6:	4689      	mov	r9, r1
 80131f8:	46ac      	mov	ip, r5
 80131fa:	f04f 0800 	mov.w	r8, #0
 80131fe:	f859 4b04 	ldr.w	r4, [r9], #4
 8013202:	f8dc a000 	ldr.w	sl, [ip]
 8013206:	b2a3      	uxth	r3, r4
 8013208:	fa1f fa8a 	uxth.w	sl, sl
 801320c:	fb0b a303 	mla	r3, fp, r3, sl
 8013210:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013214:	f8dc 4000 	ldr.w	r4, [ip]
 8013218:	4443      	add	r3, r8
 801321a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801321e:	fb0b 840a 	mla	r4, fp, sl, r8
 8013222:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013226:	46e2      	mov	sl, ip
 8013228:	b29b      	uxth	r3, r3
 801322a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801322e:	454f      	cmp	r7, r9
 8013230:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013234:	f84a 3b04 	str.w	r3, [sl], #4
 8013238:	d82b      	bhi.n	8013292 <__multiply+0x120>
 801323a:	f8cc 8004 	str.w	r8, [ip, #4]
 801323e:	9b01      	ldr	r3, [sp, #4]
 8013240:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013244:	3204      	adds	r2, #4
 8013246:	f1ba 0f00 	cmp.w	sl, #0
 801324a:	d020      	beq.n	801328e <__multiply+0x11c>
 801324c:	682b      	ldr	r3, [r5, #0]
 801324e:	4689      	mov	r9, r1
 8013250:	46a8      	mov	r8, r5
 8013252:	f04f 0b00 	mov.w	fp, #0
 8013256:	f8b9 c000 	ldrh.w	ip, [r9]
 801325a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801325e:	fb0a 440c 	mla	r4, sl, ip, r4
 8013262:	445c      	add	r4, fp
 8013264:	46c4      	mov	ip, r8
 8013266:	b29b      	uxth	r3, r3
 8013268:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801326c:	f84c 3b04 	str.w	r3, [ip], #4
 8013270:	f859 3b04 	ldr.w	r3, [r9], #4
 8013274:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013278:	0c1b      	lsrs	r3, r3, #16
 801327a:	fb0a b303 	mla	r3, sl, r3, fp
 801327e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013282:	454f      	cmp	r7, r9
 8013284:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013288:	d805      	bhi.n	8013296 <__multiply+0x124>
 801328a:	f8c8 3004 	str.w	r3, [r8, #4]
 801328e:	3504      	adds	r5, #4
 8013290:	e79b      	b.n	80131ca <__multiply+0x58>
 8013292:	46d4      	mov	ip, sl
 8013294:	e7b3      	b.n	80131fe <__multiply+0x8c>
 8013296:	46e0      	mov	r8, ip
 8013298:	e7dd      	b.n	8013256 <__multiply+0xe4>
 801329a:	3e01      	subs	r6, #1
 801329c:	e799      	b.n	80131d2 <__multiply+0x60>
	...

080132a0 <__pow5mult>:
 80132a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132a4:	4615      	mov	r5, r2
 80132a6:	f012 0203 	ands.w	r2, r2, #3
 80132aa:	4606      	mov	r6, r0
 80132ac:	460f      	mov	r7, r1
 80132ae:	d007      	beq.n	80132c0 <__pow5mult+0x20>
 80132b0:	3a01      	subs	r2, #1
 80132b2:	4c21      	ldr	r4, [pc, #132]	; (8013338 <__pow5mult+0x98>)
 80132b4:	2300      	movs	r3, #0
 80132b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80132ba:	f7ff fe8a 	bl	8012fd2 <__multadd>
 80132be:	4607      	mov	r7, r0
 80132c0:	10ad      	asrs	r5, r5, #2
 80132c2:	d035      	beq.n	8013330 <__pow5mult+0x90>
 80132c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80132c6:	b93c      	cbnz	r4, 80132d8 <__pow5mult+0x38>
 80132c8:	2010      	movs	r0, #16
 80132ca:	f001 fcef 	bl	8014cac <malloc>
 80132ce:	6270      	str	r0, [r6, #36]	; 0x24
 80132d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80132d4:	6004      	str	r4, [r0, #0]
 80132d6:	60c4      	str	r4, [r0, #12]
 80132d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80132dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80132e0:	b94c      	cbnz	r4, 80132f6 <__pow5mult+0x56>
 80132e2:	f240 2171 	movw	r1, #625	; 0x271
 80132e6:	4630      	mov	r0, r6
 80132e8:	f7ff ff3a 	bl	8013160 <__i2b>
 80132ec:	2300      	movs	r3, #0
 80132ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80132f2:	4604      	mov	r4, r0
 80132f4:	6003      	str	r3, [r0, #0]
 80132f6:	f04f 0800 	mov.w	r8, #0
 80132fa:	07eb      	lsls	r3, r5, #31
 80132fc:	d50a      	bpl.n	8013314 <__pow5mult+0x74>
 80132fe:	4639      	mov	r1, r7
 8013300:	4622      	mov	r2, r4
 8013302:	4630      	mov	r0, r6
 8013304:	f7ff ff35 	bl	8013172 <__multiply>
 8013308:	4639      	mov	r1, r7
 801330a:	4681      	mov	r9, r0
 801330c:	4630      	mov	r0, r6
 801330e:	f7ff fe49 	bl	8012fa4 <_Bfree>
 8013312:	464f      	mov	r7, r9
 8013314:	106d      	asrs	r5, r5, #1
 8013316:	d00b      	beq.n	8013330 <__pow5mult+0x90>
 8013318:	6820      	ldr	r0, [r4, #0]
 801331a:	b938      	cbnz	r0, 801332c <__pow5mult+0x8c>
 801331c:	4622      	mov	r2, r4
 801331e:	4621      	mov	r1, r4
 8013320:	4630      	mov	r0, r6
 8013322:	f7ff ff26 	bl	8013172 <__multiply>
 8013326:	6020      	str	r0, [r4, #0]
 8013328:	f8c0 8000 	str.w	r8, [r0]
 801332c:	4604      	mov	r4, r0
 801332e:	e7e4      	b.n	80132fa <__pow5mult+0x5a>
 8013330:	4638      	mov	r0, r7
 8013332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013336:	bf00      	nop
 8013338:	08015370 	.word	0x08015370

0801333c <__lshift>:
 801333c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013340:	460c      	mov	r4, r1
 8013342:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013346:	6923      	ldr	r3, [r4, #16]
 8013348:	6849      	ldr	r1, [r1, #4]
 801334a:	eb0a 0903 	add.w	r9, sl, r3
 801334e:	68a3      	ldr	r3, [r4, #8]
 8013350:	4607      	mov	r7, r0
 8013352:	4616      	mov	r6, r2
 8013354:	f109 0501 	add.w	r5, r9, #1
 8013358:	42ab      	cmp	r3, r5
 801335a:	db32      	blt.n	80133c2 <__lshift+0x86>
 801335c:	4638      	mov	r0, r7
 801335e:	f7ff fded 	bl	8012f3c <_Balloc>
 8013362:	2300      	movs	r3, #0
 8013364:	4680      	mov	r8, r0
 8013366:	f100 0114 	add.w	r1, r0, #20
 801336a:	461a      	mov	r2, r3
 801336c:	4553      	cmp	r3, sl
 801336e:	db2b      	blt.n	80133c8 <__lshift+0x8c>
 8013370:	6920      	ldr	r0, [r4, #16]
 8013372:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013376:	f104 0314 	add.w	r3, r4, #20
 801337a:	f016 021f 	ands.w	r2, r6, #31
 801337e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013382:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013386:	d025      	beq.n	80133d4 <__lshift+0x98>
 8013388:	f1c2 0e20 	rsb	lr, r2, #32
 801338c:	2000      	movs	r0, #0
 801338e:	681e      	ldr	r6, [r3, #0]
 8013390:	468a      	mov	sl, r1
 8013392:	4096      	lsls	r6, r2
 8013394:	4330      	orrs	r0, r6
 8013396:	f84a 0b04 	str.w	r0, [sl], #4
 801339a:	f853 0b04 	ldr.w	r0, [r3], #4
 801339e:	459c      	cmp	ip, r3
 80133a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80133a4:	d814      	bhi.n	80133d0 <__lshift+0x94>
 80133a6:	6048      	str	r0, [r1, #4]
 80133a8:	b108      	cbz	r0, 80133ae <__lshift+0x72>
 80133aa:	f109 0502 	add.w	r5, r9, #2
 80133ae:	3d01      	subs	r5, #1
 80133b0:	4638      	mov	r0, r7
 80133b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80133b6:	4621      	mov	r1, r4
 80133b8:	f7ff fdf4 	bl	8012fa4 <_Bfree>
 80133bc:	4640      	mov	r0, r8
 80133be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133c2:	3101      	adds	r1, #1
 80133c4:	005b      	lsls	r3, r3, #1
 80133c6:	e7c7      	b.n	8013358 <__lshift+0x1c>
 80133c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80133cc:	3301      	adds	r3, #1
 80133ce:	e7cd      	b.n	801336c <__lshift+0x30>
 80133d0:	4651      	mov	r1, sl
 80133d2:	e7dc      	b.n	801338e <__lshift+0x52>
 80133d4:	3904      	subs	r1, #4
 80133d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80133da:	f841 2f04 	str.w	r2, [r1, #4]!
 80133de:	459c      	cmp	ip, r3
 80133e0:	d8f9      	bhi.n	80133d6 <__lshift+0x9a>
 80133e2:	e7e4      	b.n	80133ae <__lshift+0x72>

080133e4 <__mcmp>:
 80133e4:	6903      	ldr	r3, [r0, #16]
 80133e6:	690a      	ldr	r2, [r1, #16]
 80133e8:	1a9b      	subs	r3, r3, r2
 80133ea:	b530      	push	{r4, r5, lr}
 80133ec:	d10c      	bne.n	8013408 <__mcmp+0x24>
 80133ee:	0092      	lsls	r2, r2, #2
 80133f0:	3014      	adds	r0, #20
 80133f2:	3114      	adds	r1, #20
 80133f4:	1884      	adds	r4, r0, r2
 80133f6:	4411      	add	r1, r2
 80133f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80133fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013400:	4295      	cmp	r5, r2
 8013402:	d003      	beq.n	801340c <__mcmp+0x28>
 8013404:	d305      	bcc.n	8013412 <__mcmp+0x2e>
 8013406:	2301      	movs	r3, #1
 8013408:	4618      	mov	r0, r3
 801340a:	bd30      	pop	{r4, r5, pc}
 801340c:	42a0      	cmp	r0, r4
 801340e:	d3f3      	bcc.n	80133f8 <__mcmp+0x14>
 8013410:	e7fa      	b.n	8013408 <__mcmp+0x24>
 8013412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013416:	e7f7      	b.n	8013408 <__mcmp+0x24>

08013418 <__mdiff>:
 8013418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801341c:	460d      	mov	r5, r1
 801341e:	4607      	mov	r7, r0
 8013420:	4611      	mov	r1, r2
 8013422:	4628      	mov	r0, r5
 8013424:	4614      	mov	r4, r2
 8013426:	f7ff ffdd 	bl	80133e4 <__mcmp>
 801342a:	1e06      	subs	r6, r0, #0
 801342c:	d108      	bne.n	8013440 <__mdiff+0x28>
 801342e:	4631      	mov	r1, r6
 8013430:	4638      	mov	r0, r7
 8013432:	f7ff fd83 	bl	8012f3c <_Balloc>
 8013436:	2301      	movs	r3, #1
 8013438:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801343c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013440:	bfa4      	itt	ge
 8013442:	4623      	movge	r3, r4
 8013444:	462c      	movge	r4, r5
 8013446:	4638      	mov	r0, r7
 8013448:	6861      	ldr	r1, [r4, #4]
 801344a:	bfa6      	itte	ge
 801344c:	461d      	movge	r5, r3
 801344e:	2600      	movge	r6, #0
 8013450:	2601      	movlt	r6, #1
 8013452:	f7ff fd73 	bl	8012f3c <_Balloc>
 8013456:	692b      	ldr	r3, [r5, #16]
 8013458:	60c6      	str	r6, [r0, #12]
 801345a:	6926      	ldr	r6, [r4, #16]
 801345c:	f105 0914 	add.w	r9, r5, #20
 8013460:	f104 0214 	add.w	r2, r4, #20
 8013464:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013468:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801346c:	f100 0514 	add.w	r5, r0, #20
 8013470:	f04f 0e00 	mov.w	lr, #0
 8013474:	f852 ab04 	ldr.w	sl, [r2], #4
 8013478:	f859 4b04 	ldr.w	r4, [r9], #4
 801347c:	fa1e f18a 	uxtah	r1, lr, sl
 8013480:	b2a3      	uxth	r3, r4
 8013482:	1ac9      	subs	r1, r1, r3
 8013484:	0c23      	lsrs	r3, r4, #16
 8013486:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801348a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801348e:	b289      	uxth	r1, r1
 8013490:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013494:	45c8      	cmp	r8, r9
 8013496:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801349a:	4694      	mov	ip, r2
 801349c:	f845 3b04 	str.w	r3, [r5], #4
 80134a0:	d8e8      	bhi.n	8013474 <__mdiff+0x5c>
 80134a2:	45bc      	cmp	ip, r7
 80134a4:	d304      	bcc.n	80134b0 <__mdiff+0x98>
 80134a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80134aa:	b183      	cbz	r3, 80134ce <__mdiff+0xb6>
 80134ac:	6106      	str	r6, [r0, #16]
 80134ae:	e7c5      	b.n	801343c <__mdiff+0x24>
 80134b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80134b4:	fa1e f381 	uxtah	r3, lr, r1
 80134b8:	141a      	asrs	r2, r3, #16
 80134ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80134be:	b29b      	uxth	r3, r3
 80134c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80134c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80134c8:	f845 3b04 	str.w	r3, [r5], #4
 80134cc:	e7e9      	b.n	80134a2 <__mdiff+0x8a>
 80134ce:	3e01      	subs	r6, #1
 80134d0:	e7e9      	b.n	80134a6 <__mdiff+0x8e>
	...

080134d4 <__ulp>:
 80134d4:	4b12      	ldr	r3, [pc, #72]	; (8013520 <__ulp+0x4c>)
 80134d6:	ee10 2a90 	vmov	r2, s1
 80134da:	401a      	ands	r2, r3
 80134dc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	dd04      	ble.n	80134ee <__ulp+0x1a>
 80134e4:	2000      	movs	r0, #0
 80134e6:	4619      	mov	r1, r3
 80134e8:	ec41 0b10 	vmov	d0, r0, r1
 80134ec:	4770      	bx	lr
 80134ee:	425b      	negs	r3, r3
 80134f0:	151b      	asrs	r3, r3, #20
 80134f2:	2b13      	cmp	r3, #19
 80134f4:	f04f 0000 	mov.w	r0, #0
 80134f8:	f04f 0100 	mov.w	r1, #0
 80134fc:	dc04      	bgt.n	8013508 <__ulp+0x34>
 80134fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013502:	fa42 f103 	asr.w	r1, r2, r3
 8013506:	e7ef      	b.n	80134e8 <__ulp+0x14>
 8013508:	3b14      	subs	r3, #20
 801350a:	2b1e      	cmp	r3, #30
 801350c:	f04f 0201 	mov.w	r2, #1
 8013510:	bfda      	itte	le
 8013512:	f1c3 031f 	rsble	r3, r3, #31
 8013516:	fa02 f303 	lslle.w	r3, r2, r3
 801351a:	4613      	movgt	r3, r2
 801351c:	4618      	mov	r0, r3
 801351e:	e7e3      	b.n	80134e8 <__ulp+0x14>
 8013520:	7ff00000 	.word	0x7ff00000

08013524 <__b2d>:
 8013524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013526:	6905      	ldr	r5, [r0, #16]
 8013528:	f100 0714 	add.w	r7, r0, #20
 801352c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013530:	1f2e      	subs	r6, r5, #4
 8013532:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013536:	4620      	mov	r0, r4
 8013538:	f7ff fdc4 	bl	80130c4 <__hi0bits>
 801353c:	f1c0 0320 	rsb	r3, r0, #32
 8013540:	280a      	cmp	r0, #10
 8013542:	600b      	str	r3, [r1, #0]
 8013544:	f8df c074 	ldr.w	ip, [pc, #116]	; 80135bc <__b2d+0x98>
 8013548:	dc14      	bgt.n	8013574 <__b2d+0x50>
 801354a:	f1c0 0e0b 	rsb	lr, r0, #11
 801354e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013552:	42b7      	cmp	r7, r6
 8013554:	ea41 030c 	orr.w	r3, r1, ip
 8013558:	bf34      	ite	cc
 801355a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801355e:	2100      	movcs	r1, #0
 8013560:	3015      	adds	r0, #21
 8013562:	fa04 f000 	lsl.w	r0, r4, r0
 8013566:	fa21 f10e 	lsr.w	r1, r1, lr
 801356a:	ea40 0201 	orr.w	r2, r0, r1
 801356e:	ec43 2b10 	vmov	d0, r2, r3
 8013572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013574:	42b7      	cmp	r7, r6
 8013576:	bf3a      	itte	cc
 8013578:	f1a5 0608 	subcc.w	r6, r5, #8
 801357c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013580:	2100      	movcs	r1, #0
 8013582:	380b      	subs	r0, #11
 8013584:	d015      	beq.n	80135b2 <__b2d+0x8e>
 8013586:	4084      	lsls	r4, r0
 8013588:	f1c0 0520 	rsb	r5, r0, #32
 801358c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013590:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013594:	42be      	cmp	r6, r7
 8013596:	fa21 fc05 	lsr.w	ip, r1, r5
 801359a:	ea44 030c 	orr.w	r3, r4, ip
 801359e:	bf8c      	ite	hi
 80135a0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80135a4:	2400      	movls	r4, #0
 80135a6:	fa01 f000 	lsl.w	r0, r1, r0
 80135aa:	40ec      	lsrs	r4, r5
 80135ac:	ea40 0204 	orr.w	r2, r0, r4
 80135b0:	e7dd      	b.n	801356e <__b2d+0x4a>
 80135b2:	ea44 030c 	orr.w	r3, r4, ip
 80135b6:	460a      	mov	r2, r1
 80135b8:	e7d9      	b.n	801356e <__b2d+0x4a>
 80135ba:	bf00      	nop
 80135bc:	3ff00000 	.word	0x3ff00000

080135c0 <__d2b>:
 80135c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80135c4:	460e      	mov	r6, r1
 80135c6:	2101      	movs	r1, #1
 80135c8:	ec59 8b10 	vmov	r8, r9, d0
 80135cc:	4615      	mov	r5, r2
 80135ce:	f7ff fcb5 	bl	8012f3c <_Balloc>
 80135d2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80135d6:	4607      	mov	r7, r0
 80135d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80135dc:	bb34      	cbnz	r4, 801362c <__d2b+0x6c>
 80135de:	9301      	str	r3, [sp, #4]
 80135e0:	f1b8 0300 	subs.w	r3, r8, #0
 80135e4:	d027      	beq.n	8013636 <__d2b+0x76>
 80135e6:	a802      	add	r0, sp, #8
 80135e8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80135ec:	f7ff fd89 	bl	8013102 <__lo0bits>
 80135f0:	9900      	ldr	r1, [sp, #0]
 80135f2:	b1f0      	cbz	r0, 8013632 <__d2b+0x72>
 80135f4:	9a01      	ldr	r2, [sp, #4]
 80135f6:	f1c0 0320 	rsb	r3, r0, #32
 80135fa:	fa02 f303 	lsl.w	r3, r2, r3
 80135fe:	430b      	orrs	r3, r1
 8013600:	40c2      	lsrs	r2, r0
 8013602:	617b      	str	r3, [r7, #20]
 8013604:	9201      	str	r2, [sp, #4]
 8013606:	9b01      	ldr	r3, [sp, #4]
 8013608:	61bb      	str	r3, [r7, #24]
 801360a:	2b00      	cmp	r3, #0
 801360c:	bf14      	ite	ne
 801360e:	2102      	movne	r1, #2
 8013610:	2101      	moveq	r1, #1
 8013612:	6139      	str	r1, [r7, #16]
 8013614:	b1c4      	cbz	r4, 8013648 <__d2b+0x88>
 8013616:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801361a:	4404      	add	r4, r0
 801361c:	6034      	str	r4, [r6, #0]
 801361e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013622:	6028      	str	r0, [r5, #0]
 8013624:	4638      	mov	r0, r7
 8013626:	b003      	add	sp, #12
 8013628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801362c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013630:	e7d5      	b.n	80135de <__d2b+0x1e>
 8013632:	6179      	str	r1, [r7, #20]
 8013634:	e7e7      	b.n	8013606 <__d2b+0x46>
 8013636:	a801      	add	r0, sp, #4
 8013638:	f7ff fd63 	bl	8013102 <__lo0bits>
 801363c:	9b01      	ldr	r3, [sp, #4]
 801363e:	617b      	str	r3, [r7, #20]
 8013640:	2101      	movs	r1, #1
 8013642:	6139      	str	r1, [r7, #16]
 8013644:	3020      	adds	r0, #32
 8013646:	e7e5      	b.n	8013614 <__d2b+0x54>
 8013648:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801364c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013650:	6030      	str	r0, [r6, #0]
 8013652:	6918      	ldr	r0, [r3, #16]
 8013654:	f7ff fd36 	bl	80130c4 <__hi0bits>
 8013658:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801365c:	e7e1      	b.n	8013622 <__d2b+0x62>

0801365e <__ratio>:
 801365e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013662:	4688      	mov	r8, r1
 8013664:	4669      	mov	r1, sp
 8013666:	4681      	mov	r9, r0
 8013668:	f7ff ff5c 	bl	8013524 <__b2d>
 801366c:	a901      	add	r1, sp, #4
 801366e:	4640      	mov	r0, r8
 8013670:	ec57 6b10 	vmov	r6, r7, d0
 8013674:	f7ff ff56 	bl	8013524 <__b2d>
 8013678:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801367c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013680:	eba3 0c02 	sub.w	ip, r3, r2
 8013684:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013688:	1a9b      	subs	r3, r3, r2
 801368a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801368e:	ec5b ab10 	vmov	sl, fp, d0
 8013692:	2b00      	cmp	r3, #0
 8013694:	bfce      	itee	gt
 8013696:	463a      	movgt	r2, r7
 8013698:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801369c:	465a      	movle	r2, fp
 801369e:	4659      	mov	r1, fp
 80136a0:	463d      	mov	r5, r7
 80136a2:	bfd4      	ite	le
 80136a4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80136a8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80136ac:	4630      	mov	r0, r6
 80136ae:	ee10 2a10 	vmov	r2, s0
 80136b2:	460b      	mov	r3, r1
 80136b4:	4629      	mov	r1, r5
 80136b6:	f7ed f8d9 	bl	800086c <__aeabi_ddiv>
 80136ba:	ec41 0b10 	vmov	d0, r0, r1
 80136be:	b003      	add	sp, #12
 80136c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080136c4 <__copybits>:
 80136c4:	3901      	subs	r1, #1
 80136c6:	b510      	push	{r4, lr}
 80136c8:	1149      	asrs	r1, r1, #5
 80136ca:	6914      	ldr	r4, [r2, #16]
 80136cc:	3101      	adds	r1, #1
 80136ce:	f102 0314 	add.w	r3, r2, #20
 80136d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80136d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80136da:	42a3      	cmp	r3, r4
 80136dc:	4602      	mov	r2, r0
 80136de:	d303      	bcc.n	80136e8 <__copybits+0x24>
 80136e0:	2300      	movs	r3, #0
 80136e2:	428a      	cmp	r2, r1
 80136e4:	d305      	bcc.n	80136f2 <__copybits+0x2e>
 80136e6:	bd10      	pop	{r4, pc}
 80136e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80136ec:	f840 2b04 	str.w	r2, [r0], #4
 80136f0:	e7f3      	b.n	80136da <__copybits+0x16>
 80136f2:	f842 3b04 	str.w	r3, [r2], #4
 80136f6:	e7f4      	b.n	80136e2 <__copybits+0x1e>

080136f8 <__any_on>:
 80136f8:	f100 0214 	add.w	r2, r0, #20
 80136fc:	6900      	ldr	r0, [r0, #16]
 80136fe:	114b      	asrs	r3, r1, #5
 8013700:	4298      	cmp	r0, r3
 8013702:	b510      	push	{r4, lr}
 8013704:	db11      	blt.n	801372a <__any_on+0x32>
 8013706:	dd0a      	ble.n	801371e <__any_on+0x26>
 8013708:	f011 011f 	ands.w	r1, r1, #31
 801370c:	d007      	beq.n	801371e <__any_on+0x26>
 801370e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013712:	fa24 f001 	lsr.w	r0, r4, r1
 8013716:	fa00 f101 	lsl.w	r1, r0, r1
 801371a:	428c      	cmp	r4, r1
 801371c:	d10b      	bne.n	8013736 <__any_on+0x3e>
 801371e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013722:	4293      	cmp	r3, r2
 8013724:	d803      	bhi.n	801372e <__any_on+0x36>
 8013726:	2000      	movs	r0, #0
 8013728:	bd10      	pop	{r4, pc}
 801372a:	4603      	mov	r3, r0
 801372c:	e7f7      	b.n	801371e <__any_on+0x26>
 801372e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013732:	2900      	cmp	r1, #0
 8013734:	d0f5      	beq.n	8013722 <__any_on+0x2a>
 8013736:	2001      	movs	r0, #1
 8013738:	e7f6      	b.n	8013728 <__any_on+0x30>

0801373a <_calloc_r>:
 801373a:	b538      	push	{r3, r4, r5, lr}
 801373c:	fb02 f401 	mul.w	r4, r2, r1
 8013740:	4621      	mov	r1, r4
 8013742:	f000 f809 	bl	8013758 <_malloc_r>
 8013746:	4605      	mov	r5, r0
 8013748:	b118      	cbz	r0, 8013752 <_calloc_r+0x18>
 801374a:	4622      	mov	r2, r4
 801374c:	2100      	movs	r1, #0
 801374e:	f7fd fe3a 	bl	80113c6 <memset>
 8013752:	4628      	mov	r0, r5
 8013754:	bd38      	pop	{r3, r4, r5, pc}
	...

08013758 <_malloc_r>:
 8013758:	b570      	push	{r4, r5, r6, lr}
 801375a:	1ccd      	adds	r5, r1, #3
 801375c:	f025 0503 	bic.w	r5, r5, #3
 8013760:	3508      	adds	r5, #8
 8013762:	2d0c      	cmp	r5, #12
 8013764:	bf38      	it	cc
 8013766:	250c      	movcc	r5, #12
 8013768:	2d00      	cmp	r5, #0
 801376a:	4606      	mov	r6, r0
 801376c:	db01      	blt.n	8013772 <_malloc_r+0x1a>
 801376e:	42a9      	cmp	r1, r5
 8013770:	d903      	bls.n	801377a <_malloc_r+0x22>
 8013772:	230c      	movs	r3, #12
 8013774:	6033      	str	r3, [r6, #0]
 8013776:	2000      	movs	r0, #0
 8013778:	bd70      	pop	{r4, r5, r6, pc}
 801377a:	f001 fab8 	bl	8014cee <__malloc_lock>
 801377e:	4a21      	ldr	r2, [pc, #132]	; (8013804 <_malloc_r+0xac>)
 8013780:	6814      	ldr	r4, [r2, #0]
 8013782:	4621      	mov	r1, r4
 8013784:	b991      	cbnz	r1, 80137ac <_malloc_r+0x54>
 8013786:	4c20      	ldr	r4, [pc, #128]	; (8013808 <_malloc_r+0xb0>)
 8013788:	6823      	ldr	r3, [r4, #0]
 801378a:	b91b      	cbnz	r3, 8013794 <_malloc_r+0x3c>
 801378c:	4630      	mov	r0, r6
 801378e:	f000 ff91 	bl	80146b4 <_sbrk_r>
 8013792:	6020      	str	r0, [r4, #0]
 8013794:	4629      	mov	r1, r5
 8013796:	4630      	mov	r0, r6
 8013798:	f000 ff8c 	bl	80146b4 <_sbrk_r>
 801379c:	1c43      	adds	r3, r0, #1
 801379e:	d124      	bne.n	80137ea <_malloc_r+0x92>
 80137a0:	230c      	movs	r3, #12
 80137a2:	6033      	str	r3, [r6, #0]
 80137a4:	4630      	mov	r0, r6
 80137a6:	f001 faa3 	bl	8014cf0 <__malloc_unlock>
 80137aa:	e7e4      	b.n	8013776 <_malloc_r+0x1e>
 80137ac:	680b      	ldr	r3, [r1, #0]
 80137ae:	1b5b      	subs	r3, r3, r5
 80137b0:	d418      	bmi.n	80137e4 <_malloc_r+0x8c>
 80137b2:	2b0b      	cmp	r3, #11
 80137b4:	d90f      	bls.n	80137d6 <_malloc_r+0x7e>
 80137b6:	600b      	str	r3, [r1, #0]
 80137b8:	50cd      	str	r5, [r1, r3]
 80137ba:	18cc      	adds	r4, r1, r3
 80137bc:	4630      	mov	r0, r6
 80137be:	f001 fa97 	bl	8014cf0 <__malloc_unlock>
 80137c2:	f104 000b 	add.w	r0, r4, #11
 80137c6:	1d23      	adds	r3, r4, #4
 80137c8:	f020 0007 	bic.w	r0, r0, #7
 80137cc:	1ac3      	subs	r3, r0, r3
 80137ce:	d0d3      	beq.n	8013778 <_malloc_r+0x20>
 80137d0:	425a      	negs	r2, r3
 80137d2:	50e2      	str	r2, [r4, r3]
 80137d4:	e7d0      	b.n	8013778 <_malloc_r+0x20>
 80137d6:	428c      	cmp	r4, r1
 80137d8:	684b      	ldr	r3, [r1, #4]
 80137da:	bf16      	itet	ne
 80137dc:	6063      	strne	r3, [r4, #4]
 80137de:	6013      	streq	r3, [r2, #0]
 80137e0:	460c      	movne	r4, r1
 80137e2:	e7eb      	b.n	80137bc <_malloc_r+0x64>
 80137e4:	460c      	mov	r4, r1
 80137e6:	6849      	ldr	r1, [r1, #4]
 80137e8:	e7cc      	b.n	8013784 <_malloc_r+0x2c>
 80137ea:	1cc4      	adds	r4, r0, #3
 80137ec:	f024 0403 	bic.w	r4, r4, #3
 80137f0:	42a0      	cmp	r0, r4
 80137f2:	d005      	beq.n	8013800 <_malloc_r+0xa8>
 80137f4:	1a21      	subs	r1, r4, r0
 80137f6:	4630      	mov	r0, r6
 80137f8:	f000 ff5c 	bl	80146b4 <_sbrk_r>
 80137fc:	3001      	adds	r0, #1
 80137fe:	d0cf      	beq.n	80137a0 <_malloc_r+0x48>
 8013800:	6025      	str	r5, [r4, #0]
 8013802:	e7db      	b.n	80137bc <_malloc_r+0x64>
 8013804:	200005fc 	.word	0x200005fc
 8013808:	20000600 	.word	0x20000600

0801380c <_realloc_r>:
 801380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801380e:	4607      	mov	r7, r0
 8013810:	4614      	mov	r4, r2
 8013812:	460e      	mov	r6, r1
 8013814:	b921      	cbnz	r1, 8013820 <_realloc_r+0x14>
 8013816:	4611      	mov	r1, r2
 8013818:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801381c:	f7ff bf9c 	b.w	8013758 <_malloc_r>
 8013820:	b922      	cbnz	r2, 801382c <_realloc_r+0x20>
 8013822:	f001 fa67 	bl	8014cf4 <_free_r>
 8013826:	4625      	mov	r5, r4
 8013828:	4628      	mov	r0, r5
 801382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801382c:	f001 fab0 	bl	8014d90 <_malloc_usable_size_r>
 8013830:	42a0      	cmp	r0, r4
 8013832:	d20f      	bcs.n	8013854 <_realloc_r+0x48>
 8013834:	4621      	mov	r1, r4
 8013836:	4638      	mov	r0, r7
 8013838:	f7ff ff8e 	bl	8013758 <_malloc_r>
 801383c:	4605      	mov	r5, r0
 801383e:	2800      	cmp	r0, #0
 8013840:	d0f2      	beq.n	8013828 <_realloc_r+0x1c>
 8013842:	4631      	mov	r1, r6
 8013844:	4622      	mov	r2, r4
 8013846:	f7fd fdb3 	bl	80113b0 <memcpy>
 801384a:	4631      	mov	r1, r6
 801384c:	4638      	mov	r0, r7
 801384e:	f001 fa51 	bl	8014cf4 <_free_r>
 8013852:	e7e9      	b.n	8013828 <_realloc_r+0x1c>
 8013854:	4635      	mov	r5, r6
 8013856:	e7e7      	b.n	8013828 <_realloc_r+0x1c>

08013858 <__ssputs_r>:
 8013858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801385c:	688e      	ldr	r6, [r1, #8]
 801385e:	429e      	cmp	r6, r3
 8013860:	4682      	mov	sl, r0
 8013862:	460c      	mov	r4, r1
 8013864:	4690      	mov	r8, r2
 8013866:	4699      	mov	r9, r3
 8013868:	d837      	bhi.n	80138da <__ssputs_r+0x82>
 801386a:	898a      	ldrh	r2, [r1, #12]
 801386c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013870:	d031      	beq.n	80138d6 <__ssputs_r+0x7e>
 8013872:	6825      	ldr	r5, [r4, #0]
 8013874:	6909      	ldr	r1, [r1, #16]
 8013876:	1a6f      	subs	r7, r5, r1
 8013878:	6965      	ldr	r5, [r4, #20]
 801387a:	2302      	movs	r3, #2
 801387c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013880:	fb95 f5f3 	sdiv	r5, r5, r3
 8013884:	f109 0301 	add.w	r3, r9, #1
 8013888:	443b      	add	r3, r7
 801388a:	429d      	cmp	r5, r3
 801388c:	bf38      	it	cc
 801388e:	461d      	movcc	r5, r3
 8013890:	0553      	lsls	r3, r2, #21
 8013892:	d530      	bpl.n	80138f6 <__ssputs_r+0x9e>
 8013894:	4629      	mov	r1, r5
 8013896:	f7ff ff5f 	bl	8013758 <_malloc_r>
 801389a:	4606      	mov	r6, r0
 801389c:	b950      	cbnz	r0, 80138b4 <__ssputs_r+0x5c>
 801389e:	230c      	movs	r3, #12
 80138a0:	f8ca 3000 	str.w	r3, [sl]
 80138a4:	89a3      	ldrh	r3, [r4, #12]
 80138a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138aa:	81a3      	strh	r3, [r4, #12]
 80138ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138b4:	463a      	mov	r2, r7
 80138b6:	6921      	ldr	r1, [r4, #16]
 80138b8:	f7fd fd7a 	bl	80113b0 <memcpy>
 80138bc:	89a3      	ldrh	r3, [r4, #12]
 80138be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80138c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138c6:	81a3      	strh	r3, [r4, #12]
 80138c8:	6126      	str	r6, [r4, #16]
 80138ca:	6165      	str	r5, [r4, #20]
 80138cc:	443e      	add	r6, r7
 80138ce:	1bed      	subs	r5, r5, r7
 80138d0:	6026      	str	r6, [r4, #0]
 80138d2:	60a5      	str	r5, [r4, #8]
 80138d4:	464e      	mov	r6, r9
 80138d6:	454e      	cmp	r6, r9
 80138d8:	d900      	bls.n	80138dc <__ssputs_r+0x84>
 80138da:	464e      	mov	r6, r9
 80138dc:	4632      	mov	r2, r6
 80138de:	4641      	mov	r1, r8
 80138e0:	6820      	ldr	r0, [r4, #0]
 80138e2:	f001 f9eb 	bl	8014cbc <memmove>
 80138e6:	68a3      	ldr	r3, [r4, #8]
 80138e8:	1b9b      	subs	r3, r3, r6
 80138ea:	60a3      	str	r3, [r4, #8]
 80138ec:	6823      	ldr	r3, [r4, #0]
 80138ee:	441e      	add	r6, r3
 80138f0:	6026      	str	r6, [r4, #0]
 80138f2:	2000      	movs	r0, #0
 80138f4:	e7dc      	b.n	80138b0 <__ssputs_r+0x58>
 80138f6:	462a      	mov	r2, r5
 80138f8:	f7ff ff88 	bl	801380c <_realloc_r>
 80138fc:	4606      	mov	r6, r0
 80138fe:	2800      	cmp	r0, #0
 8013900:	d1e2      	bne.n	80138c8 <__ssputs_r+0x70>
 8013902:	6921      	ldr	r1, [r4, #16]
 8013904:	4650      	mov	r0, sl
 8013906:	f001 f9f5 	bl	8014cf4 <_free_r>
 801390a:	e7c8      	b.n	801389e <__ssputs_r+0x46>

0801390c <_svfiprintf_r>:
 801390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013910:	461d      	mov	r5, r3
 8013912:	898b      	ldrh	r3, [r1, #12]
 8013914:	061f      	lsls	r7, r3, #24
 8013916:	b09d      	sub	sp, #116	; 0x74
 8013918:	4680      	mov	r8, r0
 801391a:	460c      	mov	r4, r1
 801391c:	4616      	mov	r6, r2
 801391e:	d50f      	bpl.n	8013940 <_svfiprintf_r+0x34>
 8013920:	690b      	ldr	r3, [r1, #16]
 8013922:	b96b      	cbnz	r3, 8013940 <_svfiprintf_r+0x34>
 8013924:	2140      	movs	r1, #64	; 0x40
 8013926:	f7ff ff17 	bl	8013758 <_malloc_r>
 801392a:	6020      	str	r0, [r4, #0]
 801392c:	6120      	str	r0, [r4, #16]
 801392e:	b928      	cbnz	r0, 801393c <_svfiprintf_r+0x30>
 8013930:	230c      	movs	r3, #12
 8013932:	f8c8 3000 	str.w	r3, [r8]
 8013936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801393a:	e0c8      	b.n	8013ace <_svfiprintf_r+0x1c2>
 801393c:	2340      	movs	r3, #64	; 0x40
 801393e:	6163      	str	r3, [r4, #20]
 8013940:	2300      	movs	r3, #0
 8013942:	9309      	str	r3, [sp, #36]	; 0x24
 8013944:	2320      	movs	r3, #32
 8013946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801394a:	2330      	movs	r3, #48	; 0x30
 801394c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013950:	9503      	str	r5, [sp, #12]
 8013952:	f04f 0b01 	mov.w	fp, #1
 8013956:	4637      	mov	r7, r6
 8013958:	463d      	mov	r5, r7
 801395a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801395e:	b10b      	cbz	r3, 8013964 <_svfiprintf_r+0x58>
 8013960:	2b25      	cmp	r3, #37	; 0x25
 8013962:	d13e      	bne.n	80139e2 <_svfiprintf_r+0xd6>
 8013964:	ebb7 0a06 	subs.w	sl, r7, r6
 8013968:	d00b      	beq.n	8013982 <_svfiprintf_r+0x76>
 801396a:	4653      	mov	r3, sl
 801396c:	4632      	mov	r2, r6
 801396e:	4621      	mov	r1, r4
 8013970:	4640      	mov	r0, r8
 8013972:	f7ff ff71 	bl	8013858 <__ssputs_r>
 8013976:	3001      	adds	r0, #1
 8013978:	f000 80a4 	beq.w	8013ac4 <_svfiprintf_r+0x1b8>
 801397c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801397e:	4453      	add	r3, sl
 8013980:	9309      	str	r3, [sp, #36]	; 0x24
 8013982:	783b      	ldrb	r3, [r7, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	f000 809d 	beq.w	8013ac4 <_svfiprintf_r+0x1b8>
 801398a:	2300      	movs	r3, #0
 801398c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013994:	9304      	str	r3, [sp, #16]
 8013996:	9307      	str	r3, [sp, #28]
 8013998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801399c:	931a      	str	r3, [sp, #104]	; 0x68
 801399e:	462f      	mov	r7, r5
 80139a0:	2205      	movs	r2, #5
 80139a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80139a6:	4850      	ldr	r0, [pc, #320]	; (8013ae8 <_svfiprintf_r+0x1dc>)
 80139a8:	f7ec fc2a 	bl	8000200 <memchr>
 80139ac:	9b04      	ldr	r3, [sp, #16]
 80139ae:	b9d0      	cbnz	r0, 80139e6 <_svfiprintf_r+0xda>
 80139b0:	06d9      	lsls	r1, r3, #27
 80139b2:	bf44      	itt	mi
 80139b4:	2220      	movmi	r2, #32
 80139b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80139ba:	071a      	lsls	r2, r3, #28
 80139bc:	bf44      	itt	mi
 80139be:	222b      	movmi	r2, #43	; 0x2b
 80139c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80139c4:	782a      	ldrb	r2, [r5, #0]
 80139c6:	2a2a      	cmp	r2, #42	; 0x2a
 80139c8:	d015      	beq.n	80139f6 <_svfiprintf_r+0xea>
 80139ca:	9a07      	ldr	r2, [sp, #28]
 80139cc:	462f      	mov	r7, r5
 80139ce:	2000      	movs	r0, #0
 80139d0:	250a      	movs	r5, #10
 80139d2:	4639      	mov	r1, r7
 80139d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139d8:	3b30      	subs	r3, #48	; 0x30
 80139da:	2b09      	cmp	r3, #9
 80139dc:	d94d      	bls.n	8013a7a <_svfiprintf_r+0x16e>
 80139de:	b1b8      	cbz	r0, 8013a10 <_svfiprintf_r+0x104>
 80139e0:	e00f      	b.n	8013a02 <_svfiprintf_r+0xf6>
 80139e2:	462f      	mov	r7, r5
 80139e4:	e7b8      	b.n	8013958 <_svfiprintf_r+0x4c>
 80139e6:	4a40      	ldr	r2, [pc, #256]	; (8013ae8 <_svfiprintf_r+0x1dc>)
 80139e8:	1a80      	subs	r0, r0, r2
 80139ea:	fa0b f000 	lsl.w	r0, fp, r0
 80139ee:	4318      	orrs	r0, r3
 80139f0:	9004      	str	r0, [sp, #16]
 80139f2:	463d      	mov	r5, r7
 80139f4:	e7d3      	b.n	801399e <_svfiprintf_r+0x92>
 80139f6:	9a03      	ldr	r2, [sp, #12]
 80139f8:	1d11      	adds	r1, r2, #4
 80139fa:	6812      	ldr	r2, [r2, #0]
 80139fc:	9103      	str	r1, [sp, #12]
 80139fe:	2a00      	cmp	r2, #0
 8013a00:	db01      	blt.n	8013a06 <_svfiprintf_r+0xfa>
 8013a02:	9207      	str	r2, [sp, #28]
 8013a04:	e004      	b.n	8013a10 <_svfiprintf_r+0x104>
 8013a06:	4252      	negs	r2, r2
 8013a08:	f043 0302 	orr.w	r3, r3, #2
 8013a0c:	9207      	str	r2, [sp, #28]
 8013a0e:	9304      	str	r3, [sp, #16]
 8013a10:	783b      	ldrb	r3, [r7, #0]
 8013a12:	2b2e      	cmp	r3, #46	; 0x2e
 8013a14:	d10c      	bne.n	8013a30 <_svfiprintf_r+0x124>
 8013a16:	787b      	ldrb	r3, [r7, #1]
 8013a18:	2b2a      	cmp	r3, #42	; 0x2a
 8013a1a:	d133      	bne.n	8013a84 <_svfiprintf_r+0x178>
 8013a1c:	9b03      	ldr	r3, [sp, #12]
 8013a1e:	1d1a      	adds	r2, r3, #4
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	9203      	str	r2, [sp, #12]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	bfb8      	it	lt
 8013a28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013a2c:	3702      	adds	r7, #2
 8013a2e:	9305      	str	r3, [sp, #20]
 8013a30:	4d2e      	ldr	r5, [pc, #184]	; (8013aec <_svfiprintf_r+0x1e0>)
 8013a32:	7839      	ldrb	r1, [r7, #0]
 8013a34:	2203      	movs	r2, #3
 8013a36:	4628      	mov	r0, r5
 8013a38:	f7ec fbe2 	bl	8000200 <memchr>
 8013a3c:	b138      	cbz	r0, 8013a4e <_svfiprintf_r+0x142>
 8013a3e:	2340      	movs	r3, #64	; 0x40
 8013a40:	1b40      	subs	r0, r0, r5
 8013a42:	fa03 f000 	lsl.w	r0, r3, r0
 8013a46:	9b04      	ldr	r3, [sp, #16]
 8013a48:	4303      	orrs	r3, r0
 8013a4a:	3701      	adds	r7, #1
 8013a4c:	9304      	str	r3, [sp, #16]
 8013a4e:	7839      	ldrb	r1, [r7, #0]
 8013a50:	4827      	ldr	r0, [pc, #156]	; (8013af0 <_svfiprintf_r+0x1e4>)
 8013a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a56:	2206      	movs	r2, #6
 8013a58:	1c7e      	adds	r6, r7, #1
 8013a5a:	f7ec fbd1 	bl	8000200 <memchr>
 8013a5e:	2800      	cmp	r0, #0
 8013a60:	d038      	beq.n	8013ad4 <_svfiprintf_r+0x1c8>
 8013a62:	4b24      	ldr	r3, [pc, #144]	; (8013af4 <_svfiprintf_r+0x1e8>)
 8013a64:	bb13      	cbnz	r3, 8013aac <_svfiprintf_r+0x1a0>
 8013a66:	9b03      	ldr	r3, [sp, #12]
 8013a68:	3307      	adds	r3, #7
 8013a6a:	f023 0307 	bic.w	r3, r3, #7
 8013a6e:	3308      	adds	r3, #8
 8013a70:	9303      	str	r3, [sp, #12]
 8013a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a74:	444b      	add	r3, r9
 8013a76:	9309      	str	r3, [sp, #36]	; 0x24
 8013a78:	e76d      	b.n	8013956 <_svfiprintf_r+0x4a>
 8013a7a:	fb05 3202 	mla	r2, r5, r2, r3
 8013a7e:	2001      	movs	r0, #1
 8013a80:	460f      	mov	r7, r1
 8013a82:	e7a6      	b.n	80139d2 <_svfiprintf_r+0xc6>
 8013a84:	2300      	movs	r3, #0
 8013a86:	3701      	adds	r7, #1
 8013a88:	9305      	str	r3, [sp, #20]
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	250a      	movs	r5, #10
 8013a8e:	4638      	mov	r0, r7
 8013a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a94:	3a30      	subs	r2, #48	; 0x30
 8013a96:	2a09      	cmp	r2, #9
 8013a98:	d903      	bls.n	8013aa2 <_svfiprintf_r+0x196>
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d0c8      	beq.n	8013a30 <_svfiprintf_r+0x124>
 8013a9e:	9105      	str	r1, [sp, #20]
 8013aa0:	e7c6      	b.n	8013a30 <_svfiprintf_r+0x124>
 8013aa2:	fb05 2101 	mla	r1, r5, r1, r2
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	4607      	mov	r7, r0
 8013aaa:	e7f0      	b.n	8013a8e <_svfiprintf_r+0x182>
 8013aac:	ab03      	add	r3, sp, #12
 8013aae:	9300      	str	r3, [sp, #0]
 8013ab0:	4622      	mov	r2, r4
 8013ab2:	4b11      	ldr	r3, [pc, #68]	; (8013af8 <_svfiprintf_r+0x1ec>)
 8013ab4:	a904      	add	r1, sp, #16
 8013ab6:	4640      	mov	r0, r8
 8013ab8:	f3af 8000 	nop.w
 8013abc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013ac0:	4681      	mov	r9, r0
 8013ac2:	d1d6      	bne.n	8013a72 <_svfiprintf_r+0x166>
 8013ac4:	89a3      	ldrh	r3, [r4, #12]
 8013ac6:	065b      	lsls	r3, r3, #25
 8013ac8:	f53f af35 	bmi.w	8013936 <_svfiprintf_r+0x2a>
 8013acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ace:	b01d      	add	sp, #116	; 0x74
 8013ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ad4:	ab03      	add	r3, sp, #12
 8013ad6:	9300      	str	r3, [sp, #0]
 8013ad8:	4622      	mov	r2, r4
 8013ada:	4b07      	ldr	r3, [pc, #28]	; (8013af8 <_svfiprintf_r+0x1ec>)
 8013adc:	a904      	add	r1, sp, #16
 8013ade:	4640      	mov	r0, r8
 8013ae0:	f000 fb6c 	bl	80141bc <_printf_i>
 8013ae4:	e7ea      	b.n	8013abc <_svfiprintf_r+0x1b0>
 8013ae6:	bf00      	nop
 8013ae8:	0801537c 	.word	0x0801537c
 8013aec:	08015382 	.word	0x08015382
 8013af0:	08015386 	.word	0x08015386
 8013af4:	00000000 	.word	0x00000000
 8013af8:	08013859 	.word	0x08013859

08013afc <_sungetc_r>:
 8013afc:	b538      	push	{r3, r4, r5, lr}
 8013afe:	1c4b      	adds	r3, r1, #1
 8013b00:	4614      	mov	r4, r2
 8013b02:	d103      	bne.n	8013b0c <_sungetc_r+0x10>
 8013b04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013b08:	4628      	mov	r0, r5
 8013b0a:	bd38      	pop	{r3, r4, r5, pc}
 8013b0c:	8993      	ldrh	r3, [r2, #12]
 8013b0e:	f023 0320 	bic.w	r3, r3, #32
 8013b12:	8193      	strh	r3, [r2, #12]
 8013b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b16:	6852      	ldr	r2, [r2, #4]
 8013b18:	b2cd      	uxtb	r5, r1
 8013b1a:	b18b      	cbz	r3, 8013b40 <_sungetc_r+0x44>
 8013b1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013b1e:	4293      	cmp	r3, r2
 8013b20:	dd08      	ble.n	8013b34 <_sungetc_r+0x38>
 8013b22:	6823      	ldr	r3, [r4, #0]
 8013b24:	1e5a      	subs	r2, r3, #1
 8013b26:	6022      	str	r2, [r4, #0]
 8013b28:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013b2c:	6863      	ldr	r3, [r4, #4]
 8013b2e:	3301      	adds	r3, #1
 8013b30:	6063      	str	r3, [r4, #4]
 8013b32:	e7e9      	b.n	8013b08 <_sungetc_r+0xc>
 8013b34:	4621      	mov	r1, r4
 8013b36:	f000 fe9d 	bl	8014874 <__submore>
 8013b3a:	2800      	cmp	r0, #0
 8013b3c:	d0f1      	beq.n	8013b22 <_sungetc_r+0x26>
 8013b3e:	e7e1      	b.n	8013b04 <_sungetc_r+0x8>
 8013b40:	6921      	ldr	r1, [r4, #16]
 8013b42:	6823      	ldr	r3, [r4, #0]
 8013b44:	b151      	cbz	r1, 8013b5c <_sungetc_r+0x60>
 8013b46:	4299      	cmp	r1, r3
 8013b48:	d208      	bcs.n	8013b5c <_sungetc_r+0x60>
 8013b4a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013b4e:	42a9      	cmp	r1, r5
 8013b50:	d104      	bne.n	8013b5c <_sungetc_r+0x60>
 8013b52:	3b01      	subs	r3, #1
 8013b54:	3201      	adds	r2, #1
 8013b56:	6023      	str	r3, [r4, #0]
 8013b58:	6062      	str	r2, [r4, #4]
 8013b5a:	e7d5      	b.n	8013b08 <_sungetc_r+0xc>
 8013b5c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b64:	6363      	str	r3, [r4, #52]	; 0x34
 8013b66:	2303      	movs	r3, #3
 8013b68:	63a3      	str	r3, [r4, #56]	; 0x38
 8013b6a:	4623      	mov	r3, r4
 8013b6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013b70:	6023      	str	r3, [r4, #0]
 8013b72:	2301      	movs	r3, #1
 8013b74:	e7dc      	b.n	8013b30 <_sungetc_r+0x34>

08013b76 <__ssrefill_r>:
 8013b76:	b510      	push	{r4, lr}
 8013b78:	460c      	mov	r4, r1
 8013b7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013b7c:	b169      	cbz	r1, 8013b9a <__ssrefill_r+0x24>
 8013b7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b82:	4299      	cmp	r1, r3
 8013b84:	d001      	beq.n	8013b8a <__ssrefill_r+0x14>
 8013b86:	f001 f8b5 	bl	8014cf4 <_free_r>
 8013b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b8c:	6063      	str	r3, [r4, #4]
 8013b8e:	2000      	movs	r0, #0
 8013b90:	6360      	str	r0, [r4, #52]	; 0x34
 8013b92:	b113      	cbz	r3, 8013b9a <__ssrefill_r+0x24>
 8013b94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013b96:	6023      	str	r3, [r4, #0]
 8013b98:	bd10      	pop	{r4, pc}
 8013b9a:	6923      	ldr	r3, [r4, #16]
 8013b9c:	6023      	str	r3, [r4, #0]
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	6063      	str	r3, [r4, #4]
 8013ba2:	89a3      	ldrh	r3, [r4, #12]
 8013ba4:	f043 0320 	orr.w	r3, r3, #32
 8013ba8:	81a3      	strh	r3, [r4, #12]
 8013baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bae:	e7f3      	b.n	8013b98 <__ssrefill_r+0x22>

08013bb0 <__ssvfiscanf_r>:
 8013bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8013bb8:	460c      	mov	r4, r1
 8013bba:	2100      	movs	r1, #0
 8013bbc:	9144      	str	r1, [sp, #272]	; 0x110
 8013bbe:	9145      	str	r1, [sp, #276]	; 0x114
 8013bc0:	499f      	ldr	r1, [pc, #636]	; (8013e40 <__ssvfiscanf_r+0x290>)
 8013bc2:	91a0      	str	r1, [sp, #640]	; 0x280
 8013bc4:	f10d 0804 	add.w	r8, sp, #4
 8013bc8:	499e      	ldr	r1, [pc, #632]	; (8013e44 <__ssvfiscanf_r+0x294>)
 8013bca:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8013e48 <__ssvfiscanf_r+0x298>
 8013bce:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013bd2:	4606      	mov	r6, r0
 8013bd4:	4692      	mov	sl, r2
 8013bd6:	91a1      	str	r1, [sp, #644]	; 0x284
 8013bd8:	9300      	str	r3, [sp, #0]
 8013bda:	270a      	movs	r7, #10
 8013bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	f000 812a 	beq.w	8013e3a <__ssvfiscanf_r+0x28a>
 8013be6:	4655      	mov	r5, sl
 8013be8:	f7ff f974 	bl	8012ed4 <__locale_ctype_ptr>
 8013bec:	f815 bb01 	ldrb.w	fp, [r5], #1
 8013bf0:	4458      	add	r0, fp
 8013bf2:	7843      	ldrb	r3, [r0, #1]
 8013bf4:	f013 0308 	ands.w	r3, r3, #8
 8013bf8:	d01c      	beq.n	8013c34 <__ssvfiscanf_r+0x84>
 8013bfa:	6863      	ldr	r3, [r4, #4]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	dd12      	ble.n	8013c26 <__ssvfiscanf_r+0x76>
 8013c00:	f7ff f968 	bl	8012ed4 <__locale_ctype_ptr>
 8013c04:	6823      	ldr	r3, [r4, #0]
 8013c06:	781a      	ldrb	r2, [r3, #0]
 8013c08:	4410      	add	r0, r2
 8013c0a:	7842      	ldrb	r2, [r0, #1]
 8013c0c:	0712      	lsls	r2, r2, #28
 8013c0e:	d401      	bmi.n	8013c14 <__ssvfiscanf_r+0x64>
 8013c10:	46aa      	mov	sl, r5
 8013c12:	e7e3      	b.n	8013bdc <__ssvfiscanf_r+0x2c>
 8013c14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013c16:	3201      	adds	r2, #1
 8013c18:	9245      	str	r2, [sp, #276]	; 0x114
 8013c1a:	6862      	ldr	r2, [r4, #4]
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	3a01      	subs	r2, #1
 8013c20:	6062      	str	r2, [r4, #4]
 8013c22:	6023      	str	r3, [r4, #0]
 8013c24:	e7e9      	b.n	8013bfa <__ssvfiscanf_r+0x4a>
 8013c26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013c28:	4621      	mov	r1, r4
 8013c2a:	4630      	mov	r0, r6
 8013c2c:	4798      	blx	r3
 8013c2e:	2800      	cmp	r0, #0
 8013c30:	d0e6      	beq.n	8013c00 <__ssvfiscanf_r+0x50>
 8013c32:	e7ed      	b.n	8013c10 <__ssvfiscanf_r+0x60>
 8013c34:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8013c38:	f040 8082 	bne.w	8013d40 <__ssvfiscanf_r+0x190>
 8013c3c:	9343      	str	r3, [sp, #268]	; 0x10c
 8013c3e:	9341      	str	r3, [sp, #260]	; 0x104
 8013c40:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8013c44:	2b2a      	cmp	r3, #42	; 0x2a
 8013c46:	d103      	bne.n	8013c50 <__ssvfiscanf_r+0xa0>
 8013c48:	2310      	movs	r3, #16
 8013c4a:	9341      	str	r3, [sp, #260]	; 0x104
 8013c4c:	f10a 0502 	add.w	r5, sl, #2
 8013c50:	46aa      	mov	sl, r5
 8013c52:	f815 1b01 	ldrb.w	r1, [r5], #1
 8013c56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013c5a:	2a09      	cmp	r2, #9
 8013c5c:	d922      	bls.n	8013ca4 <__ssvfiscanf_r+0xf4>
 8013c5e:	2203      	movs	r2, #3
 8013c60:	4879      	ldr	r0, [pc, #484]	; (8013e48 <__ssvfiscanf_r+0x298>)
 8013c62:	f7ec facd 	bl	8000200 <memchr>
 8013c66:	b138      	cbz	r0, 8013c78 <__ssvfiscanf_r+0xc8>
 8013c68:	eba0 0309 	sub.w	r3, r0, r9
 8013c6c:	2001      	movs	r0, #1
 8013c6e:	4098      	lsls	r0, r3
 8013c70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013c72:	4318      	orrs	r0, r3
 8013c74:	9041      	str	r0, [sp, #260]	; 0x104
 8013c76:	46aa      	mov	sl, r5
 8013c78:	f89a 3000 	ldrb.w	r3, [sl]
 8013c7c:	2b67      	cmp	r3, #103	; 0x67
 8013c7e:	f10a 0501 	add.w	r5, sl, #1
 8013c82:	d82b      	bhi.n	8013cdc <__ssvfiscanf_r+0x12c>
 8013c84:	2b65      	cmp	r3, #101	; 0x65
 8013c86:	f080 809f 	bcs.w	8013dc8 <__ssvfiscanf_r+0x218>
 8013c8a:	2b47      	cmp	r3, #71	; 0x47
 8013c8c:	d810      	bhi.n	8013cb0 <__ssvfiscanf_r+0x100>
 8013c8e:	2b45      	cmp	r3, #69	; 0x45
 8013c90:	f080 809a 	bcs.w	8013dc8 <__ssvfiscanf_r+0x218>
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d06c      	beq.n	8013d72 <__ssvfiscanf_r+0x1c2>
 8013c98:	2b25      	cmp	r3, #37	; 0x25
 8013c9a:	d051      	beq.n	8013d40 <__ssvfiscanf_r+0x190>
 8013c9c:	2303      	movs	r3, #3
 8013c9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8013ca0:	9742      	str	r7, [sp, #264]	; 0x108
 8013ca2:	e027      	b.n	8013cf4 <__ssvfiscanf_r+0x144>
 8013ca4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013ca6:	fb07 1303 	mla	r3, r7, r3, r1
 8013caa:	3b30      	subs	r3, #48	; 0x30
 8013cac:	9343      	str	r3, [sp, #268]	; 0x10c
 8013cae:	e7cf      	b.n	8013c50 <__ssvfiscanf_r+0xa0>
 8013cb0:	2b5b      	cmp	r3, #91	; 0x5b
 8013cb2:	d06a      	beq.n	8013d8a <__ssvfiscanf_r+0x1da>
 8013cb4:	d80c      	bhi.n	8013cd0 <__ssvfiscanf_r+0x120>
 8013cb6:	2b58      	cmp	r3, #88	; 0x58
 8013cb8:	d1f0      	bne.n	8013c9c <__ssvfiscanf_r+0xec>
 8013cba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013cc0:	9241      	str	r2, [sp, #260]	; 0x104
 8013cc2:	2210      	movs	r2, #16
 8013cc4:	9242      	str	r2, [sp, #264]	; 0x108
 8013cc6:	2b6e      	cmp	r3, #110	; 0x6e
 8013cc8:	bf8c      	ite	hi
 8013cca:	2304      	movhi	r3, #4
 8013ccc:	2303      	movls	r3, #3
 8013cce:	e010      	b.n	8013cf2 <__ssvfiscanf_r+0x142>
 8013cd0:	2b63      	cmp	r3, #99	; 0x63
 8013cd2:	d065      	beq.n	8013da0 <__ssvfiscanf_r+0x1f0>
 8013cd4:	2b64      	cmp	r3, #100	; 0x64
 8013cd6:	d1e1      	bne.n	8013c9c <__ssvfiscanf_r+0xec>
 8013cd8:	9742      	str	r7, [sp, #264]	; 0x108
 8013cda:	e7f4      	b.n	8013cc6 <__ssvfiscanf_r+0x116>
 8013cdc:	2b70      	cmp	r3, #112	; 0x70
 8013cde:	d04b      	beq.n	8013d78 <__ssvfiscanf_r+0x1c8>
 8013ce0:	d826      	bhi.n	8013d30 <__ssvfiscanf_r+0x180>
 8013ce2:	2b6e      	cmp	r3, #110	; 0x6e
 8013ce4:	d062      	beq.n	8013dac <__ssvfiscanf_r+0x1fc>
 8013ce6:	d84c      	bhi.n	8013d82 <__ssvfiscanf_r+0x1d2>
 8013ce8:	2b69      	cmp	r3, #105	; 0x69
 8013cea:	d1d7      	bne.n	8013c9c <__ssvfiscanf_r+0xec>
 8013cec:	2300      	movs	r3, #0
 8013cee:	9342      	str	r3, [sp, #264]	; 0x108
 8013cf0:	2303      	movs	r3, #3
 8013cf2:	9347      	str	r3, [sp, #284]	; 0x11c
 8013cf4:	6863      	ldr	r3, [r4, #4]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	dd68      	ble.n	8013dcc <__ssvfiscanf_r+0x21c>
 8013cfa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013cfc:	0659      	lsls	r1, r3, #25
 8013cfe:	d407      	bmi.n	8013d10 <__ssvfiscanf_r+0x160>
 8013d00:	f7ff f8e8 	bl	8012ed4 <__locale_ctype_ptr>
 8013d04:	6823      	ldr	r3, [r4, #0]
 8013d06:	781a      	ldrb	r2, [r3, #0]
 8013d08:	4410      	add	r0, r2
 8013d0a:	7842      	ldrb	r2, [r0, #1]
 8013d0c:	0712      	lsls	r2, r2, #28
 8013d0e:	d464      	bmi.n	8013dda <__ssvfiscanf_r+0x22a>
 8013d10:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013d12:	2b02      	cmp	r3, #2
 8013d14:	dc73      	bgt.n	8013dfe <__ssvfiscanf_r+0x24e>
 8013d16:	466b      	mov	r3, sp
 8013d18:	4622      	mov	r2, r4
 8013d1a:	a941      	add	r1, sp, #260	; 0x104
 8013d1c:	4630      	mov	r0, r6
 8013d1e:	f000 fb5f 	bl	80143e0 <_scanf_chars>
 8013d22:	2801      	cmp	r0, #1
 8013d24:	f000 8089 	beq.w	8013e3a <__ssvfiscanf_r+0x28a>
 8013d28:	2802      	cmp	r0, #2
 8013d2a:	f47f af71 	bne.w	8013c10 <__ssvfiscanf_r+0x60>
 8013d2e:	e01d      	b.n	8013d6c <__ssvfiscanf_r+0x1bc>
 8013d30:	2b75      	cmp	r3, #117	; 0x75
 8013d32:	d0d1      	beq.n	8013cd8 <__ssvfiscanf_r+0x128>
 8013d34:	2b78      	cmp	r3, #120	; 0x78
 8013d36:	d0c0      	beq.n	8013cba <__ssvfiscanf_r+0x10a>
 8013d38:	2b73      	cmp	r3, #115	; 0x73
 8013d3a:	d1af      	bne.n	8013c9c <__ssvfiscanf_r+0xec>
 8013d3c:	2302      	movs	r3, #2
 8013d3e:	e7d8      	b.n	8013cf2 <__ssvfiscanf_r+0x142>
 8013d40:	6863      	ldr	r3, [r4, #4]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	dd0c      	ble.n	8013d60 <__ssvfiscanf_r+0x1b0>
 8013d46:	6823      	ldr	r3, [r4, #0]
 8013d48:	781a      	ldrb	r2, [r3, #0]
 8013d4a:	455a      	cmp	r2, fp
 8013d4c:	d175      	bne.n	8013e3a <__ssvfiscanf_r+0x28a>
 8013d4e:	3301      	adds	r3, #1
 8013d50:	6862      	ldr	r2, [r4, #4]
 8013d52:	6023      	str	r3, [r4, #0]
 8013d54:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013d56:	3a01      	subs	r2, #1
 8013d58:	3301      	adds	r3, #1
 8013d5a:	6062      	str	r2, [r4, #4]
 8013d5c:	9345      	str	r3, [sp, #276]	; 0x114
 8013d5e:	e757      	b.n	8013c10 <__ssvfiscanf_r+0x60>
 8013d60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013d62:	4621      	mov	r1, r4
 8013d64:	4630      	mov	r0, r6
 8013d66:	4798      	blx	r3
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	d0ec      	beq.n	8013d46 <__ssvfiscanf_r+0x196>
 8013d6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	d159      	bne.n	8013e26 <__ssvfiscanf_r+0x276>
 8013d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d76:	e05c      	b.n	8013e32 <__ssvfiscanf_r+0x282>
 8013d78:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013d7a:	f042 0220 	orr.w	r2, r2, #32
 8013d7e:	9241      	str	r2, [sp, #260]	; 0x104
 8013d80:	e79b      	b.n	8013cba <__ssvfiscanf_r+0x10a>
 8013d82:	2308      	movs	r3, #8
 8013d84:	9342      	str	r3, [sp, #264]	; 0x108
 8013d86:	2304      	movs	r3, #4
 8013d88:	e7b3      	b.n	8013cf2 <__ssvfiscanf_r+0x142>
 8013d8a:	4629      	mov	r1, r5
 8013d8c:	4640      	mov	r0, r8
 8013d8e:	f000 fca1 	bl	80146d4 <__sccl>
 8013d92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d98:	9341      	str	r3, [sp, #260]	; 0x104
 8013d9a:	4605      	mov	r5, r0
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	e7a8      	b.n	8013cf2 <__ssvfiscanf_r+0x142>
 8013da0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013da6:	9341      	str	r3, [sp, #260]	; 0x104
 8013da8:	2300      	movs	r3, #0
 8013daa:	e7a2      	b.n	8013cf2 <__ssvfiscanf_r+0x142>
 8013dac:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013dae:	06c3      	lsls	r3, r0, #27
 8013db0:	f53f af2e 	bmi.w	8013c10 <__ssvfiscanf_r+0x60>
 8013db4:	9b00      	ldr	r3, [sp, #0]
 8013db6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013db8:	1d19      	adds	r1, r3, #4
 8013dba:	9100      	str	r1, [sp, #0]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	07c0      	lsls	r0, r0, #31
 8013dc0:	bf4c      	ite	mi
 8013dc2:	801a      	strhmi	r2, [r3, #0]
 8013dc4:	601a      	strpl	r2, [r3, #0]
 8013dc6:	e723      	b.n	8013c10 <__ssvfiscanf_r+0x60>
 8013dc8:	2305      	movs	r3, #5
 8013dca:	e792      	b.n	8013cf2 <__ssvfiscanf_r+0x142>
 8013dcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013dce:	4621      	mov	r1, r4
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	4798      	blx	r3
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d090      	beq.n	8013cfa <__ssvfiscanf_r+0x14a>
 8013dd8:	e7c8      	b.n	8013d6c <__ssvfiscanf_r+0x1bc>
 8013dda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013ddc:	3201      	adds	r2, #1
 8013dde:	9245      	str	r2, [sp, #276]	; 0x114
 8013de0:	6862      	ldr	r2, [r4, #4]
 8013de2:	3a01      	subs	r2, #1
 8013de4:	2a00      	cmp	r2, #0
 8013de6:	6062      	str	r2, [r4, #4]
 8013de8:	dd02      	ble.n	8013df0 <__ssvfiscanf_r+0x240>
 8013dea:	3301      	adds	r3, #1
 8013dec:	6023      	str	r3, [r4, #0]
 8013dee:	e787      	b.n	8013d00 <__ssvfiscanf_r+0x150>
 8013df0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013df2:	4621      	mov	r1, r4
 8013df4:	4630      	mov	r0, r6
 8013df6:	4798      	blx	r3
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	d081      	beq.n	8013d00 <__ssvfiscanf_r+0x150>
 8013dfc:	e7b6      	b.n	8013d6c <__ssvfiscanf_r+0x1bc>
 8013dfe:	2b04      	cmp	r3, #4
 8013e00:	dc06      	bgt.n	8013e10 <__ssvfiscanf_r+0x260>
 8013e02:	466b      	mov	r3, sp
 8013e04:	4622      	mov	r2, r4
 8013e06:	a941      	add	r1, sp, #260	; 0x104
 8013e08:	4630      	mov	r0, r6
 8013e0a:	f000 fb4d 	bl	80144a8 <_scanf_i>
 8013e0e:	e788      	b.n	8013d22 <__ssvfiscanf_r+0x172>
 8013e10:	4b0e      	ldr	r3, [pc, #56]	; (8013e4c <__ssvfiscanf_r+0x29c>)
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	f43f aefc 	beq.w	8013c10 <__ssvfiscanf_r+0x60>
 8013e18:	466b      	mov	r3, sp
 8013e1a:	4622      	mov	r2, r4
 8013e1c:	a941      	add	r1, sp, #260	; 0x104
 8013e1e:	4630      	mov	r0, r6
 8013e20:	f7fd fada 	bl	80113d8 <_scanf_float>
 8013e24:	e77d      	b.n	8013d22 <__ssvfiscanf_r+0x172>
 8013e26:	89a3      	ldrh	r3, [r4, #12]
 8013e28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013e2c:	bf18      	it	ne
 8013e2e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8013e32:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8013e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e3a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013e3c:	e7f9      	b.n	8013e32 <__ssvfiscanf_r+0x282>
 8013e3e:	bf00      	nop
 8013e40:	08013afd 	.word	0x08013afd
 8013e44:	08013b77 	.word	0x08013b77
 8013e48:	08015382 	.word	0x08015382
 8013e4c:	080113d9 	.word	0x080113d9

08013e50 <__sfputc_r>:
 8013e50:	6893      	ldr	r3, [r2, #8]
 8013e52:	3b01      	subs	r3, #1
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	b410      	push	{r4}
 8013e58:	6093      	str	r3, [r2, #8]
 8013e5a:	da08      	bge.n	8013e6e <__sfputc_r+0x1e>
 8013e5c:	6994      	ldr	r4, [r2, #24]
 8013e5e:	42a3      	cmp	r3, r4
 8013e60:	db01      	blt.n	8013e66 <__sfputc_r+0x16>
 8013e62:	290a      	cmp	r1, #10
 8013e64:	d103      	bne.n	8013e6e <__sfputc_r+0x1e>
 8013e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e6a:	f000 bd3d 	b.w	80148e8 <__swbuf_r>
 8013e6e:	6813      	ldr	r3, [r2, #0]
 8013e70:	1c58      	adds	r0, r3, #1
 8013e72:	6010      	str	r0, [r2, #0]
 8013e74:	7019      	strb	r1, [r3, #0]
 8013e76:	4608      	mov	r0, r1
 8013e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e7c:	4770      	bx	lr

08013e7e <__sfputs_r>:
 8013e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e80:	4606      	mov	r6, r0
 8013e82:	460f      	mov	r7, r1
 8013e84:	4614      	mov	r4, r2
 8013e86:	18d5      	adds	r5, r2, r3
 8013e88:	42ac      	cmp	r4, r5
 8013e8a:	d101      	bne.n	8013e90 <__sfputs_r+0x12>
 8013e8c:	2000      	movs	r0, #0
 8013e8e:	e007      	b.n	8013ea0 <__sfputs_r+0x22>
 8013e90:	463a      	mov	r2, r7
 8013e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e96:	4630      	mov	r0, r6
 8013e98:	f7ff ffda 	bl	8013e50 <__sfputc_r>
 8013e9c:	1c43      	adds	r3, r0, #1
 8013e9e:	d1f3      	bne.n	8013e88 <__sfputs_r+0xa>
 8013ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ea4 <_vfiprintf_r>:
 8013ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ea8:	460c      	mov	r4, r1
 8013eaa:	b09d      	sub	sp, #116	; 0x74
 8013eac:	4617      	mov	r7, r2
 8013eae:	461d      	mov	r5, r3
 8013eb0:	4606      	mov	r6, r0
 8013eb2:	b118      	cbz	r0, 8013ebc <_vfiprintf_r+0x18>
 8013eb4:	6983      	ldr	r3, [r0, #24]
 8013eb6:	b90b      	cbnz	r3, 8013ebc <_vfiprintf_r+0x18>
 8013eb8:	f7fe fc58 	bl	801276c <__sinit>
 8013ebc:	4b7c      	ldr	r3, [pc, #496]	; (80140b0 <_vfiprintf_r+0x20c>)
 8013ebe:	429c      	cmp	r4, r3
 8013ec0:	d158      	bne.n	8013f74 <_vfiprintf_r+0xd0>
 8013ec2:	6874      	ldr	r4, [r6, #4]
 8013ec4:	89a3      	ldrh	r3, [r4, #12]
 8013ec6:	0718      	lsls	r0, r3, #28
 8013ec8:	d55e      	bpl.n	8013f88 <_vfiprintf_r+0xe4>
 8013eca:	6923      	ldr	r3, [r4, #16]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d05b      	beq.n	8013f88 <_vfiprintf_r+0xe4>
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8013ed4:	2320      	movs	r3, #32
 8013ed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013eda:	2330      	movs	r3, #48	; 0x30
 8013edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ee0:	9503      	str	r5, [sp, #12]
 8013ee2:	f04f 0b01 	mov.w	fp, #1
 8013ee6:	46b8      	mov	r8, r7
 8013ee8:	4645      	mov	r5, r8
 8013eea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013eee:	b10b      	cbz	r3, 8013ef4 <_vfiprintf_r+0x50>
 8013ef0:	2b25      	cmp	r3, #37	; 0x25
 8013ef2:	d154      	bne.n	8013f9e <_vfiprintf_r+0xfa>
 8013ef4:	ebb8 0a07 	subs.w	sl, r8, r7
 8013ef8:	d00b      	beq.n	8013f12 <_vfiprintf_r+0x6e>
 8013efa:	4653      	mov	r3, sl
 8013efc:	463a      	mov	r2, r7
 8013efe:	4621      	mov	r1, r4
 8013f00:	4630      	mov	r0, r6
 8013f02:	f7ff ffbc 	bl	8013e7e <__sfputs_r>
 8013f06:	3001      	adds	r0, #1
 8013f08:	f000 80c2 	beq.w	8014090 <_vfiprintf_r+0x1ec>
 8013f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f0e:	4453      	add	r3, sl
 8013f10:	9309      	str	r3, [sp, #36]	; 0x24
 8013f12:	f898 3000 	ldrb.w	r3, [r8]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	f000 80ba 	beq.w	8014090 <_vfiprintf_r+0x1ec>
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f26:	9304      	str	r3, [sp, #16]
 8013f28:	9307      	str	r3, [sp, #28]
 8013f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8013f30:	46a8      	mov	r8, r5
 8013f32:	2205      	movs	r2, #5
 8013f34:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013f38:	485e      	ldr	r0, [pc, #376]	; (80140b4 <_vfiprintf_r+0x210>)
 8013f3a:	f7ec f961 	bl	8000200 <memchr>
 8013f3e:	9b04      	ldr	r3, [sp, #16]
 8013f40:	bb78      	cbnz	r0, 8013fa2 <_vfiprintf_r+0xfe>
 8013f42:	06d9      	lsls	r1, r3, #27
 8013f44:	bf44      	itt	mi
 8013f46:	2220      	movmi	r2, #32
 8013f48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013f4c:	071a      	lsls	r2, r3, #28
 8013f4e:	bf44      	itt	mi
 8013f50:	222b      	movmi	r2, #43	; 0x2b
 8013f52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013f56:	782a      	ldrb	r2, [r5, #0]
 8013f58:	2a2a      	cmp	r2, #42	; 0x2a
 8013f5a:	d02a      	beq.n	8013fb2 <_vfiprintf_r+0x10e>
 8013f5c:	9a07      	ldr	r2, [sp, #28]
 8013f5e:	46a8      	mov	r8, r5
 8013f60:	2000      	movs	r0, #0
 8013f62:	250a      	movs	r5, #10
 8013f64:	4641      	mov	r1, r8
 8013f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f6a:	3b30      	subs	r3, #48	; 0x30
 8013f6c:	2b09      	cmp	r3, #9
 8013f6e:	d969      	bls.n	8014044 <_vfiprintf_r+0x1a0>
 8013f70:	b360      	cbz	r0, 8013fcc <_vfiprintf_r+0x128>
 8013f72:	e024      	b.n	8013fbe <_vfiprintf_r+0x11a>
 8013f74:	4b50      	ldr	r3, [pc, #320]	; (80140b8 <_vfiprintf_r+0x214>)
 8013f76:	429c      	cmp	r4, r3
 8013f78:	d101      	bne.n	8013f7e <_vfiprintf_r+0xda>
 8013f7a:	68b4      	ldr	r4, [r6, #8]
 8013f7c:	e7a2      	b.n	8013ec4 <_vfiprintf_r+0x20>
 8013f7e:	4b4f      	ldr	r3, [pc, #316]	; (80140bc <_vfiprintf_r+0x218>)
 8013f80:	429c      	cmp	r4, r3
 8013f82:	bf08      	it	eq
 8013f84:	68f4      	ldreq	r4, [r6, #12]
 8013f86:	e79d      	b.n	8013ec4 <_vfiprintf_r+0x20>
 8013f88:	4621      	mov	r1, r4
 8013f8a:	4630      	mov	r0, r6
 8013f8c:	f000 fd0c 	bl	80149a8 <__swsetup_r>
 8013f90:	2800      	cmp	r0, #0
 8013f92:	d09d      	beq.n	8013ed0 <_vfiprintf_r+0x2c>
 8013f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f98:	b01d      	add	sp, #116	; 0x74
 8013f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f9e:	46a8      	mov	r8, r5
 8013fa0:	e7a2      	b.n	8013ee8 <_vfiprintf_r+0x44>
 8013fa2:	4a44      	ldr	r2, [pc, #272]	; (80140b4 <_vfiprintf_r+0x210>)
 8013fa4:	1a80      	subs	r0, r0, r2
 8013fa6:	fa0b f000 	lsl.w	r0, fp, r0
 8013faa:	4318      	orrs	r0, r3
 8013fac:	9004      	str	r0, [sp, #16]
 8013fae:	4645      	mov	r5, r8
 8013fb0:	e7be      	b.n	8013f30 <_vfiprintf_r+0x8c>
 8013fb2:	9a03      	ldr	r2, [sp, #12]
 8013fb4:	1d11      	adds	r1, r2, #4
 8013fb6:	6812      	ldr	r2, [r2, #0]
 8013fb8:	9103      	str	r1, [sp, #12]
 8013fba:	2a00      	cmp	r2, #0
 8013fbc:	db01      	blt.n	8013fc2 <_vfiprintf_r+0x11e>
 8013fbe:	9207      	str	r2, [sp, #28]
 8013fc0:	e004      	b.n	8013fcc <_vfiprintf_r+0x128>
 8013fc2:	4252      	negs	r2, r2
 8013fc4:	f043 0302 	orr.w	r3, r3, #2
 8013fc8:	9207      	str	r2, [sp, #28]
 8013fca:	9304      	str	r3, [sp, #16]
 8013fcc:	f898 3000 	ldrb.w	r3, [r8]
 8013fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8013fd2:	d10e      	bne.n	8013ff2 <_vfiprintf_r+0x14e>
 8013fd4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8013fda:	d138      	bne.n	801404e <_vfiprintf_r+0x1aa>
 8013fdc:	9b03      	ldr	r3, [sp, #12]
 8013fde:	1d1a      	adds	r2, r3, #4
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	9203      	str	r2, [sp, #12]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	bfb8      	it	lt
 8013fe8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013fec:	f108 0802 	add.w	r8, r8, #2
 8013ff0:	9305      	str	r3, [sp, #20]
 8013ff2:	4d33      	ldr	r5, [pc, #204]	; (80140c0 <_vfiprintf_r+0x21c>)
 8013ff4:	f898 1000 	ldrb.w	r1, [r8]
 8013ff8:	2203      	movs	r2, #3
 8013ffa:	4628      	mov	r0, r5
 8013ffc:	f7ec f900 	bl	8000200 <memchr>
 8014000:	b140      	cbz	r0, 8014014 <_vfiprintf_r+0x170>
 8014002:	2340      	movs	r3, #64	; 0x40
 8014004:	1b40      	subs	r0, r0, r5
 8014006:	fa03 f000 	lsl.w	r0, r3, r0
 801400a:	9b04      	ldr	r3, [sp, #16]
 801400c:	4303      	orrs	r3, r0
 801400e:	f108 0801 	add.w	r8, r8, #1
 8014012:	9304      	str	r3, [sp, #16]
 8014014:	f898 1000 	ldrb.w	r1, [r8]
 8014018:	482a      	ldr	r0, [pc, #168]	; (80140c4 <_vfiprintf_r+0x220>)
 801401a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801401e:	2206      	movs	r2, #6
 8014020:	f108 0701 	add.w	r7, r8, #1
 8014024:	f7ec f8ec 	bl	8000200 <memchr>
 8014028:	2800      	cmp	r0, #0
 801402a:	d037      	beq.n	801409c <_vfiprintf_r+0x1f8>
 801402c:	4b26      	ldr	r3, [pc, #152]	; (80140c8 <_vfiprintf_r+0x224>)
 801402e:	bb1b      	cbnz	r3, 8014078 <_vfiprintf_r+0x1d4>
 8014030:	9b03      	ldr	r3, [sp, #12]
 8014032:	3307      	adds	r3, #7
 8014034:	f023 0307 	bic.w	r3, r3, #7
 8014038:	3308      	adds	r3, #8
 801403a:	9303      	str	r3, [sp, #12]
 801403c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801403e:	444b      	add	r3, r9
 8014040:	9309      	str	r3, [sp, #36]	; 0x24
 8014042:	e750      	b.n	8013ee6 <_vfiprintf_r+0x42>
 8014044:	fb05 3202 	mla	r2, r5, r2, r3
 8014048:	2001      	movs	r0, #1
 801404a:	4688      	mov	r8, r1
 801404c:	e78a      	b.n	8013f64 <_vfiprintf_r+0xc0>
 801404e:	2300      	movs	r3, #0
 8014050:	f108 0801 	add.w	r8, r8, #1
 8014054:	9305      	str	r3, [sp, #20]
 8014056:	4619      	mov	r1, r3
 8014058:	250a      	movs	r5, #10
 801405a:	4640      	mov	r0, r8
 801405c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014060:	3a30      	subs	r2, #48	; 0x30
 8014062:	2a09      	cmp	r2, #9
 8014064:	d903      	bls.n	801406e <_vfiprintf_r+0x1ca>
 8014066:	2b00      	cmp	r3, #0
 8014068:	d0c3      	beq.n	8013ff2 <_vfiprintf_r+0x14e>
 801406a:	9105      	str	r1, [sp, #20]
 801406c:	e7c1      	b.n	8013ff2 <_vfiprintf_r+0x14e>
 801406e:	fb05 2101 	mla	r1, r5, r1, r2
 8014072:	2301      	movs	r3, #1
 8014074:	4680      	mov	r8, r0
 8014076:	e7f0      	b.n	801405a <_vfiprintf_r+0x1b6>
 8014078:	ab03      	add	r3, sp, #12
 801407a:	9300      	str	r3, [sp, #0]
 801407c:	4622      	mov	r2, r4
 801407e:	4b13      	ldr	r3, [pc, #76]	; (80140cc <_vfiprintf_r+0x228>)
 8014080:	a904      	add	r1, sp, #16
 8014082:	4630      	mov	r0, r6
 8014084:	f3af 8000 	nop.w
 8014088:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801408c:	4681      	mov	r9, r0
 801408e:	d1d5      	bne.n	801403c <_vfiprintf_r+0x198>
 8014090:	89a3      	ldrh	r3, [r4, #12]
 8014092:	065b      	lsls	r3, r3, #25
 8014094:	f53f af7e 	bmi.w	8013f94 <_vfiprintf_r+0xf0>
 8014098:	9809      	ldr	r0, [sp, #36]	; 0x24
 801409a:	e77d      	b.n	8013f98 <_vfiprintf_r+0xf4>
 801409c:	ab03      	add	r3, sp, #12
 801409e:	9300      	str	r3, [sp, #0]
 80140a0:	4622      	mov	r2, r4
 80140a2:	4b0a      	ldr	r3, [pc, #40]	; (80140cc <_vfiprintf_r+0x228>)
 80140a4:	a904      	add	r1, sp, #16
 80140a6:	4630      	mov	r0, r6
 80140a8:	f000 f888 	bl	80141bc <_printf_i>
 80140ac:	e7ec      	b.n	8014088 <_vfiprintf_r+0x1e4>
 80140ae:	bf00      	nop
 80140b0:	08015230 	.word	0x08015230
 80140b4:	0801537c 	.word	0x0801537c
 80140b8:	08015250 	.word	0x08015250
 80140bc:	08015210 	.word	0x08015210
 80140c0:	08015382 	.word	0x08015382
 80140c4:	08015386 	.word	0x08015386
 80140c8:	00000000 	.word	0x00000000
 80140cc:	08013e7f 	.word	0x08013e7f

080140d0 <_printf_common>:
 80140d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140d4:	4691      	mov	r9, r2
 80140d6:	461f      	mov	r7, r3
 80140d8:	688a      	ldr	r2, [r1, #8]
 80140da:	690b      	ldr	r3, [r1, #16]
 80140dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80140e0:	4293      	cmp	r3, r2
 80140e2:	bfb8      	it	lt
 80140e4:	4613      	movlt	r3, r2
 80140e6:	f8c9 3000 	str.w	r3, [r9]
 80140ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80140ee:	4606      	mov	r6, r0
 80140f0:	460c      	mov	r4, r1
 80140f2:	b112      	cbz	r2, 80140fa <_printf_common+0x2a>
 80140f4:	3301      	adds	r3, #1
 80140f6:	f8c9 3000 	str.w	r3, [r9]
 80140fa:	6823      	ldr	r3, [r4, #0]
 80140fc:	0699      	lsls	r1, r3, #26
 80140fe:	bf42      	ittt	mi
 8014100:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014104:	3302      	addmi	r3, #2
 8014106:	f8c9 3000 	strmi.w	r3, [r9]
 801410a:	6825      	ldr	r5, [r4, #0]
 801410c:	f015 0506 	ands.w	r5, r5, #6
 8014110:	d107      	bne.n	8014122 <_printf_common+0x52>
 8014112:	f104 0a19 	add.w	sl, r4, #25
 8014116:	68e3      	ldr	r3, [r4, #12]
 8014118:	f8d9 2000 	ldr.w	r2, [r9]
 801411c:	1a9b      	subs	r3, r3, r2
 801411e:	42ab      	cmp	r3, r5
 8014120:	dc28      	bgt.n	8014174 <_printf_common+0xa4>
 8014122:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014126:	6822      	ldr	r2, [r4, #0]
 8014128:	3300      	adds	r3, #0
 801412a:	bf18      	it	ne
 801412c:	2301      	movne	r3, #1
 801412e:	0692      	lsls	r2, r2, #26
 8014130:	d42d      	bmi.n	801418e <_printf_common+0xbe>
 8014132:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014136:	4639      	mov	r1, r7
 8014138:	4630      	mov	r0, r6
 801413a:	47c0      	blx	r8
 801413c:	3001      	adds	r0, #1
 801413e:	d020      	beq.n	8014182 <_printf_common+0xb2>
 8014140:	6823      	ldr	r3, [r4, #0]
 8014142:	68e5      	ldr	r5, [r4, #12]
 8014144:	f8d9 2000 	ldr.w	r2, [r9]
 8014148:	f003 0306 	and.w	r3, r3, #6
 801414c:	2b04      	cmp	r3, #4
 801414e:	bf08      	it	eq
 8014150:	1aad      	subeq	r5, r5, r2
 8014152:	68a3      	ldr	r3, [r4, #8]
 8014154:	6922      	ldr	r2, [r4, #16]
 8014156:	bf0c      	ite	eq
 8014158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801415c:	2500      	movne	r5, #0
 801415e:	4293      	cmp	r3, r2
 8014160:	bfc4      	itt	gt
 8014162:	1a9b      	subgt	r3, r3, r2
 8014164:	18ed      	addgt	r5, r5, r3
 8014166:	f04f 0900 	mov.w	r9, #0
 801416a:	341a      	adds	r4, #26
 801416c:	454d      	cmp	r5, r9
 801416e:	d11a      	bne.n	80141a6 <_printf_common+0xd6>
 8014170:	2000      	movs	r0, #0
 8014172:	e008      	b.n	8014186 <_printf_common+0xb6>
 8014174:	2301      	movs	r3, #1
 8014176:	4652      	mov	r2, sl
 8014178:	4639      	mov	r1, r7
 801417a:	4630      	mov	r0, r6
 801417c:	47c0      	blx	r8
 801417e:	3001      	adds	r0, #1
 8014180:	d103      	bne.n	801418a <_printf_common+0xba>
 8014182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801418a:	3501      	adds	r5, #1
 801418c:	e7c3      	b.n	8014116 <_printf_common+0x46>
 801418e:	18e1      	adds	r1, r4, r3
 8014190:	1c5a      	adds	r2, r3, #1
 8014192:	2030      	movs	r0, #48	; 0x30
 8014194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014198:	4422      	add	r2, r4
 801419a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801419e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80141a2:	3302      	adds	r3, #2
 80141a4:	e7c5      	b.n	8014132 <_printf_common+0x62>
 80141a6:	2301      	movs	r3, #1
 80141a8:	4622      	mov	r2, r4
 80141aa:	4639      	mov	r1, r7
 80141ac:	4630      	mov	r0, r6
 80141ae:	47c0      	blx	r8
 80141b0:	3001      	adds	r0, #1
 80141b2:	d0e6      	beq.n	8014182 <_printf_common+0xb2>
 80141b4:	f109 0901 	add.w	r9, r9, #1
 80141b8:	e7d8      	b.n	801416c <_printf_common+0x9c>
	...

080141bc <_printf_i>:
 80141bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80141c4:	460c      	mov	r4, r1
 80141c6:	7e09      	ldrb	r1, [r1, #24]
 80141c8:	b085      	sub	sp, #20
 80141ca:	296e      	cmp	r1, #110	; 0x6e
 80141cc:	4617      	mov	r7, r2
 80141ce:	4606      	mov	r6, r0
 80141d0:	4698      	mov	r8, r3
 80141d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141d4:	f000 80b3 	beq.w	801433e <_printf_i+0x182>
 80141d8:	d822      	bhi.n	8014220 <_printf_i+0x64>
 80141da:	2963      	cmp	r1, #99	; 0x63
 80141dc:	d036      	beq.n	801424c <_printf_i+0x90>
 80141de:	d80a      	bhi.n	80141f6 <_printf_i+0x3a>
 80141e0:	2900      	cmp	r1, #0
 80141e2:	f000 80b9 	beq.w	8014358 <_printf_i+0x19c>
 80141e6:	2958      	cmp	r1, #88	; 0x58
 80141e8:	f000 8083 	beq.w	80142f2 <_printf_i+0x136>
 80141ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80141f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80141f4:	e032      	b.n	801425c <_printf_i+0xa0>
 80141f6:	2964      	cmp	r1, #100	; 0x64
 80141f8:	d001      	beq.n	80141fe <_printf_i+0x42>
 80141fa:	2969      	cmp	r1, #105	; 0x69
 80141fc:	d1f6      	bne.n	80141ec <_printf_i+0x30>
 80141fe:	6820      	ldr	r0, [r4, #0]
 8014200:	6813      	ldr	r3, [r2, #0]
 8014202:	0605      	lsls	r5, r0, #24
 8014204:	f103 0104 	add.w	r1, r3, #4
 8014208:	d52a      	bpl.n	8014260 <_printf_i+0xa4>
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	6011      	str	r1, [r2, #0]
 801420e:	2b00      	cmp	r3, #0
 8014210:	da03      	bge.n	801421a <_printf_i+0x5e>
 8014212:	222d      	movs	r2, #45	; 0x2d
 8014214:	425b      	negs	r3, r3
 8014216:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801421a:	486f      	ldr	r0, [pc, #444]	; (80143d8 <_printf_i+0x21c>)
 801421c:	220a      	movs	r2, #10
 801421e:	e039      	b.n	8014294 <_printf_i+0xd8>
 8014220:	2973      	cmp	r1, #115	; 0x73
 8014222:	f000 809d 	beq.w	8014360 <_printf_i+0x1a4>
 8014226:	d808      	bhi.n	801423a <_printf_i+0x7e>
 8014228:	296f      	cmp	r1, #111	; 0x6f
 801422a:	d020      	beq.n	801426e <_printf_i+0xb2>
 801422c:	2970      	cmp	r1, #112	; 0x70
 801422e:	d1dd      	bne.n	80141ec <_printf_i+0x30>
 8014230:	6823      	ldr	r3, [r4, #0]
 8014232:	f043 0320 	orr.w	r3, r3, #32
 8014236:	6023      	str	r3, [r4, #0]
 8014238:	e003      	b.n	8014242 <_printf_i+0x86>
 801423a:	2975      	cmp	r1, #117	; 0x75
 801423c:	d017      	beq.n	801426e <_printf_i+0xb2>
 801423e:	2978      	cmp	r1, #120	; 0x78
 8014240:	d1d4      	bne.n	80141ec <_printf_i+0x30>
 8014242:	2378      	movs	r3, #120	; 0x78
 8014244:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014248:	4864      	ldr	r0, [pc, #400]	; (80143dc <_printf_i+0x220>)
 801424a:	e055      	b.n	80142f8 <_printf_i+0x13c>
 801424c:	6813      	ldr	r3, [r2, #0]
 801424e:	1d19      	adds	r1, r3, #4
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	6011      	str	r1, [r2, #0]
 8014254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801425c:	2301      	movs	r3, #1
 801425e:	e08c      	b.n	801437a <_printf_i+0x1be>
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	6011      	str	r1, [r2, #0]
 8014264:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014268:	bf18      	it	ne
 801426a:	b21b      	sxthne	r3, r3
 801426c:	e7cf      	b.n	801420e <_printf_i+0x52>
 801426e:	6813      	ldr	r3, [r2, #0]
 8014270:	6825      	ldr	r5, [r4, #0]
 8014272:	1d18      	adds	r0, r3, #4
 8014274:	6010      	str	r0, [r2, #0]
 8014276:	0628      	lsls	r0, r5, #24
 8014278:	d501      	bpl.n	801427e <_printf_i+0xc2>
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	e002      	b.n	8014284 <_printf_i+0xc8>
 801427e:	0668      	lsls	r0, r5, #25
 8014280:	d5fb      	bpl.n	801427a <_printf_i+0xbe>
 8014282:	881b      	ldrh	r3, [r3, #0]
 8014284:	4854      	ldr	r0, [pc, #336]	; (80143d8 <_printf_i+0x21c>)
 8014286:	296f      	cmp	r1, #111	; 0x6f
 8014288:	bf14      	ite	ne
 801428a:	220a      	movne	r2, #10
 801428c:	2208      	moveq	r2, #8
 801428e:	2100      	movs	r1, #0
 8014290:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014294:	6865      	ldr	r5, [r4, #4]
 8014296:	60a5      	str	r5, [r4, #8]
 8014298:	2d00      	cmp	r5, #0
 801429a:	f2c0 8095 	blt.w	80143c8 <_printf_i+0x20c>
 801429e:	6821      	ldr	r1, [r4, #0]
 80142a0:	f021 0104 	bic.w	r1, r1, #4
 80142a4:	6021      	str	r1, [r4, #0]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d13d      	bne.n	8014326 <_printf_i+0x16a>
 80142aa:	2d00      	cmp	r5, #0
 80142ac:	f040 808e 	bne.w	80143cc <_printf_i+0x210>
 80142b0:	4665      	mov	r5, ip
 80142b2:	2a08      	cmp	r2, #8
 80142b4:	d10b      	bne.n	80142ce <_printf_i+0x112>
 80142b6:	6823      	ldr	r3, [r4, #0]
 80142b8:	07db      	lsls	r3, r3, #31
 80142ba:	d508      	bpl.n	80142ce <_printf_i+0x112>
 80142bc:	6923      	ldr	r3, [r4, #16]
 80142be:	6862      	ldr	r2, [r4, #4]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	bfde      	ittt	le
 80142c4:	2330      	movle	r3, #48	; 0x30
 80142c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80142ca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80142ce:	ebac 0305 	sub.w	r3, ip, r5
 80142d2:	6123      	str	r3, [r4, #16]
 80142d4:	f8cd 8000 	str.w	r8, [sp]
 80142d8:	463b      	mov	r3, r7
 80142da:	aa03      	add	r2, sp, #12
 80142dc:	4621      	mov	r1, r4
 80142de:	4630      	mov	r0, r6
 80142e0:	f7ff fef6 	bl	80140d0 <_printf_common>
 80142e4:	3001      	adds	r0, #1
 80142e6:	d14d      	bne.n	8014384 <_printf_i+0x1c8>
 80142e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142ec:	b005      	add	sp, #20
 80142ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142f2:	4839      	ldr	r0, [pc, #228]	; (80143d8 <_printf_i+0x21c>)
 80142f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80142f8:	6813      	ldr	r3, [r2, #0]
 80142fa:	6821      	ldr	r1, [r4, #0]
 80142fc:	1d1d      	adds	r5, r3, #4
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	6015      	str	r5, [r2, #0]
 8014302:	060a      	lsls	r2, r1, #24
 8014304:	d50b      	bpl.n	801431e <_printf_i+0x162>
 8014306:	07ca      	lsls	r2, r1, #31
 8014308:	bf44      	itt	mi
 801430a:	f041 0120 	orrmi.w	r1, r1, #32
 801430e:	6021      	strmi	r1, [r4, #0]
 8014310:	b91b      	cbnz	r3, 801431a <_printf_i+0x15e>
 8014312:	6822      	ldr	r2, [r4, #0]
 8014314:	f022 0220 	bic.w	r2, r2, #32
 8014318:	6022      	str	r2, [r4, #0]
 801431a:	2210      	movs	r2, #16
 801431c:	e7b7      	b.n	801428e <_printf_i+0xd2>
 801431e:	064d      	lsls	r5, r1, #25
 8014320:	bf48      	it	mi
 8014322:	b29b      	uxthmi	r3, r3
 8014324:	e7ef      	b.n	8014306 <_printf_i+0x14a>
 8014326:	4665      	mov	r5, ip
 8014328:	fbb3 f1f2 	udiv	r1, r3, r2
 801432c:	fb02 3311 	mls	r3, r2, r1, r3
 8014330:	5cc3      	ldrb	r3, [r0, r3]
 8014332:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014336:	460b      	mov	r3, r1
 8014338:	2900      	cmp	r1, #0
 801433a:	d1f5      	bne.n	8014328 <_printf_i+0x16c>
 801433c:	e7b9      	b.n	80142b2 <_printf_i+0xf6>
 801433e:	6813      	ldr	r3, [r2, #0]
 8014340:	6825      	ldr	r5, [r4, #0]
 8014342:	6961      	ldr	r1, [r4, #20]
 8014344:	1d18      	adds	r0, r3, #4
 8014346:	6010      	str	r0, [r2, #0]
 8014348:	0628      	lsls	r0, r5, #24
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	d501      	bpl.n	8014352 <_printf_i+0x196>
 801434e:	6019      	str	r1, [r3, #0]
 8014350:	e002      	b.n	8014358 <_printf_i+0x19c>
 8014352:	066a      	lsls	r2, r5, #25
 8014354:	d5fb      	bpl.n	801434e <_printf_i+0x192>
 8014356:	8019      	strh	r1, [r3, #0]
 8014358:	2300      	movs	r3, #0
 801435a:	6123      	str	r3, [r4, #16]
 801435c:	4665      	mov	r5, ip
 801435e:	e7b9      	b.n	80142d4 <_printf_i+0x118>
 8014360:	6813      	ldr	r3, [r2, #0]
 8014362:	1d19      	adds	r1, r3, #4
 8014364:	6011      	str	r1, [r2, #0]
 8014366:	681d      	ldr	r5, [r3, #0]
 8014368:	6862      	ldr	r2, [r4, #4]
 801436a:	2100      	movs	r1, #0
 801436c:	4628      	mov	r0, r5
 801436e:	f7eb ff47 	bl	8000200 <memchr>
 8014372:	b108      	cbz	r0, 8014378 <_printf_i+0x1bc>
 8014374:	1b40      	subs	r0, r0, r5
 8014376:	6060      	str	r0, [r4, #4]
 8014378:	6863      	ldr	r3, [r4, #4]
 801437a:	6123      	str	r3, [r4, #16]
 801437c:	2300      	movs	r3, #0
 801437e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014382:	e7a7      	b.n	80142d4 <_printf_i+0x118>
 8014384:	6923      	ldr	r3, [r4, #16]
 8014386:	462a      	mov	r2, r5
 8014388:	4639      	mov	r1, r7
 801438a:	4630      	mov	r0, r6
 801438c:	47c0      	blx	r8
 801438e:	3001      	adds	r0, #1
 8014390:	d0aa      	beq.n	80142e8 <_printf_i+0x12c>
 8014392:	6823      	ldr	r3, [r4, #0]
 8014394:	079b      	lsls	r3, r3, #30
 8014396:	d413      	bmi.n	80143c0 <_printf_i+0x204>
 8014398:	68e0      	ldr	r0, [r4, #12]
 801439a:	9b03      	ldr	r3, [sp, #12]
 801439c:	4298      	cmp	r0, r3
 801439e:	bfb8      	it	lt
 80143a0:	4618      	movlt	r0, r3
 80143a2:	e7a3      	b.n	80142ec <_printf_i+0x130>
 80143a4:	2301      	movs	r3, #1
 80143a6:	464a      	mov	r2, r9
 80143a8:	4639      	mov	r1, r7
 80143aa:	4630      	mov	r0, r6
 80143ac:	47c0      	blx	r8
 80143ae:	3001      	adds	r0, #1
 80143b0:	d09a      	beq.n	80142e8 <_printf_i+0x12c>
 80143b2:	3501      	adds	r5, #1
 80143b4:	68e3      	ldr	r3, [r4, #12]
 80143b6:	9a03      	ldr	r2, [sp, #12]
 80143b8:	1a9b      	subs	r3, r3, r2
 80143ba:	42ab      	cmp	r3, r5
 80143bc:	dcf2      	bgt.n	80143a4 <_printf_i+0x1e8>
 80143be:	e7eb      	b.n	8014398 <_printf_i+0x1dc>
 80143c0:	2500      	movs	r5, #0
 80143c2:	f104 0919 	add.w	r9, r4, #25
 80143c6:	e7f5      	b.n	80143b4 <_printf_i+0x1f8>
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d1ac      	bne.n	8014326 <_printf_i+0x16a>
 80143cc:	7803      	ldrb	r3, [r0, #0]
 80143ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80143d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143d6:	e76c      	b.n	80142b2 <_printf_i+0xf6>
 80143d8:	0801538d 	.word	0x0801538d
 80143dc:	0801539e 	.word	0x0801539e

080143e0 <_scanf_chars>:
 80143e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143e4:	4615      	mov	r5, r2
 80143e6:	688a      	ldr	r2, [r1, #8]
 80143e8:	4680      	mov	r8, r0
 80143ea:	460c      	mov	r4, r1
 80143ec:	b932      	cbnz	r2, 80143fc <_scanf_chars+0x1c>
 80143ee:	698a      	ldr	r2, [r1, #24]
 80143f0:	2a00      	cmp	r2, #0
 80143f2:	bf14      	ite	ne
 80143f4:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80143f8:	2201      	moveq	r2, #1
 80143fa:	608a      	str	r2, [r1, #8]
 80143fc:	6822      	ldr	r2, [r4, #0]
 80143fe:	06d1      	lsls	r1, r2, #27
 8014400:	bf5f      	itttt	pl
 8014402:	681a      	ldrpl	r2, [r3, #0]
 8014404:	1d11      	addpl	r1, r2, #4
 8014406:	6019      	strpl	r1, [r3, #0]
 8014408:	6817      	ldrpl	r7, [r2, #0]
 801440a:	2600      	movs	r6, #0
 801440c:	69a3      	ldr	r3, [r4, #24]
 801440e:	b1db      	cbz	r3, 8014448 <_scanf_chars+0x68>
 8014410:	2b01      	cmp	r3, #1
 8014412:	d107      	bne.n	8014424 <_scanf_chars+0x44>
 8014414:	682b      	ldr	r3, [r5, #0]
 8014416:	6962      	ldr	r2, [r4, #20]
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	5cd3      	ldrb	r3, [r2, r3]
 801441c:	b9a3      	cbnz	r3, 8014448 <_scanf_chars+0x68>
 801441e:	2e00      	cmp	r6, #0
 8014420:	d132      	bne.n	8014488 <_scanf_chars+0xa8>
 8014422:	e006      	b.n	8014432 <_scanf_chars+0x52>
 8014424:	2b02      	cmp	r3, #2
 8014426:	d007      	beq.n	8014438 <_scanf_chars+0x58>
 8014428:	2e00      	cmp	r6, #0
 801442a:	d12d      	bne.n	8014488 <_scanf_chars+0xa8>
 801442c:	69a3      	ldr	r3, [r4, #24]
 801442e:	2b01      	cmp	r3, #1
 8014430:	d12a      	bne.n	8014488 <_scanf_chars+0xa8>
 8014432:	2001      	movs	r0, #1
 8014434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014438:	f7fe fd4c 	bl	8012ed4 <__locale_ctype_ptr>
 801443c:	682b      	ldr	r3, [r5, #0]
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	4418      	add	r0, r3
 8014442:	7843      	ldrb	r3, [r0, #1]
 8014444:	071b      	lsls	r3, r3, #28
 8014446:	d4ef      	bmi.n	8014428 <_scanf_chars+0x48>
 8014448:	6823      	ldr	r3, [r4, #0]
 801444a:	06da      	lsls	r2, r3, #27
 801444c:	bf5e      	ittt	pl
 801444e:	682b      	ldrpl	r3, [r5, #0]
 8014450:	781b      	ldrbpl	r3, [r3, #0]
 8014452:	703b      	strbpl	r3, [r7, #0]
 8014454:	682a      	ldr	r2, [r5, #0]
 8014456:	686b      	ldr	r3, [r5, #4]
 8014458:	f102 0201 	add.w	r2, r2, #1
 801445c:	602a      	str	r2, [r5, #0]
 801445e:	68a2      	ldr	r2, [r4, #8]
 8014460:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8014464:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8014468:	606b      	str	r3, [r5, #4]
 801446a:	f106 0601 	add.w	r6, r6, #1
 801446e:	bf58      	it	pl
 8014470:	3701      	addpl	r7, #1
 8014472:	60a2      	str	r2, [r4, #8]
 8014474:	b142      	cbz	r2, 8014488 <_scanf_chars+0xa8>
 8014476:	2b00      	cmp	r3, #0
 8014478:	dcc8      	bgt.n	801440c <_scanf_chars+0x2c>
 801447a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801447e:	4629      	mov	r1, r5
 8014480:	4640      	mov	r0, r8
 8014482:	4798      	blx	r3
 8014484:	2800      	cmp	r0, #0
 8014486:	d0c1      	beq.n	801440c <_scanf_chars+0x2c>
 8014488:	6823      	ldr	r3, [r4, #0]
 801448a:	f013 0310 	ands.w	r3, r3, #16
 801448e:	d105      	bne.n	801449c <_scanf_chars+0xbc>
 8014490:	68e2      	ldr	r2, [r4, #12]
 8014492:	3201      	adds	r2, #1
 8014494:	60e2      	str	r2, [r4, #12]
 8014496:	69a2      	ldr	r2, [r4, #24]
 8014498:	b102      	cbz	r2, 801449c <_scanf_chars+0xbc>
 801449a:	703b      	strb	r3, [r7, #0]
 801449c:	6923      	ldr	r3, [r4, #16]
 801449e:	441e      	add	r6, r3
 80144a0:	6126      	str	r6, [r4, #16]
 80144a2:	2000      	movs	r0, #0
 80144a4:	e7c6      	b.n	8014434 <_scanf_chars+0x54>
	...

080144a8 <_scanf_i>:
 80144a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ac:	469a      	mov	sl, r3
 80144ae:	4b74      	ldr	r3, [pc, #464]	; (8014680 <_scanf_i+0x1d8>)
 80144b0:	460c      	mov	r4, r1
 80144b2:	4683      	mov	fp, r0
 80144b4:	4616      	mov	r6, r2
 80144b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80144ba:	b087      	sub	sp, #28
 80144bc:	ab03      	add	r3, sp, #12
 80144be:	68a7      	ldr	r7, [r4, #8]
 80144c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80144c4:	4b6f      	ldr	r3, [pc, #444]	; (8014684 <_scanf_i+0x1dc>)
 80144c6:	69a1      	ldr	r1, [r4, #24]
 80144c8:	4a6f      	ldr	r2, [pc, #444]	; (8014688 <_scanf_i+0x1e0>)
 80144ca:	2903      	cmp	r1, #3
 80144cc:	bf08      	it	eq
 80144ce:	461a      	moveq	r2, r3
 80144d0:	1e7b      	subs	r3, r7, #1
 80144d2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80144d6:	bf84      	itt	hi
 80144d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80144dc:	60a3      	strhi	r3, [r4, #8]
 80144de:	6823      	ldr	r3, [r4, #0]
 80144e0:	9200      	str	r2, [sp, #0]
 80144e2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80144e6:	bf88      	it	hi
 80144e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80144ec:	f104 091c 	add.w	r9, r4, #28
 80144f0:	6023      	str	r3, [r4, #0]
 80144f2:	bf8c      	ite	hi
 80144f4:	197f      	addhi	r7, r7, r5
 80144f6:	2700      	movls	r7, #0
 80144f8:	464b      	mov	r3, r9
 80144fa:	f04f 0800 	mov.w	r8, #0
 80144fe:	9301      	str	r3, [sp, #4]
 8014500:	6831      	ldr	r1, [r6, #0]
 8014502:	ab03      	add	r3, sp, #12
 8014504:	2202      	movs	r2, #2
 8014506:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801450a:	7809      	ldrb	r1, [r1, #0]
 801450c:	f7eb fe78 	bl	8000200 <memchr>
 8014510:	9b01      	ldr	r3, [sp, #4]
 8014512:	b330      	cbz	r0, 8014562 <_scanf_i+0xba>
 8014514:	f1b8 0f01 	cmp.w	r8, #1
 8014518:	d15a      	bne.n	80145d0 <_scanf_i+0x128>
 801451a:	6862      	ldr	r2, [r4, #4]
 801451c:	b92a      	cbnz	r2, 801452a <_scanf_i+0x82>
 801451e:	6822      	ldr	r2, [r4, #0]
 8014520:	2108      	movs	r1, #8
 8014522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014526:	6061      	str	r1, [r4, #4]
 8014528:	6022      	str	r2, [r4, #0]
 801452a:	6822      	ldr	r2, [r4, #0]
 801452c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014530:	6022      	str	r2, [r4, #0]
 8014532:	68a2      	ldr	r2, [r4, #8]
 8014534:	1e51      	subs	r1, r2, #1
 8014536:	60a1      	str	r1, [r4, #8]
 8014538:	b19a      	cbz	r2, 8014562 <_scanf_i+0xba>
 801453a:	6832      	ldr	r2, [r6, #0]
 801453c:	1c51      	adds	r1, r2, #1
 801453e:	6031      	str	r1, [r6, #0]
 8014540:	7812      	ldrb	r2, [r2, #0]
 8014542:	701a      	strb	r2, [r3, #0]
 8014544:	1c5d      	adds	r5, r3, #1
 8014546:	6873      	ldr	r3, [r6, #4]
 8014548:	3b01      	subs	r3, #1
 801454a:	2b00      	cmp	r3, #0
 801454c:	6073      	str	r3, [r6, #4]
 801454e:	dc07      	bgt.n	8014560 <_scanf_i+0xb8>
 8014550:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014554:	4631      	mov	r1, r6
 8014556:	4658      	mov	r0, fp
 8014558:	4798      	blx	r3
 801455a:	2800      	cmp	r0, #0
 801455c:	f040 8086 	bne.w	801466c <_scanf_i+0x1c4>
 8014560:	462b      	mov	r3, r5
 8014562:	f108 0801 	add.w	r8, r8, #1
 8014566:	f1b8 0f03 	cmp.w	r8, #3
 801456a:	d1c8      	bne.n	80144fe <_scanf_i+0x56>
 801456c:	6862      	ldr	r2, [r4, #4]
 801456e:	b90a      	cbnz	r2, 8014574 <_scanf_i+0xcc>
 8014570:	220a      	movs	r2, #10
 8014572:	6062      	str	r2, [r4, #4]
 8014574:	6862      	ldr	r2, [r4, #4]
 8014576:	4945      	ldr	r1, [pc, #276]	; (801468c <_scanf_i+0x1e4>)
 8014578:	6960      	ldr	r0, [r4, #20]
 801457a:	9301      	str	r3, [sp, #4]
 801457c:	1a89      	subs	r1, r1, r2
 801457e:	f000 f8a9 	bl	80146d4 <__sccl>
 8014582:	9b01      	ldr	r3, [sp, #4]
 8014584:	f04f 0800 	mov.w	r8, #0
 8014588:	461d      	mov	r5, r3
 801458a:	68a3      	ldr	r3, [r4, #8]
 801458c:	6822      	ldr	r2, [r4, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d03a      	beq.n	8014608 <_scanf_i+0x160>
 8014592:	6831      	ldr	r1, [r6, #0]
 8014594:	6960      	ldr	r0, [r4, #20]
 8014596:	f891 c000 	ldrb.w	ip, [r1]
 801459a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801459e:	2800      	cmp	r0, #0
 80145a0:	d032      	beq.n	8014608 <_scanf_i+0x160>
 80145a2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80145a6:	d121      	bne.n	80145ec <_scanf_i+0x144>
 80145a8:	0510      	lsls	r0, r2, #20
 80145aa:	d51f      	bpl.n	80145ec <_scanf_i+0x144>
 80145ac:	f108 0801 	add.w	r8, r8, #1
 80145b0:	b117      	cbz	r7, 80145b8 <_scanf_i+0x110>
 80145b2:	3301      	adds	r3, #1
 80145b4:	3f01      	subs	r7, #1
 80145b6:	60a3      	str	r3, [r4, #8]
 80145b8:	6873      	ldr	r3, [r6, #4]
 80145ba:	3b01      	subs	r3, #1
 80145bc:	2b00      	cmp	r3, #0
 80145be:	6073      	str	r3, [r6, #4]
 80145c0:	dd1b      	ble.n	80145fa <_scanf_i+0x152>
 80145c2:	6833      	ldr	r3, [r6, #0]
 80145c4:	3301      	adds	r3, #1
 80145c6:	6033      	str	r3, [r6, #0]
 80145c8:	68a3      	ldr	r3, [r4, #8]
 80145ca:	3b01      	subs	r3, #1
 80145cc:	60a3      	str	r3, [r4, #8]
 80145ce:	e7dc      	b.n	801458a <_scanf_i+0xe2>
 80145d0:	f1b8 0f02 	cmp.w	r8, #2
 80145d4:	d1ad      	bne.n	8014532 <_scanf_i+0x8a>
 80145d6:	6822      	ldr	r2, [r4, #0]
 80145d8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80145dc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80145e0:	d1bf      	bne.n	8014562 <_scanf_i+0xba>
 80145e2:	2110      	movs	r1, #16
 80145e4:	6061      	str	r1, [r4, #4]
 80145e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80145ea:	e7a1      	b.n	8014530 <_scanf_i+0x88>
 80145ec:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80145f0:	6022      	str	r2, [r4, #0]
 80145f2:	780b      	ldrb	r3, [r1, #0]
 80145f4:	702b      	strb	r3, [r5, #0]
 80145f6:	3501      	adds	r5, #1
 80145f8:	e7de      	b.n	80145b8 <_scanf_i+0x110>
 80145fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80145fe:	4631      	mov	r1, r6
 8014600:	4658      	mov	r0, fp
 8014602:	4798      	blx	r3
 8014604:	2800      	cmp	r0, #0
 8014606:	d0df      	beq.n	80145c8 <_scanf_i+0x120>
 8014608:	6823      	ldr	r3, [r4, #0]
 801460a:	05d9      	lsls	r1, r3, #23
 801460c:	d50c      	bpl.n	8014628 <_scanf_i+0x180>
 801460e:	454d      	cmp	r5, r9
 8014610:	d908      	bls.n	8014624 <_scanf_i+0x17c>
 8014612:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801461a:	4632      	mov	r2, r6
 801461c:	4658      	mov	r0, fp
 801461e:	4798      	blx	r3
 8014620:	1e6f      	subs	r7, r5, #1
 8014622:	463d      	mov	r5, r7
 8014624:	454d      	cmp	r5, r9
 8014626:	d029      	beq.n	801467c <_scanf_i+0x1d4>
 8014628:	6822      	ldr	r2, [r4, #0]
 801462a:	f012 0210 	ands.w	r2, r2, #16
 801462e:	d113      	bne.n	8014658 <_scanf_i+0x1b0>
 8014630:	702a      	strb	r2, [r5, #0]
 8014632:	6863      	ldr	r3, [r4, #4]
 8014634:	9e00      	ldr	r6, [sp, #0]
 8014636:	4649      	mov	r1, r9
 8014638:	4658      	mov	r0, fp
 801463a:	47b0      	blx	r6
 801463c:	f8da 3000 	ldr.w	r3, [sl]
 8014640:	6821      	ldr	r1, [r4, #0]
 8014642:	1d1a      	adds	r2, r3, #4
 8014644:	f8ca 2000 	str.w	r2, [sl]
 8014648:	f011 0f20 	tst.w	r1, #32
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	d010      	beq.n	8014672 <_scanf_i+0x1ca>
 8014650:	6018      	str	r0, [r3, #0]
 8014652:	68e3      	ldr	r3, [r4, #12]
 8014654:	3301      	adds	r3, #1
 8014656:	60e3      	str	r3, [r4, #12]
 8014658:	eba5 0509 	sub.w	r5, r5, r9
 801465c:	44a8      	add	r8, r5
 801465e:	6925      	ldr	r5, [r4, #16]
 8014660:	4445      	add	r5, r8
 8014662:	6125      	str	r5, [r4, #16]
 8014664:	2000      	movs	r0, #0
 8014666:	b007      	add	sp, #28
 8014668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801466c:	f04f 0800 	mov.w	r8, #0
 8014670:	e7ca      	b.n	8014608 <_scanf_i+0x160>
 8014672:	07ca      	lsls	r2, r1, #31
 8014674:	bf4c      	ite	mi
 8014676:	8018      	strhmi	r0, [r3, #0]
 8014678:	6018      	strpl	r0, [r3, #0]
 801467a:	e7ea      	b.n	8014652 <_scanf_i+0x1aa>
 801467c:	2001      	movs	r0, #1
 801467e:	e7f2      	b.n	8014666 <_scanf_i+0x1be>
 8014680:	080150d0 	.word	0x080150d0
 8014684:	08012659 	.word	0x08012659
 8014688:	08014851 	.word	0x08014851
 801468c:	080153bf 	.word	0x080153bf

08014690 <_read_r>:
 8014690:	b538      	push	{r3, r4, r5, lr}
 8014692:	4c07      	ldr	r4, [pc, #28]	; (80146b0 <_read_r+0x20>)
 8014694:	4605      	mov	r5, r0
 8014696:	4608      	mov	r0, r1
 8014698:	4611      	mov	r1, r2
 801469a:	2200      	movs	r2, #0
 801469c:	6022      	str	r2, [r4, #0]
 801469e:	461a      	mov	r2, r3
 80146a0:	f7ee ffac 	bl	80035fc <_read>
 80146a4:	1c43      	adds	r3, r0, #1
 80146a6:	d102      	bne.n	80146ae <_read_r+0x1e>
 80146a8:	6823      	ldr	r3, [r4, #0]
 80146aa:	b103      	cbz	r3, 80146ae <_read_r+0x1e>
 80146ac:	602b      	str	r3, [r5, #0]
 80146ae:	bd38      	pop	{r3, r4, r5, pc}
 80146b0:	20002618 	.word	0x20002618

080146b4 <_sbrk_r>:
 80146b4:	b538      	push	{r3, r4, r5, lr}
 80146b6:	4c06      	ldr	r4, [pc, #24]	; (80146d0 <_sbrk_r+0x1c>)
 80146b8:	2300      	movs	r3, #0
 80146ba:	4605      	mov	r5, r0
 80146bc:	4608      	mov	r0, r1
 80146be:	6023      	str	r3, [r4, #0]
 80146c0:	f7ef f80a 	bl	80036d8 <_sbrk>
 80146c4:	1c43      	adds	r3, r0, #1
 80146c6:	d102      	bne.n	80146ce <_sbrk_r+0x1a>
 80146c8:	6823      	ldr	r3, [r4, #0]
 80146ca:	b103      	cbz	r3, 80146ce <_sbrk_r+0x1a>
 80146cc:	602b      	str	r3, [r5, #0]
 80146ce:	bd38      	pop	{r3, r4, r5, pc}
 80146d0:	20002618 	.word	0x20002618

080146d4 <__sccl>:
 80146d4:	b570      	push	{r4, r5, r6, lr}
 80146d6:	780b      	ldrb	r3, [r1, #0]
 80146d8:	2b5e      	cmp	r3, #94	; 0x5e
 80146da:	bf13      	iteet	ne
 80146dc:	1c4a      	addne	r2, r1, #1
 80146de:	1c8a      	addeq	r2, r1, #2
 80146e0:	784b      	ldrbeq	r3, [r1, #1]
 80146e2:	2100      	movne	r1, #0
 80146e4:	bf08      	it	eq
 80146e6:	2101      	moveq	r1, #1
 80146e8:	1e44      	subs	r4, r0, #1
 80146ea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80146ee:	f804 1f01 	strb.w	r1, [r4, #1]!
 80146f2:	42ac      	cmp	r4, r5
 80146f4:	d1fb      	bne.n	80146ee <__sccl+0x1a>
 80146f6:	b913      	cbnz	r3, 80146fe <__sccl+0x2a>
 80146f8:	3a01      	subs	r2, #1
 80146fa:	4610      	mov	r0, r2
 80146fc:	bd70      	pop	{r4, r5, r6, pc}
 80146fe:	f081 0401 	eor.w	r4, r1, #1
 8014702:	54c4      	strb	r4, [r0, r3]
 8014704:	1c51      	adds	r1, r2, #1
 8014706:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801470a:	2d2d      	cmp	r5, #45	; 0x2d
 801470c:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8014710:	460a      	mov	r2, r1
 8014712:	d006      	beq.n	8014722 <__sccl+0x4e>
 8014714:	2d5d      	cmp	r5, #93	; 0x5d
 8014716:	d0f0      	beq.n	80146fa <__sccl+0x26>
 8014718:	b90d      	cbnz	r5, 801471e <__sccl+0x4a>
 801471a:	4632      	mov	r2, r6
 801471c:	e7ed      	b.n	80146fa <__sccl+0x26>
 801471e:	462b      	mov	r3, r5
 8014720:	e7ef      	b.n	8014702 <__sccl+0x2e>
 8014722:	780e      	ldrb	r6, [r1, #0]
 8014724:	2e5d      	cmp	r6, #93	; 0x5d
 8014726:	d0fa      	beq.n	801471e <__sccl+0x4a>
 8014728:	42b3      	cmp	r3, r6
 801472a:	dcf8      	bgt.n	801471e <__sccl+0x4a>
 801472c:	3301      	adds	r3, #1
 801472e:	429e      	cmp	r6, r3
 8014730:	54c4      	strb	r4, [r0, r3]
 8014732:	dcfb      	bgt.n	801472c <__sccl+0x58>
 8014734:	3102      	adds	r1, #2
 8014736:	e7e6      	b.n	8014706 <__sccl+0x32>

08014738 <strncmp>:
 8014738:	b510      	push	{r4, lr}
 801473a:	b16a      	cbz	r2, 8014758 <strncmp+0x20>
 801473c:	3901      	subs	r1, #1
 801473e:	1884      	adds	r4, r0, r2
 8014740:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014744:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014748:	4293      	cmp	r3, r2
 801474a:	d103      	bne.n	8014754 <strncmp+0x1c>
 801474c:	42a0      	cmp	r0, r4
 801474e:	d001      	beq.n	8014754 <strncmp+0x1c>
 8014750:	2b00      	cmp	r3, #0
 8014752:	d1f5      	bne.n	8014740 <strncmp+0x8>
 8014754:	1a98      	subs	r0, r3, r2
 8014756:	bd10      	pop	{r4, pc}
 8014758:	4610      	mov	r0, r2
 801475a:	e7fc      	b.n	8014756 <strncmp+0x1e>

0801475c <_strtoul_l.isra.0>:
 801475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014760:	4680      	mov	r8, r0
 8014762:	4689      	mov	r9, r1
 8014764:	4692      	mov	sl, r2
 8014766:	461e      	mov	r6, r3
 8014768:	460f      	mov	r7, r1
 801476a:	463d      	mov	r5, r7
 801476c:	9808      	ldr	r0, [sp, #32]
 801476e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014772:	f7fe fbab 	bl	8012ecc <__locale_ctype_ptr_l>
 8014776:	4420      	add	r0, r4
 8014778:	7843      	ldrb	r3, [r0, #1]
 801477a:	f013 0308 	ands.w	r3, r3, #8
 801477e:	d130      	bne.n	80147e2 <_strtoul_l.isra.0+0x86>
 8014780:	2c2d      	cmp	r4, #45	; 0x2d
 8014782:	d130      	bne.n	80147e6 <_strtoul_l.isra.0+0x8a>
 8014784:	787c      	ldrb	r4, [r7, #1]
 8014786:	1cbd      	adds	r5, r7, #2
 8014788:	2101      	movs	r1, #1
 801478a:	2e00      	cmp	r6, #0
 801478c:	d05c      	beq.n	8014848 <_strtoul_l.isra.0+0xec>
 801478e:	2e10      	cmp	r6, #16
 8014790:	d109      	bne.n	80147a6 <_strtoul_l.isra.0+0x4a>
 8014792:	2c30      	cmp	r4, #48	; 0x30
 8014794:	d107      	bne.n	80147a6 <_strtoul_l.isra.0+0x4a>
 8014796:	782b      	ldrb	r3, [r5, #0]
 8014798:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801479c:	2b58      	cmp	r3, #88	; 0x58
 801479e:	d14e      	bne.n	801483e <_strtoul_l.isra.0+0xe2>
 80147a0:	786c      	ldrb	r4, [r5, #1]
 80147a2:	2610      	movs	r6, #16
 80147a4:	3502      	adds	r5, #2
 80147a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147aa:	2300      	movs	r3, #0
 80147ac:	fbb2 f2f6 	udiv	r2, r2, r6
 80147b0:	fb06 fc02 	mul.w	ip, r6, r2
 80147b4:	ea6f 0c0c 	mvn.w	ip, ip
 80147b8:	4618      	mov	r0, r3
 80147ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80147be:	2f09      	cmp	r7, #9
 80147c0:	d817      	bhi.n	80147f2 <_strtoul_l.isra.0+0x96>
 80147c2:	463c      	mov	r4, r7
 80147c4:	42a6      	cmp	r6, r4
 80147c6:	dd23      	ble.n	8014810 <_strtoul_l.isra.0+0xb4>
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	db1e      	blt.n	801480a <_strtoul_l.isra.0+0xae>
 80147cc:	4282      	cmp	r2, r0
 80147ce:	d31c      	bcc.n	801480a <_strtoul_l.isra.0+0xae>
 80147d0:	d101      	bne.n	80147d6 <_strtoul_l.isra.0+0x7a>
 80147d2:	45a4      	cmp	ip, r4
 80147d4:	db19      	blt.n	801480a <_strtoul_l.isra.0+0xae>
 80147d6:	fb00 4006 	mla	r0, r0, r6, r4
 80147da:	2301      	movs	r3, #1
 80147dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147e0:	e7eb      	b.n	80147ba <_strtoul_l.isra.0+0x5e>
 80147e2:	462f      	mov	r7, r5
 80147e4:	e7c1      	b.n	801476a <_strtoul_l.isra.0+0xe>
 80147e6:	2c2b      	cmp	r4, #43	; 0x2b
 80147e8:	bf04      	itt	eq
 80147ea:	1cbd      	addeq	r5, r7, #2
 80147ec:	787c      	ldrbeq	r4, [r7, #1]
 80147ee:	4619      	mov	r1, r3
 80147f0:	e7cb      	b.n	801478a <_strtoul_l.isra.0+0x2e>
 80147f2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80147f6:	2f19      	cmp	r7, #25
 80147f8:	d801      	bhi.n	80147fe <_strtoul_l.isra.0+0xa2>
 80147fa:	3c37      	subs	r4, #55	; 0x37
 80147fc:	e7e2      	b.n	80147c4 <_strtoul_l.isra.0+0x68>
 80147fe:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014802:	2f19      	cmp	r7, #25
 8014804:	d804      	bhi.n	8014810 <_strtoul_l.isra.0+0xb4>
 8014806:	3c57      	subs	r4, #87	; 0x57
 8014808:	e7dc      	b.n	80147c4 <_strtoul_l.isra.0+0x68>
 801480a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801480e:	e7e5      	b.n	80147dc <_strtoul_l.isra.0+0x80>
 8014810:	2b00      	cmp	r3, #0
 8014812:	da09      	bge.n	8014828 <_strtoul_l.isra.0+0xcc>
 8014814:	2322      	movs	r3, #34	; 0x22
 8014816:	f8c8 3000 	str.w	r3, [r8]
 801481a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801481e:	f1ba 0f00 	cmp.w	sl, #0
 8014822:	d107      	bne.n	8014834 <_strtoul_l.isra.0+0xd8>
 8014824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014828:	b101      	cbz	r1, 801482c <_strtoul_l.isra.0+0xd0>
 801482a:	4240      	negs	r0, r0
 801482c:	f1ba 0f00 	cmp.w	sl, #0
 8014830:	d0f8      	beq.n	8014824 <_strtoul_l.isra.0+0xc8>
 8014832:	b10b      	cbz	r3, 8014838 <_strtoul_l.isra.0+0xdc>
 8014834:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8014838:	f8ca 9000 	str.w	r9, [sl]
 801483c:	e7f2      	b.n	8014824 <_strtoul_l.isra.0+0xc8>
 801483e:	2430      	movs	r4, #48	; 0x30
 8014840:	2e00      	cmp	r6, #0
 8014842:	d1b0      	bne.n	80147a6 <_strtoul_l.isra.0+0x4a>
 8014844:	2608      	movs	r6, #8
 8014846:	e7ae      	b.n	80147a6 <_strtoul_l.isra.0+0x4a>
 8014848:	2c30      	cmp	r4, #48	; 0x30
 801484a:	d0a4      	beq.n	8014796 <_strtoul_l.isra.0+0x3a>
 801484c:	260a      	movs	r6, #10
 801484e:	e7aa      	b.n	80147a6 <_strtoul_l.isra.0+0x4a>

08014850 <_strtoul_r>:
 8014850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014852:	4c06      	ldr	r4, [pc, #24]	; (801486c <_strtoul_r+0x1c>)
 8014854:	4d06      	ldr	r5, [pc, #24]	; (8014870 <_strtoul_r+0x20>)
 8014856:	6824      	ldr	r4, [r4, #0]
 8014858:	6a24      	ldr	r4, [r4, #32]
 801485a:	2c00      	cmp	r4, #0
 801485c:	bf08      	it	eq
 801485e:	462c      	moveq	r4, r5
 8014860:	9400      	str	r4, [sp, #0]
 8014862:	f7ff ff7b 	bl	801475c <_strtoul_l.isra.0>
 8014866:	b003      	add	sp, #12
 8014868:	bd30      	pop	{r4, r5, pc}
 801486a:	bf00      	nop
 801486c:	200001b0 	.word	0x200001b0
 8014870:	20000214 	.word	0x20000214

08014874 <__submore>:
 8014874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014878:	460c      	mov	r4, r1
 801487a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801487c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014880:	4299      	cmp	r1, r3
 8014882:	d11d      	bne.n	80148c0 <__submore+0x4c>
 8014884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014888:	f7fe ff66 	bl	8013758 <_malloc_r>
 801488c:	b918      	cbnz	r0, 8014896 <__submore+0x22>
 801488e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801489a:	63a3      	str	r3, [r4, #56]	; 0x38
 801489c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80148a0:	6360      	str	r0, [r4, #52]	; 0x34
 80148a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80148a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80148aa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80148ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80148b2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80148b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80148ba:	6020      	str	r0, [r4, #0]
 80148bc:	2000      	movs	r0, #0
 80148be:	e7e8      	b.n	8014892 <__submore+0x1e>
 80148c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80148c2:	0077      	lsls	r7, r6, #1
 80148c4:	463a      	mov	r2, r7
 80148c6:	f7fe ffa1 	bl	801380c <_realloc_r>
 80148ca:	4605      	mov	r5, r0
 80148cc:	2800      	cmp	r0, #0
 80148ce:	d0de      	beq.n	801488e <__submore+0x1a>
 80148d0:	eb00 0806 	add.w	r8, r0, r6
 80148d4:	4601      	mov	r1, r0
 80148d6:	4632      	mov	r2, r6
 80148d8:	4640      	mov	r0, r8
 80148da:	f7fc fd69 	bl	80113b0 <memcpy>
 80148de:	f8c4 8000 	str.w	r8, [r4]
 80148e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80148e6:	e7e9      	b.n	80148bc <__submore+0x48>

080148e8 <__swbuf_r>:
 80148e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ea:	460e      	mov	r6, r1
 80148ec:	4614      	mov	r4, r2
 80148ee:	4605      	mov	r5, r0
 80148f0:	b118      	cbz	r0, 80148fa <__swbuf_r+0x12>
 80148f2:	6983      	ldr	r3, [r0, #24]
 80148f4:	b90b      	cbnz	r3, 80148fa <__swbuf_r+0x12>
 80148f6:	f7fd ff39 	bl	801276c <__sinit>
 80148fa:	4b21      	ldr	r3, [pc, #132]	; (8014980 <__swbuf_r+0x98>)
 80148fc:	429c      	cmp	r4, r3
 80148fe:	d12a      	bne.n	8014956 <__swbuf_r+0x6e>
 8014900:	686c      	ldr	r4, [r5, #4]
 8014902:	69a3      	ldr	r3, [r4, #24]
 8014904:	60a3      	str	r3, [r4, #8]
 8014906:	89a3      	ldrh	r3, [r4, #12]
 8014908:	071a      	lsls	r2, r3, #28
 801490a:	d52e      	bpl.n	801496a <__swbuf_r+0x82>
 801490c:	6923      	ldr	r3, [r4, #16]
 801490e:	b363      	cbz	r3, 801496a <__swbuf_r+0x82>
 8014910:	6923      	ldr	r3, [r4, #16]
 8014912:	6820      	ldr	r0, [r4, #0]
 8014914:	1ac0      	subs	r0, r0, r3
 8014916:	6963      	ldr	r3, [r4, #20]
 8014918:	b2f6      	uxtb	r6, r6
 801491a:	4283      	cmp	r3, r0
 801491c:	4637      	mov	r7, r6
 801491e:	dc04      	bgt.n	801492a <__swbuf_r+0x42>
 8014920:	4621      	mov	r1, r4
 8014922:	4628      	mov	r0, r5
 8014924:	f000 f934 	bl	8014b90 <_fflush_r>
 8014928:	bb28      	cbnz	r0, 8014976 <__swbuf_r+0x8e>
 801492a:	68a3      	ldr	r3, [r4, #8]
 801492c:	3b01      	subs	r3, #1
 801492e:	60a3      	str	r3, [r4, #8]
 8014930:	6823      	ldr	r3, [r4, #0]
 8014932:	1c5a      	adds	r2, r3, #1
 8014934:	6022      	str	r2, [r4, #0]
 8014936:	701e      	strb	r6, [r3, #0]
 8014938:	6963      	ldr	r3, [r4, #20]
 801493a:	3001      	adds	r0, #1
 801493c:	4283      	cmp	r3, r0
 801493e:	d004      	beq.n	801494a <__swbuf_r+0x62>
 8014940:	89a3      	ldrh	r3, [r4, #12]
 8014942:	07db      	lsls	r3, r3, #31
 8014944:	d519      	bpl.n	801497a <__swbuf_r+0x92>
 8014946:	2e0a      	cmp	r6, #10
 8014948:	d117      	bne.n	801497a <__swbuf_r+0x92>
 801494a:	4621      	mov	r1, r4
 801494c:	4628      	mov	r0, r5
 801494e:	f000 f91f 	bl	8014b90 <_fflush_r>
 8014952:	b190      	cbz	r0, 801497a <__swbuf_r+0x92>
 8014954:	e00f      	b.n	8014976 <__swbuf_r+0x8e>
 8014956:	4b0b      	ldr	r3, [pc, #44]	; (8014984 <__swbuf_r+0x9c>)
 8014958:	429c      	cmp	r4, r3
 801495a:	d101      	bne.n	8014960 <__swbuf_r+0x78>
 801495c:	68ac      	ldr	r4, [r5, #8]
 801495e:	e7d0      	b.n	8014902 <__swbuf_r+0x1a>
 8014960:	4b09      	ldr	r3, [pc, #36]	; (8014988 <__swbuf_r+0xa0>)
 8014962:	429c      	cmp	r4, r3
 8014964:	bf08      	it	eq
 8014966:	68ec      	ldreq	r4, [r5, #12]
 8014968:	e7cb      	b.n	8014902 <__swbuf_r+0x1a>
 801496a:	4621      	mov	r1, r4
 801496c:	4628      	mov	r0, r5
 801496e:	f000 f81b 	bl	80149a8 <__swsetup_r>
 8014972:	2800      	cmp	r0, #0
 8014974:	d0cc      	beq.n	8014910 <__swbuf_r+0x28>
 8014976:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801497a:	4638      	mov	r0, r7
 801497c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801497e:	bf00      	nop
 8014980:	08015230 	.word	0x08015230
 8014984:	08015250 	.word	0x08015250
 8014988:	08015210 	.word	0x08015210

0801498c <__ascii_wctomb>:
 801498c:	b149      	cbz	r1, 80149a2 <__ascii_wctomb+0x16>
 801498e:	2aff      	cmp	r2, #255	; 0xff
 8014990:	bf85      	ittet	hi
 8014992:	238a      	movhi	r3, #138	; 0x8a
 8014994:	6003      	strhi	r3, [r0, #0]
 8014996:	700a      	strbls	r2, [r1, #0]
 8014998:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801499c:	bf98      	it	ls
 801499e:	2001      	movls	r0, #1
 80149a0:	4770      	bx	lr
 80149a2:	4608      	mov	r0, r1
 80149a4:	4770      	bx	lr
	...

080149a8 <__swsetup_r>:
 80149a8:	4b32      	ldr	r3, [pc, #200]	; (8014a74 <__swsetup_r+0xcc>)
 80149aa:	b570      	push	{r4, r5, r6, lr}
 80149ac:	681d      	ldr	r5, [r3, #0]
 80149ae:	4606      	mov	r6, r0
 80149b0:	460c      	mov	r4, r1
 80149b2:	b125      	cbz	r5, 80149be <__swsetup_r+0x16>
 80149b4:	69ab      	ldr	r3, [r5, #24]
 80149b6:	b913      	cbnz	r3, 80149be <__swsetup_r+0x16>
 80149b8:	4628      	mov	r0, r5
 80149ba:	f7fd fed7 	bl	801276c <__sinit>
 80149be:	4b2e      	ldr	r3, [pc, #184]	; (8014a78 <__swsetup_r+0xd0>)
 80149c0:	429c      	cmp	r4, r3
 80149c2:	d10f      	bne.n	80149e4 <__swsetup_r+0x3c>
 80149c4:	686c      	ldr	r4, [r5, #4]
 80149c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	0715      	lsls	r5, r2, #28
 80149ce:	d42c      	bmi.n	8014a2a <__swsetup_r+0x82>
 80149d0:	06d0      	lsls	r0, r2, #27
 80149d2:	d411      	bmi.n	80149f8 <__swsetup_r+0x50>
 80149d4:	2209      	movs	r2, #9
 80149d6:	6032      	str	r2, [r6, #0]
 80149d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149dc:	81a3      	strh	r3, [r4, #12]
 80149de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149e2:	e03e      	b.n	8014a62 <__swsetup_r+0xba>
 80149e4:	4b25      	ldr	r3, [pc, #148]	; (8014a7c <__swsetup_r+0xd4>)
 80149e6:	429c      	cmp	r4, r3
 80149e8:	d101      	bne.n	80149ee <__swsetup_r+0x46>
 80149ea:	68ac      	ldr	r4, [r5, #8]
 80149ec:	e7eb      	b.n	80149c6 <__swsetup_r+0x1e>
 80149ee:	4b24      	ldr	r3, [pc, #144]	; (8014a80 <__swsetup_r+0xd8>)
 80149f0:	429c      	cmp	r4, r3
 80149f2:	bf08      	it	eq
 80149f4:	68ec      	ldreq	r4, [r5, #12]
 80149f6:	e7e6      	b.n	80149c6 <__swsetup_r+0x1e>
 80149f8:	0751      	lsls	r1, r2, #29
 80149fa:	d512      	bpl.n	8014a22 <__swsetup_r+0x7a>
 80149fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80149fe:	b141      	cbz	r1, 8014a12 <__swsetup_r+0x6a>
 8014a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a04:	4299      	cmp	r1, r3
 8014a06:	d002      	beq.n	8014a0e <__swsetup_r+0x66>
 8014a08:	4630      	mov	r0, r6
 8014a0a:	f000 f973 	bl	8014cf4 <_free_r>
 8014a0e:	2300      	movs	r3, #0
 8014a10:	6363      	str	r3, [r4, #52]	; 0x34
 8014a12:	89a3      	ldrh	r3, [r4, #12]
 8014a14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a18:	81a3      	strh	r3, [r4, #12]
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	6063      	str	r3, [r4, #4]
 8014a1e:	6923      	ldr	r3, [r4, #16]
 8014a20:	6023      	str	r3, [r4, #0]
 8014a22:	89a3      	ldrh	r3, [r4, #12]
 8014a24:	f043 0308 	orr.w	r3, r3, #8
 8014a28:	81a3      	strh	r3, [r4, #12]
 8014a2a:	6923      	ldr	r3, [r4, #16]
 8014a2c:	b94b      	cbnz	r3, 8014a42 <__swsetup_r+0x9a>
 8014a2e:	89a3      	ldrh	r3, [r4, #12]
 8014a30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a38:	d003      	beq.n	8014a42 <__swsetup_r+0x9a>
 8014a3a:	4621      	mov	r1, r4
 8014a3c:	4630      	mov	r0, r6
 8014a3e:	f000 f8f5 	bl	8014c2c <__smakebuf_r>
 8014a42:	89a2      	ldrh	r2, [r4, #12]
 8014a44:	f012 0301 	ands.w	r3, r2, #1
 8014a48:	d00c      	beq.n	8014a64 <__swsetup_r+0xbc>
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	60a3      	str	r3, [r4, #8]
 8014a4e:	6963      	ldr	r3, [r4, #20]
 8014a50:	425b      	negs	r3, r3
 8014a52:	61a3      	str	r3, [r4, #24]
 8014a54:	6923      	ldr	r3, [r4, #16]
 8014a56:	b953      	cbnz	r3, 8014a6e <__swsetup_r+0xc6>
 8014a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014a60:	d1ba      	bne.n	80149d8 <__swsetup_r+0x30>
 8014a62:	bd70      	pop	{r4, r5, r6, pc}
 8014a64:	0792      	lsls	r2, r2, #30
 8014a66:	bf58      	it	pl
 8014a68:	6963      	ldrpl	r3, [r4, #20]
 8014a6a:	60a3      	str	r3, [r4, #8]
 8014a6c:	e7f2      	b.n	8014a54 <__swsetup_r+0xac>
 8014a6e:	2000      	movs	r0, #0
 8014a70:	e7f7      	b.n	8014a62 <__swsetup_r+0xba>
 8014a72:	bf00      	nop
 8014a74:	200001b0 	.word	0x200001b0
 8014a78:	08015230 	.word	0x08015230
 8014a7c:	08015250 	.word	0x08015250
 8014a80:	08015210 	.word	0x08015210

08014a84 <__sflush_r>:
 8014a84:	898a      	ldrh	r2, [r1, #12]
 8014a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a8a:	4605      	mov	r5, r0
 8014a8c:	0710      	lsls	r0, r2, #28
 8014a8e:	460c      	mov	r4, r1
 8014a90:	d458      	bmi.n	8014b44 <__sflush_r+0xc0>
 8014a92:	684b      	ldr	r3, [r1, #4]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	dc05      	bgt.n	8014aa4 <__sflush_r+0x20>
 8014a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	dc02      	bgt.n	8014aa4 <__sflush_r+0x20>
 8014a9e:	2000      	movs	r0, #0
 8014aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014aa6:	2e00      	cmp	r6, #0
 8014aa8:	d0f9      	beq.n	8014a9e <__sflush_r+0x1a>
 8014aaa:	2300      	movs	r3, #0
 8014aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014ab0:	682f      	ldr	r7, [r5, #0]
 8014ab2:	6a21      	ldr	r1, [r4, #32]
 8014ab4:	602b      	str	r3, [r5, #0]
 8014ab6:	d032      	beq.n	8014b1e <__sflush_r+0x9a>
 8014ab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014aba:	89a3      	ldrh	r3, [r4, #12]
 8014abc:	075a      	lsls	r2, r3, #29
 8014abe:	d505      	bpl.n	8014acc <__sflush_r+0x48>
 8014ac0:	6863      	ldr	r3, [r4, #4]
 8014ac2:	1ac0      	subs	r0, r0, r3
 8014ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ac6:	b10b      	cbz	r3, 8014acc <__sflush_r+0x48>
 8014ac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014aca:	1ac0      	subs	r0, r0, r3
 8014acc:	2300      	movs	r3, #0
 8014ace:	4602      	mov	r2, r0
 8014ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ad2:	6a21      	ldr	r1, [r4, #32]
 8014ad4:	4628      	mov	r0, r5
 8014ad6:	47b0      	blx	r6
 8014ad8:	1c43      	adds	r3, r0, #1
 8014ada:	89a3      	ldrh	r3, [r4, #12]
 8014adc:	d106      	bne.n	8014aec <__sflush_r+0x68>
 8014ade:	6829      	ldr	r1, [r5, #0]
 8014ae0:	291d      	cmp	r1, #29
 8014ae2:	d848      	bhi.n	8014b76 <__sflush_r+0xf2>
 8014ae4:	4a29      	ldr	r2, [pc, #164]	; (8014b8c <__sflush_r+0x108>)
 8014ae6:	40ca      	lsrs	r2, r1
 8014ae8:	07d6      	lsls	r6, r2, #31
 8014aea:	d544      	bpl.n	8014b76 <__sflush_r+0xf2>
 8014aec:	2200      	movs	r2, #0
 8014aee:	6062      	str	r2, [r4, #4]
 8014af0:	04d9      	lsls	r1, r3, #19
 8014af2:	6922      	ldr	r2, [r4, #16]
 8014af4:	6022      	str	r2, [r4, #0]
 8014af6:	d504      	bpl.n	8014b02 <__sflush_r+0x7e>
 8014af8:	1c42      	adds	r2, r0, #1
 8014afa:	d101      	bne.n	8014b00 <__sflush_r+0x7c>
 8014afc:	682b      	ldr	r3, [r5, #0]
 8014afe:	b903      	cbnz	r3, 8014b02 <__sflush_r+0x7e>
 8014b00:	6560      	str	r0, [r4, #84]	; 0x54
 8014b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b04:	602f      	str	r7, [r5, #0]
 8014b06:	2900      	cmp	r1, #0
 8014b08:	d0c9      	beq.n	8014a9e <__sflush_r+0x1a>
 8014b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b0e:	4299      	cmp	r1, r3
 8014b10:	d002      	beq.n	8014b18 <__sflush_r+0x94>
 8014b12:	4628      	mov	r0, r5
 8014b14:	f000 f8ee 	bl	8014cf4 <_free_r>
 8014b18:	2000      	movs	r0, #0
 8014b1a:	6360      	str	r0, [r4, #52]	; 0x34
 8014b1c:	e7c0      	b.n	8014aa0 <__sflush_r+0x1c>
 8014b1e:	2301      	movs	r3, #1
 8014b20:	4628      	mov	r0, r5
 8014b22:	47b0      	blx	r6
 8014b24:	1c41      	adds	r1, r0, #1
 8014b26:	d1c8      	bne.n	8014aba <__sflush_r+0x36>
 8014b28:	682b      	ldr	r3, [r5, #0]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d0c5      	beq.n	8014aba <__sflush_r+0x36>
 8014b2e:	2b1d      	cmp	r3, #29
 8014b30:	d001      	beq.n	8014b36 <__sflush_r+0xb2>
 8014b32:	2b16      	cmp	r3, #22
 8014b34:	d101      	bne.n	8014b3a <__sflush_r+0xb6>
 8014b36:	602f      	str	r7, [r5, #0]
 8014b38:	e7b1      	b.n	8014a9e <__sflush_r+0x1a>
 8014b3a:	89a3      	ldrh	r3, [r4, #12]
 8014b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b40:	81a3      	strh	r3, [r4, #12]
 8014b42:	e7ad      	b.n	8014aa0 <__sflush_r+0x1c>
 8014b44:	690f      	ldr	r7, [r1, #16]
 8014b46:	2f00      	cmp	r7, #0
 8014b48:	d0a9      	beq.n	8014a9e <__sflush_r+0x1a>
 8014b4a:	0793      	lsls	r3, r2, #30
 8014b4c:	680e      	ldr	r6, [r1, #0]
 8014b4e:	bf08      	it	eq
 8014b50:	694b      	ldreq	r3, [r1, #20]
 8014b52:	600f      	str	r7, [r1, #0]
 8014b54:	bf18      	it	ne
 8014b56:	2300      	movne	r3, #0
 8014b58:	eba6 0807 	sub.w	r8, r6, r7
 8014b5c:	608b      	str	r3, [r1, #8]
 8014b5e:	f1b8 0f00 	cmp.w	r8, #0
 8014b62:	dd9c      	ble.n	8014a9e <__sflush_r+0x1a>
 8014b64:	4643      	mov	r3, r8
 8014b66:	463a      	mov	r2, r7
 8014b68:	6a21      	ldr	r1, [r4, #32]
 8014b6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	47b0      	blx	r6
 8014b70:	2800      	cmp	r0, #0
 8014b72:	dc06      	bgt.n	8014b82 <__sflush_r+0xfe>
 8014b74:	89a3      	ldrh	r3, [r4, #12]
 8014b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b7a:	81a3      	strh	r3, [r4, #12]
 8014b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b80:	e78e      	b.n	8014aa0 <__sflush_r+0x1c>
 8014b82:	4407      	add	r7, r0
 8014b84:	eba8 0800 	sub.w	r8, r8, r0
 8014b88:	e7e9      	b.n	8014b5e <__sflush_r+0xda>
 8014b8a:	bf00      	nop
 8014b8c:	20400001 	.word	0x20400001

08014b90 <_fflush_r>:
 8014b90:	b538      	push	{r3, r4, r5, lr}
 8014b92:	690b      	ldr	r3, [r1, #16]
 8014b94:	4605      	mov	r5, r0
 8014b96:	460c      	mov	r4, r1
 8014b98:	b1db      	cbz	r3, 8014bd2 <_fflush_r+0x42>
 8014b9a:	b118      	cbz	r0, 8014ba4 <_fflush_r+0x14>
 8014b9c:	6983      	ldr	r3, [r0, #24]
 8014b9e:	b90b      	cbnz	r3, 8014ba4 <_fflush_r+0x14>
 8014ba0:	f7fd fde4 	bl	801276c <__sinit>
 8014ba4:	4b0c      	ldr	r3, [pc, #48]	; (8014bd8 <_fflush_r+0x48>)
 8014ba6:	429c      	cmp	r4, r3
 8014ba8:	d109      	bne.n	8014bbe <_fflush_r+0x2e>
 8014baa:	686c      	ldr	r4, [r5, #4]
 8014bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bb0:	b17b      	cbz	r3, 8014bd2 <_fflush_r+0x42>
 8014bb2:	4621      	mov	r1, r4
 8014bb4:	4628      	mov	r0, r5
 8014bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bba:	f7ff bf63 	b.w	8014a84 <__sflush_r>
 8014bbe:	4b07      	ldr	r3, [pc, #28]	; (8014bdc <_fflush_r+0x4c>)
 8014bc0:	429c      	cmp	r4, r3
 8014bc2:	d101      	bne.n	8014bc8 <_fflush_r+0x38>
 8014bc4:	68ac      	ldr	r4, [r5, #8]
 8014bc6:	e7f1      	b.n	8014bac <_fflush_r+0x1c>
 8014bc8:	4b05      	ldr	r3, [pc, #20]	; (8014be0 <_fflush_r+0x50>)
 8014bca:	429c      	cmp	r4, r3
 8014bcc:	bf08      	it	eq
 8014bce:	68ec      	ldreq	r4, [r5, #12]
 8014bd0:	e7ec      	b.n	8014bac <_fflush_r+0x1c>
 8014bd2:	2000      	movs	r0, #0
 8014bd4:	bd38      	pop	{r3, r4, r5, pc}
 8014bd6:	bf00      	nop
 8014bd8:	08015230 	.word	0x08015230
 8014bdc:	08015250 	.word	0x08015250
 8014be0:	08015210 	.word	0x08015210

08014be4 <__swhatbuf_r>:
 8014be4:	b570      	push	{r4, r5, r6, lr}
 8014be6:	460e      	mov	r6, r1
 8014be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bec:	2900      	cmp	r1, #0
 8014bee:	b096      	sub	sp, #88	; 0x58
 8014bf0:	4614      	mov	r4, r2
 8014bf2:	461d      	mov	r5, r3
 8014bf4:	da07      	bge.n	8014c06 <__swhatbuf_r+0x22>
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	602b      	str	r3, [r5, #0]
 8014bfa:	89b3      	ldrh	r3, [r6, #12]
 8014bfc:	061a      	lsls	r2, r3, #24
 8014bfe:	d410      	bmi.n	8014c22 <__swhatbuf_r+0x3e>
 8014c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c04:	e00e      	b.n	8014c24 <__swhatbuf_r+0x40>
 8014c06:	466a      	mov	r2, sp
 8014c08:	f000 f8ca 	bl	8014da0 <_fstat_r>
 8014c0c:	2800      	cmp	r0, #0
 8014c0e:	dbf2      	blt.n	8014bf6 <__swhatbuf_r+0x12>
 8014c10:	9a01      	ldr	r2, [sp, #4]
 8014c12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014c16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014c1a:	425a      	negs	r2, r3
 8014c1c:	415a      	adcs	r2, r3
 8014c1e:	602a      	str	r2, [r5, #0]
 8014c20:	e7ee      	b.n	8014c00 <__swhatbuf_r+0x1c>
 8014c22:	2340      	movs	r3, #64	; 0x40
 8014c24:	2000      	movs	r0, #0
 8014c26:	6023      	str	r3, [r4, #0]
 8014c28:	b016      	add	sp, #88	; 0x58
 8014c2a:	bd70      	pop	{r4, r5, r6, pc}

08014c2c <__smakebuf_r>:
 8014c2c:	898b      	ldrh	r3, [r1, #12]
 8014c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014c30:	079d      	lsls	r5, r3, #30
 8014c32:	4606      	mov	r6, r0
 8014c34:	460c      	mov	r4, r1
 8014c36:	d507      	bpl.n	8014c48 <__smakebuf_r+0x1c>
 8014c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014c3c:	6023      	str	r3, [r4, #0]
 8014c3e:	6123      	str	r3, [r4, #16]
 8014c40:	2301      	movs	r3, #1
 8014c42:	6163      	str	r3, [r4, #20]
 8014c44:	b002      	add	sp, #8
 8014c46:	bd70      	pop	{r4, r5, r6, pc}
 8014c48:	ab01      	add	r3, sp, #4
 8014c4a:	466a      	mov	r2, sp
 8014c4c:	f7ff ffca 	bl	8014be4 <__swhatbuf_r>
 8014c50:	9900      	ldr	r1, [sp, #0]
 8014c52:	4605      	mov	r5, r0
 8014c54:	4630      	mov	r0, r6
 8014c56:	f7fe fd7f 	bl	8013758 <_malloc_r>
 8014c5a:	b948      	cbnz	r0, 8014c70 <__smakebuf_r+0x44>
 8014c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c60:	059a      	lsls	r2, r3, #22
 8014c62:	d4ef      	bmi.n	8014c44 <__smakebuf_r+0x18>
 8014c64:	f023 0303 	bic.w	r3, r3, #3
 8014c68:	f043 0302 	orr.w	r3, r3, #2
 8014c6c:	81a3      	strh	r3, [r4, #12]
 8014c6e:	e7e3      	b.n	8014c38 <__smakebuf_r+0xc>
 8014c70:	4b0d      	ldr	r3, [pc, #52]	; (8014ca8 <__smakebuf_r+0x7c>)
 8014c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c74:	89a3      	ldrh	r3, [r4, #12]
 8014c76:	6020      	str	r0, [r4, #0]
 8014c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c7c:	81a3      	strh	r3, [r4, #12]
 8014c7e:	9b00      	ldr	r3, [sp, #0]
 8014c80:	6163      	str	r3, [r4, #20]
 8014c82:	9b01      	ldr	r3, [sp, #4]
 8014c84:	6120      	str	r0, [r4, #16]
 8014c86:	b15b      	cbz	r3, 8014ca0 <__smakebuf_r+0x74>
 8014c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c8c:	4630      	mov	r0, r6
 8014c8e:	f000 f899 	bl	8014dc4 <_isatty_r>
 8014c92:	b128      	cbz	r0, 8014ca0 <__smakebuf_r+0x74>
 8014c94:	89a3      	ldrh	r3, [r4, #12]
 8014c96:	f023 0303 	bic.w	r3, r3, #3
 8014c9a:	f043 0301 	orr.w	r3, r3, #1
 8014c9e:	81a3      	strh	r3, [r4, #12]
 8014ca0:	89a3      	ldrh	r3, [r4, #12]
 8014ca2:	431d      	orrs	r5, r3
 8014ca4:	81a5      	strh	r5, [r4, #12]
 8014ca6:	e7cd      	b.n	8014c44 <__smakebuf_r+0x18>
 8014ca8:	08012735 	.word	0x08012735

08014cac <malloc>:
 8014cac:	4b02      	ldr	r3, [pc, #8]	; (8014cb8 <malloc+0xc>)
 8014cae:	4601      	mov	r1, r0
 8014cb0:	6818      	ldr	r0, [r3, #0]
 8014cb2:	f7fe bd51 	b.w	8013758 <_malloc_r>
 8014cb6:	bf00      	nop
 8014cb8:	200001b0 	.word	0x200001b0

08014cbc <memmove>:
 8014cbc:	4288      	cmp	r0, r1
 8014cbe:	b510      	push	{r4, lr}
 8014cc0:	eb01 0302 	add.w	r3, r1, r2
 8014cc4:	d807      	bhi.n	8014cd6 <memmove+0x1a>
 8014cc6:	1e42      	subs	r2, r0, #1
 8014cc8:	4299      	cmp	r1, r3
 8014cca:	d00a      	beq.n	8014ce2 <memmove+0x26>
 8014ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014cd0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014cd4:	e7f8      	b.n	8014cc8 <memmove+0xc>
 8014cd6:	4283      	cmp	r3, r0
 8014cd8:	d9f5      	bls.n	8014cc6 <memmove+0xa>
 8014cda:	1881      	adds	r1, r0, r2
 8014cdc:	1ad2      	subs	r2, r2, r3
 8014cde:	42d3      	cmn	r3, r2
 8014ce0:	d100      	bne.n	8014ce4 <memmove+0x28>
 8014ce2:	bd10      	pop	{r4, pc}
 8014ce4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ce8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014cec:	e7f7      	b.n	8014cde <memmove+0x22>

08014cee <__malloc_lock>:
 8014cee:	4770      	bx	lr

08014cf0 <__malloc_unlock>:
 8014cf0:	4770      	bx	lr
	...

08014cf4 <_free_r>:
 8014cf4:	b538      	push	{r3, r4, r5, lr}
 8014cf6:	4605      	mov	r5, r0
 8014cf8:	2900      	cmp	r1, #0
 8014cfa:	d045      	beq.n	8014d88 <_free_r+0x94>
 8014cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d00:	1f0c      	subs	r4, r1, #4
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	bfb8      	it	lt
 8014d06:	18e4      	addlt	r4, r4, r3
 8014d08:	f7ff fff1 	bl	8014cee <__malloc_lock>
 8014d0c:	4a1f      	ldr	r2, [pc, #124]	; (8014d8c <_free_r+0x98>)
 8014d0e:	6813      	ldr	r3, [r2, #0]
 8014d10:	4610      	mov	r0, r2
 8014d12:	b933      	cbnz	r3, 8014d22 <_free_r+0x2e>
 8014d14:	6063      	str	r3, [r4, #4]
 8014d16:	6014      	str	r4, [r2, #0]
 8014d18:	4628      	mov	r0, r5
 8014d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d1e:	f7ff bfe7 	b.w	8014cf0 <__malloc_unlock>
 8014d22:	42a3      	cmp	r3, r4
 8014d24:	d90c      	bls.n	8014d40 <_free_r+0x4c>
 8014d26:	6821      	ldr	r1, [r4, #0]
 8014d28:	1862      	adds	r2, r4, r1
 8014d2a:	4293      	cmp	r3, r2
 8014d2c:	bf04      	itt	eq
 8014d2e:	681a      	ldreq	r2, [r3, #0]
 8014d30:	685b      	ldreq	r3, [r3, #4]
 8014d32:	6063      	str	r3, [r4, #4]
 8014d34:	bf04      	itt	eq
 8014d36:	1852      	addeq	r2, r2, r1
 8014d38:	6022      	streq	r2, [r4, #0]
 8014d3a:	6004      	str	r4, [r0, #0]
 8014d3c:	e7ec      	b.n	8014d18 <_free_r+0x24>
 8014d3e:	4613      	mov	r3, r2
 8014d40:	685a      	ldr	r2, [r3, #4]
 8014d42:	b10a      	cbz	r2, 8014d48 <_free_r+0x54>
 8014d44:	42a2      	cmp	r2, r4
 8014d46:	d9fa      	bls.n	8014d3e <_free_r+0x4a>
 8014d48:	6819      	ldr	r1, [r3, #0]
 8014d4a:	1858      	adds	r0, r3, r1
 8014d4c:	42a0      	cmp	r0, r4
 8014d4e:	d10b      	bne.n	8014d68 <_free_r+0x74>
 8014d50:	6820      	ldr	r0, [r4, #0]
 8014d52:	4401      	add	r1, r0
 8014d54:	1858      	adds	r0, r3, r1
 8014d56:	4282      	cmp	r2, r0
 8014d58:	6019      	str	r1, [r3, #0]
 8014d5a:	d1dd      	bne.n	8014d18 <_free_r+0x24>
 8014d5c:	6810      	ldr	r0, [r2, #0]
 8014d5e:	6852      	ldr	r2, [r2, #4]
 8014d60:	605a      	str	r2, [r3, #4]
 8014d62:	4401      	add	r1, r0
 8014d64:	6019      	str	r1, [r3, #0]
 8014d66:	e7d7      	b.n	8014d18 <_free_r+0x24>
 8014d68:	d902      	bls.n	8014d70 <_free_r+0x7c>
 8014d6a:	230c      	movs	r3, #12
 8014d6c:	602b      	str	r3, [r5, #0]
 8014d6e:	e7d3      	b.n	8014d18 <_free_r+0x24>
 8014d70:	6820      	ldr	r0, [r4, #0]
 8014d72:	1821      	adds	r1, r4, r0
 8014d74:	428a      	cmp	r2, r1
 8014d76:	bf04      	itt	eq
 8014d78:	6811      	ldreq	r1, [r2, #0]
 8014d7a:	6852      	ldreq	r2, [r2, #4]
 8014d7c:	6062      	str	r2, [r4, #4]
 8014d7e:	bf04      	itt	eq
 8014d80:	1809      	addeq	r1, r1, r0
 8014d82:	6021      	streq	r1, [r4, #0]
 8014d84:	605c      	str	r4, [r3, #4]
 8014d86:	e7c7      	b.n	8014d18 <_free_r+0x24>
 8014d88:	bd38      	pop	{r3, r4, r5, pc}
 8014d8a:	bf00      	nop
 8014d8c:	200005fc 	.word	0x200005fc

08014d90 <_malloc_usable_size_r>:
 8014d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d94:	1f18      	subs	r0, r3, #4
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	bfbc      	itt	lt
 8014d9a:	580b      	ldrlt	r3, [r1, r0]
 8014d9c:	18c0      	addlt	r0, r0, r3
 8014d9e:	4770      	bx	lr

08014da0 <_fstat_r>:
 8014da0:	b538      	push	{r3, r4, r5, lr}
 8014da2:	4c07      	ldr	r4, [pc, #28]	; (8014dc0 <_fstat_r+0x20>)
 8014da4:	2300      	movs	r3, #0
 8014da6:	4605      	mov	r5, r0
 8014da8:	4608      	mov	r0, r1
 8014daa:	4611      	mov	r1, r2
 8014dac:	6023      	str	r3, [r4, #0]
 8014dae:	f7ee fc6a 	bl	8003686 <_fstat>
 8014db2:	1c43      	adds	r3, r0, #1
 8014db4:	d102      	bne.n	8014dbc <_fstat_r+0x1c>
 8014db6:	6823      	ldr	r3, [r4, #0]
 8014db8:	b103      	cbz	r3, 8014dbc <_fstat_r+0x1c>
 8014dba:	602b      	str	r3, [r5, #0]
 8014dbc:	bd38      	pop	{r3, r4, r5, pc}
 8014dbe:	bf00      	nop
 8014dc0:	20002618 	.word	0x20002618

08014dc4 <_isatty_r>:
 8014dc4:	b538      	push	{r3, r4, r5, lr}
 8014dc6:	4c06      	ldr	r4, [pc, #24]	; (8014de0 <_isatty_r+0x1c>)
 8014dc8:	2300      	movs	r3, #0
 8014dca:	4605      	mov	r5, r0
 8014dcc:	4608      	mov	r0, r1
 8014dce:	6023      	str	r3, [r4, #0]
 8014dd0:	f7ee fc69 	bl	80036a6 <_isatty>
 8014dd4:	1c43      	adds	r3, r0, #1
 8014dd6:	d102      	bne.n	8014dde <_isatty_r+0x1a>
 8014dd8:	6823      	ldr	r3, [r4, #0]
 8014dda:	b103      	cbz	r3, 8014dde <_isatty_r+0x1a>
 8014ddc:	602b      	str	r3, [r5, #0]
 8014dde:	bd38      	pop	{r3, r4, r5, pc}
 8014de0:	20002618 	.word	0x20002618

08014de4 <_init>:
 8014de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014de6:	bf00      	nop
 8014de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dea:	bc08      	pop	{r3}
 8014dec:	469e      	mov	lr, r3
 8014dee:	4770      	bx	lr

08014df0 <_fini>:
 8014df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014df2:	bf00      	nop
 8014df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014df6:	bc08      	pop	{r3}
 8014df8:	469e      	mov	lr, r3
 8014dfa:	4770      	bx	lr
